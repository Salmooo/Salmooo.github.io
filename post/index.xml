<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Test on SalmoneX Blog</title>
        <link>https://Salmooo.github.io/post/</link>
        <description>Recent content in Test on SalmoneX Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>salmone</copyright>
        <lastBuildDate>Wed, 16 Oct 2019 19:32:27 +0800</lastBuildDate><atom:link href="https://Salmooo.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>计算机网络学习小结</title>
        <link>https://Salmooo.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</link>
        <pubDate>Wed, 16 Oct 2019 19:32:27 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E5%B0%8F%E7%BB%93/</guid>
        <description>&lt;p&gt;#1. 网络结构&lt;/p&gt;
&lt;h2 id=&#34;11-计算机网络结构&#34;&gt;1.1 计算机网络结构？
&lt;/h2&gt;&lt;p&gt;计算机网络一共有3种模型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OSI七层结构&lt;/li&gt;
&lt;li&gt;TCP/IP结构&lt;/li&gt;
&lt;li&gt;五层协议结构&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200216134035.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSI是Open Systems Interconnect&lt;/strong&gt;，也就是开放的互联系统，将复杂的互联网系统划分为不同块，方便处理。&lt;/p&gt;
&lt;p&gt;实际应用中，并没有采用这个理论模型，而是使用TCP/IP协议的四层模型。&lt;/p&gt;
&lt;p&gt;而5层模型是一个理论上的网络通信模型，方便教学的时候理解，实际上并不存在。&lt;/p&gt;
&lt;h2 id=&#34;12-计算机网络中各层作用&#34;&gt;1.2 计算机网络中各层作用
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6266643a-3e0e-4338-b94d-4017814417bf/Untitled.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）应用层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应用层的任务是通过应用进程间的交互来完成特定网络应用，访问OSI环境的手段&lt;/strong&gt;，应用层协议定义的是应用进程（进程:主机中正在运行的程序）间的通信和交互的规则。&lt;/p&gt;
&lt;p&gt;常见的协议有&lt;strong&gt;域名系统DNS&lt;/strong&gt;，万维网应用的&lt;strong&gt;HTTP协议&lt;/strong&gt;，支持&lt;strong&gt;电子邮件的SMTP协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;应用层是不用去关心数据是如何传输的，就类似于，我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不需要关心快递是如何被运输的。&lt;/p&gt;
&lt;p&gt;把&lt;strong&gt;应用层交互的数据单元&lt;/strong&gt;称为&lt;strong&gt;报文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）运输层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为两台主机进程之间的通信提供**通用的数据传输服务，端对端的可靠报文传递和错误恢复。**主要包含两种协议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;传输控制协议 TCP&lt;/strong&gt;（Transmisson Control Protocol）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面向连接 面向字节流 可靠 传输慢 流量控制阻塞控制 1v1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;**面向连接（三次握手四次挥手）， 面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），可靠（握手、ACK和重传机制），传输慢，**有流量控制阻塞控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户数据报协议 UDP&lt;/strong&gt;（User Datagram Protocol）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无连接，面向报文，不可靠尽最大可能交付，传输快，没有流量控制和拥塞控制，可1vn to nv1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无连接的，尽最大可能交付，不可靠，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部&lt;/strong&gt;） ，支持一对一、一对多、多对一和多对多的交互通信，传输快，没有流量控制拥塞控制。&lt;/p&gt;
&lt;p&gt;当然，&lt;strong&gt;UDP 也可以实现可靠传输，把 TCP 的特性在应用层上实现就可以&lt;/strong&gt;，不过要实现一个商用的可靠 UDP 传输协议，也不是一件简单的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据包大小超过 MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 TCP 协议中，我们把每个分块称为一个 TCP 段（&lt;em&gt;TCP Segment&lt;/em&gt;）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是&lt;strong&gt;端口&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如 80 端口通常是 Web 服务器用的，22 端口通常是远程登录服务器用的。&lt;/p&gt;
&lt;p&gt;而对于浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）网络层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络层的任务就是选择合适的网间路由和交换结点，确保数据及时传送，数据包传递与网际互连。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络层最常使用的是 IP 协议（&lt;em&gt;Internet Protocol&lt;/em&gt;），IP 协议会将传输层的报文作为数据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（最大传输单元，Maximum Transmission Unit）以太网中一般为 1500 字节）就会&lt;strong&gt;再次进行分片&lt;/strong&gt;，得到一个即将发送到网络的 IP 报文。&lt;/p&gt;
&lt;p&gt;使用&lt;strong&gt;IP协议&lt;/strong&gt;，ARP协议，IP协议，ICMP协议，IGMP协议等。&lt;/p&gt;
&lt;p&gt;网络层有两个任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把运输层产生的&lt;strong&gt;报文段&lt;/strong&gt;或用户数据报 &lt;strong&gt;封装成分组和包进行传送&lt;/strong&gt;。在 TCP/IP 体系结构中，由于网络层使用 &lt;strong&gt;IP 协议&lt;/strong&gt;，因此分组也叫 &lt;strong&gt;IP 数据报&lt;/strong&gt; ，简称 &lt;strong&gt;数据报&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;注意：不要把运输层的用户数据报UDP和网络层的IP数据报弄混。&lt;/li&gt;
&lt;li&gt;选择&lt;strong&gt;合适的路由，找到目的主机。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网络层负责将数据从一个设备传输到另一个设备，世界上那么多设备，又该如何找到对方呢？因此，网络层需要有区分设备的编号。&lt;/p&gt;
&lt;p&gt;我们一般用 IP 地址给设备进行编号，对于 IPv4 协议， IP 地址共 32 位，分成了四段（比如，192.168.100.1），每段是 8 位。只有一个单纯的 IP 地址虽然做到了区分设备，但是寻址起来就特别麻烦，全世界那么多台设备，难道一个一个去匹配？这显然不科学。&lt;/p&gt;
&lt;p&gt;因此，需要将 IP 地址分成两种意义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是&lt;strong&gt;网络号&lt;/strong&gt;，负责标识该 IP 地址是属于哪个「子网」的；&lt;/li&gt;
&lt;li&gt;一个是&lt;strong&gt;主机号&lt;/strong&gt;，负责标识同一「子网」下的不同主机；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（4）数据链路层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据链路层的任务是确保在直接相连的两个节点之间可靠地传输数据，并处理与物理层交互和链路管理相关的事务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两台主机之间的数据传输，总是在&lt;strong&gt;一段一段的链路&lt;/strong&gt;上传送的，这就需要使用专门的链路层的协议。&lt;/p&gt;
&lt;p&gt;在两个相邻节点之间传送数据时，&lt;strong&gt;数据链路层将网络层交下来的 IP 数据报组装程帧&lt;/strong&gt;，在两个相邻节点间的链路上传送帧。&lt;/p&gt;
&lt;p&gt;主要协议：1、Point-to-Point Protocal——PPP点到点。2、Ethernet——以太网。3、High-Level Data Link Control Protocal——高级链路控制协议。4、Frame Relay——帧中继。5、Asynchronous Transfer Mode——异步传输模式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（5）物理层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;物理层的任务就是&lt;strong&gt;透明地传输比特流&lt;/strong&gt;，尽可能屏蔽掉具体传输介质和物理设备的差异，确定电气规范，使其上面的数据链路层不必考虑网络的具体传输介质是什么。换句话说实际电路传送后比特流没有发生变化。&lt;/p&gt;
&lt;p&gt;Tips:&lt;/p&gt;
&lt;p&gt;网络接口层&lt;/p&gt;
&lt;p&gt;生成了 IP 头部之后，接下来要交给**网络接口层（Link Layer）在 IP 头部的前面加上 MAC 头部，**并封装成数据帧（Data frame）发送到网络上。&lt;/p&gt;
&lt;p&gt;主要为网络层提供「链路级别」传输的服务，负责在以太网、WiFi 这样的底层网络上发送原始数据包，工作在网卡这个层次，使用 MAC 地址来标识网络上的设备。&lt;/p&gt;
&lt;h1 id=&#34;2-tcpip协议&#34;&gt;2. TCP/IP协议
&lt;/h1&gt;&lt;h2 id=&#34;21-tcpip协议的结构&#34;&gt;2.1 TCP/IP协议的结构
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200216134831.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://prod-files-secure.s3.us-west-2.amazonaws.com/55e47ff7-aae4-4da6-84db-815d6c9a8d65/bb471c0e-dc56-44d3-b972-2d88149a49cc/Untitled.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;p&gt;1、源端口号（Source Port）
16位的源端口字段包含初始化通信的端口号。源端口和IP地址的作用是标识报文的返回地址。&lt;/p&gt;
&lt;p&gt;2、目的端口号（Destination Port）
　16位的目的端口字段定义传输的目的。这个端口指明接收方计算机上的应用程序接口。&lt;/p&gt;
&lt;p&gt;3、序列号（Sequence Number）
该字段用来标识TCP源端设备向目的端设备发送的字节流，它表示在这个报文段中的第几个数据字节。序列号是一个32位的数。&lt;/p&gt;
&lt;p&gt;4、确认号（Acknowledge Number）
　　TCP使用32位的确认号字段标识期望收到的下一个段的第一个字节，并声明此前的所有数据已经正确无误地收到，因此，确认号应该是上次已成功收到的数据字节序列号加1。收到确认号的源计算机会知道特定的段已经被收到。确认号的字段只在ACK标志被设置时才有效。
5、首部长度
长度为4位，用于表示TCP报文首部的长度。用4位（bit）表示，十进制值就是[0,15]，一个TCP报文前20个字节是必有的，后40个字节根据情况可能有可能没有。如果TCP报文首部是20个字节，则该位应是20/4=5。
6、保留位（Reserved）
长度为6位，必须是0，它是为将来定义新用途保留的。
7、标志（Code Bits）
长度为6位，在TCP报文中不管是握手还是挥手还是传数据等，这6位标志都很重要。6位从左到右依次为：
1.
• URG：紧急标志位，说明紧急指针有效；
• ACK：确认标志位，多数情况下空，说明确认序号有效； 取1时表示应答字段有效，也即TCP应答号将包含在TCP段中，为0则反之。
• PSH：推标志位，置位时表示接收方应立即请求将报文交给应用层；
• RST：复位标志，用于重建一个已经混乱的连接，用来复位产生错误的连接，也会用来拒绝错误和非法的数据包。
• SYN：同步标志，该标志仅在三次握手建立TCP连接时有效
• FIN：结束标志，表示发送端已经发送到数据末尾，数据传送完成，发送FIN标志位的TCP段，连接将被断开。
8、窗口大小（Window Size）
长度为16位，TCP流量控制由连接的每一端通过声明的窗口大小来提供。
9、检验和（Checksum）
长度为16位，该字段覆盖整个TCP报文端，是个强制性的字段，是由发送端计算和存储，到接收端后，由接收端进行验证。
10、紧急指针（Urgent Pointer）
长度为16位，指向数据中优先部分的最后一个字节，通知接收方紧急数据的长度，该字段在URG标志置位时有效。
11、选项（Options）
长度为0-40B（字节），必须以4B为单位变化，必要时可以填充0。通常包含：最长报文大小（MaximumSegment Size，MSS）、窗口扩大选项、时间戳选项、选择性确认（Selective ACKnowlegement，SACK）等。
12、数据
可选报文段数据部分。&lt;/p&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，&lt;strong&gt;源端口号&lt;/strong&gt;和&lt;strong&gt;目标端口&lt;/strong&gt;号是不可少的，如果没有这两个端口号，数据就不知道应该发给哪个应用。&lt;/li&gt;
&lt;li&gt;接下来有包的&lt;strong&gt;序&lt;/strong&gt;号，这个是为了解决包乱序的问题。&lt;/li&gt;
&lt;li&gt;还有应该有的是&lt;strong&gt;确认号&lt;/strong&gt;，目的是确认发出去对方是否有收到。如果没有收到就应该重新发送，直到送达，这个是&lt;strong&gt;为了解决不丢包的问题&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;接下来还有一些&lt;strong&gt;状态位flag&lt;/strong&gt;。例如 &lt;code&gt;SYN&lt;/code&gt; 是发起一个连接，&lt;code&gt;ACK&lt;/code&gt; 是回复，&lt;code&gt;RST&lt;/code&gt; 是重新连接，&lt;code&gt;FIN&lt;/code&gt; 是结束连接等。  TCP 是面向连接的，&lt;strong&gt;因而双方要维护连接的状态，这些带状态位的包的发送，会引起双方的状态变更。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;还有一个重要的就是&lt;strong&gt;窗口大小&lt;/strong&gt;。TCP 要做&lt;strong&gt;流量控制&lt;/strong&gt;，通信双方各声明一个窗口（缓存大小），标识自己当前能够的处理能力，别发送的太快，撑死我，也别发的太慢，饿死我。&lt;/li&gt;
&lt;li&gt;除了做流量控制以外，TCP还会做&lt;strong&gt;拥塞控制&lt;/strong&gt;，对于真正的通路堵车不堵车，它无能为力，唯一能做的就是控制自己，也即控制发送的速度。不能改变世界，就改变自己嘛。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;udp报头&#34;&gt;UDP报头
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://prod-files-secure.s3.us-west-2.amazonaws.com/55e47ff7-aae4-4da6-84db-815d6c9a8d65/0b2ea092-a08a-4264-bbe7-5e8107707be0/Untitled.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;p&gt;每个 UDP 报文分为 &lt;strong&gt;UDP 报头和 UDP 数据区&lt;/strong&gt;两部分。报头由 &lt;strong&gt;4 个 16 位长（2 字节）字段&lt;/strong&gt;组成，分别说明该报文的源端口、目的端口、报文长度和校验值。&lt;/p&gt;
&lt;p&gt;UDP 报文中每个字段的含义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;源端口：这个字段占据 UDP 报文头的前 16 位，通常包含发送数据报的应用程序所使用的 UDP 端口。接收端的应用程序利用这个字段的值作为发送响应的目的地址。&lt;strong&gt;这个字段是可选的，所以发送端的应用程序不一定会把自己的端口号写入该字段中。如果不写入端口号，则把这个字段设置为 0。这样，接收端的应用程序就不能发送响应了。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;目的端口：接收端计算机上 &lt;strong&gt;UDP 软件使用的端口，占据 16 位。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;长度：该字段&lt;strong&gt;占据 16 位&lt;/strong&gt;，表示 UDP 数据报长度**，包含 UDP 报文头和 UDP 数据长度**。因为 &lt;strong&gt;UDP 报文头长度是 8 个字节，所以这个值最小为 8。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;校验值：&lt;strong&gt;该字段占据 16 位&lt;/strong&gt;，可以检验数据在&lt;strong&gt;传输过程中是否被损坏。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip数据报的首部&#34;&gt;IP数据报的首部
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注：IP数据报的格式，能够说明IP协议都具有什么功能。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://img-blog.csdn.net/20160216233020326&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;-&lt;/p&gt;
&lt;h3 id=&#34;ip数据报首部固定部分&#34;&gt;IP数据报首部——固定部分
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.1 版本&lt;/strong&gt; &lt;strong&gt;占4位，指IP协议的版本。&lt;/strong&gt; 通信双方使用的IP协议的版本必须一致。 &lt;strong&gt;IP协议版本号为4(即IPv4)，IP协议版本号为6(即IPv6)。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.2 首部长度 占4位，可表示的最大十进制数值是15。&lt;/strong&gt; 这个字段所表示数的单位是32位字(&lt;strong&gt;即4字节&lt;/strong&gt;)，因此，当IP的首部长度为1111(即十进制的15)时，&lt;strong&gt;首部长度就达到最大值60个字节&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;最常用的首部长度就是&lt;strong&gt;20个字节(即首部长度为0101&lt;/strong&gt;)，这时不使用任何选项，是固定首部的长度。 当IP分组的&lt;strong&gt;首部长度不是4字节的整数倍时，必须利用最后的填充字段加以填充&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.3 区分服务&lt;/strong&gt; &lt;strong&gt;占8位，用来获得更好的服务。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.4 总长度&lt;/strong&gt; &lt;strong&gt;占16位，指首部和数据之和的长度。&lt;/strong&gt; 数据报的最大长度为&lt;strong&gt;2^16 -1 = 65535字节&lt;/strong&gt;。“MTU是Maximum Transmission Unit的缩写。意思是网络上传送的最大数据包&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;在IP层下面的每一种数据链路层都有其自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元MTU(Maximum Transfer Unit)。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;当一个IP数据报封装成数据链路层的帧时，此数据报的总长度(即首部加上数据部分)，一定不能**超过下面的数据链路层的MTU值。**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;虽然使用尽可能长的数据报会使传输效率提高，但由于以太网的普遍应用，所以实际上使用的**数据报长度很少有超过1500字节的。**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;为了不使IP数据报的传输效率降低，有关IP的标准文档规定，所有的**主机和路由器必须能够处理的IP数据报的长度不得少于576字节。这个数值也就是最小的IP数据报的总长度。**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;当数据报长度超过网络所容许的最大传送单元MTU时，就必须把**过长的数据报进行分片后才能在网络上传送(“片偏移”字段相关)。**
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这时，**数据报首部中的总长度不是指未分片前的数据报长度，而是指分片后的每一个分片的首部长度与数据长度的总和。**
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.5 标识&lt;/strong&gt; &lt;strong&gt;占16位，指IP软件在存储器中维持一个计数器，每产生一个数据报&lt;/strong&gt;，&lt;strong&gt;计数器就加1&lt;/strong&gt;，并将此值付给标识字段。&lt;/p&gt;
&lt;p&gt;但这个&lt;strong&gt;标识并不是序号&lt;/strong&gt;，因为&lt;strong&gt;IP是无连接服务&lt;/strong&gt;，数据报不存在按序接收的问题。 当数据报由于&lt;strong&gt;长度超过网络的MTU而必须分片&lt;/strong&gt;时，这个标识字段的值就会被复制到所有的数据报片的标识字段中。相&lt;strong&gt;同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.6 标志&lt;/strong&gt; &lt;strong&gt;占3位，但目前只有两位有意义。&lt;/strong&gt; 标志字段中的最低位记为MF(More Fragment)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(1) MF=1即表示后面“还有分片”的数据报。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(2)MF=0即表示这已是若干数据报片中的最后一个。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标志字段中的&lt;strong&gt;中间位DF&lt;/strong&gt;(Don’t Fragment)，意思是**“不能分片”**，只有当DF=0时才允许分片。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.7 片偏移&lt;/strong&gt; &lt;strong&gt;占13位，指出较长的分钟再分片后，某片在原分组中的相对位置。&lt;/strong&gt; &lt;strong&gt;也就是说，相对于用户数据字段的起点，该片从何处开始。&lt;/strong&gt; 片偏移以8个字节为偏移单位。&lt;/p&gt;
&lt;p&gt;也就是说，&lt;strong&gt;每个分片的长度一定是8字节(64位)的整数倍。&lt;/strong&gt; 例子：一数据报的总长度为3820字节，其数据部分为3800字节长(使用固定首部)，需要分片为长度不超过1420字节的数据报片。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因固定首部长度为20字节，因此每个数据报片的数据部分长度不能超过1400字节&lt;/strong&gt;。于是分成3个数据报片，其数据部分的长度分别分为&lt;strong&gt;1400,1400和1000字节&lt;/strong&gt;。&lt;strong&gt;原始数据报首部被复制为各数据报片的首部，但必须修改有关字段的值。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.8 生存时间&lt;/strong&gt; &lt;strong&gt;占8位，常用的英文缩写是TTL(Time To Live)，表明数据报在网络中的寿命。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由&lt;strong&gt;发出数据报的源点设置这个字段&lt;/strong&gt;。 其目的是为了防止无法交付的数据报&lt;strong&gt;无限制地在因特网中兜圈子，因而白白浪费网络资源&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;随着技术的发展，&lt;strong&gt;TTL字段的功能改为“跳数限制”&lt;/strong&gt;。路由器在转发数据报之前就把TTL值减1。若TTL值减少到零，就丢弃这个数据报，不再转发。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;现在TTL的单位不再是秒，而是跳数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;TTL的意义是指明数据报在因特网中&lt;strong&gt;至多可经过多少个路由器&lt;/strong&gt;。显然，数据报能在因特网中经过的&lt;strong&gt;路由器的最大数是255&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若把&lt;strong&gt;TTL的初始值设置为1，就表示这个数据报只能在本局域网中传送&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.9 协议&lt;/strong&gt; &lt;strong&gt;占8位，指出此数据报携带的数据是使用何种协议，一遍使目的主机的IP层知道应将数据部分上交给哪个处理过程。&lt;/strong&gt; 常用的一些协议和相应协议的字段值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.10 首部检验和&lt;/strong&gt; &lt;strong&gt;占16位，只检验数据报的首部&lt;/strong&gt;，但不包括数据部分。&lt;/p&gt;
&lt;p&gt;这是因为数据报每经过一个路由器，路由器都要重新计算一下&lt;strong&gt;首部检验和&lt;/strong&gt;(一些字段，如生存时间、标志、片偏移等都可能发生变化)。 &lt;strong&gt;不检验数据部分可减少计算的工作量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了进一步减少计算检验和的工作量，IP首部的检验和不采用&lt;strong&gt;复杂的CRC检验码&lt;/strong&gt;而是采用以下算法： (1)在发送方，先把IP数据报首部划分为许多16位字的序列，并把检验和字段置零。 (2)用反码算术运算把所有16位字相加后，将得到的和的反码写入检验和字段， (3)接收方收到数据报后，将首部的所有16位字再使用&lt;strong&gt;反码算术运算相加一次。将得到的和取反码&lt;/strong&gt;，即得出接收方检验和的计算结果。若首部未发生任何变化，则此结果必为0，于是就保留这个数据报，否则即认为出错，并将此数据报丢弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.11 源地址&lt;/strong&gt; &lt;strong&gt;占32位。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.12 目的地址&lt;/strong&gt; &lt;strong&gt;占32位。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ip数据报首部可变部分&#34;&gt;&lt;strong&gt;IP数据报首部——可变部分&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;IP首部的可变部分就是一个选项字段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.1 可选字段(长度可变)&lt;/strong&gt; 选项字段用&lt;strong&gt;来支持排错、测量以及安全等措施，内容很丰富&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此字段的长度可变，从&lt;strong&gt;1~40个字节不等&lt;/strong&gt;，取决于所选择的项目。 某些选项项目只需要1个字节，它只包括1个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.2 填充&lt;/strong&gt; &lt;strong&gt;最后用全0的填充字段补齐成为4字节的整数倍。&lt;/strong&gt; 注：增加首部的可变部分是为了&lt;strong&gt;增加IP数据报的功能&lt;/strong&gt;，但这同时也使得IP数据报的&lt;strong&gt;首部长度成为可变的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。新的IP版本&lt;strong&gt;IPv6就把IP数据报的首部长度做成固定的&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-tcp和udp的区别&#34;&gt;2.2 TCP和UDP的区别
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;TCP：&lt;strong&gt;面向连接&lt;/strong&gt;（三次握手四次挥手），&lt;strong&gt;可靠&lt;/strong&gt;（握手、ACK和重传机制），&lt;strong&gt;面向字节流&lt;/strong&gt;（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），&lt;strong&gt;传输慢&lt;/strong&gt;， &lt;strong&gt;有流量控制阻塞控制&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;UDP：&lt;strong&gt;无连接的&lt;/strong&gt;，尽最大可能交付不可靠，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部） ，支持一对一、一对多、多对一和多对多的交互通信, &lt;strong&gt;传输快&lt;/strong&gt;，&lt;strong&gt;没有流量控制拥塞控制&lt;/strong&gt;，&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解释一下报文和字节流的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;字节流&lt;/strong&gt;：**发送次数和接收次数可以不相同。**比如向水池倒了20盆水，可以开水龙头一次性全放出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报文&lt;/strong&gt;：&lt;strong&gt;发送次数和接收次数必须相同&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;两者的应用场景&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP：&lt;strong&gt;效率要求相对低&lt;/strong&gt;，但对&lt;strong&gt;准确性要求相对高&lt;/strong&gt;的场景。
&lt;ul&gt;
&lt;li&gt;比如邮件，远程登录，文件传输等对&lt;strong&gt;准确性要求较高&lt;/strong&gt;的地方, 远程控制（SSH）,File Transfer Protocol（FTP）,邮件（SMTP、IMAP）等,点对点文件传出（微信等）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UDP：&lt;strong&gt;效率要求相对高&lt;/strong&gt;，&lt;strong&gt;传输快速&lt;/strong&gt;，对&lt;strong&gt;准确性要求相对低&lt;/strong&gt;的场景。
&lt;ul&gt;
&lt;li&gt;比如&lt;strong&gt;QQ聊天、在线视频、网络语音电话&lt;/strong&gt;等响应&lt;strong&gt;速度要求高&lt;/strong&gt;的场景，广播通信（广播、多播）。网络游戏, 音视频传输, DNS, Ping, 直播&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**第三类：模糊地带（TCP、UDP 都可以考虑），HTTP（目前以 TCP 为主），**文件传输？&lt;/p&gt;
&lt;h3 id=&#34;tcp报文段&#34;&gt;TCP报文段
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190421142056148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3psMTMwMTUyMTQ0NDI=,size_16,color_FFFFFF,t_70&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;序号 ：&lt;strong&gt;用于对字节流进行编号&lt;/strong&gt;，例如序号为 301，表示第一个字节的编号为301，&lt;strong&gt;如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401&lt;/strong&gt;，&lt;strong&gt;没有携带数据就是302&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;确认号ack ：&lt;strong&gt;期望收到的下一个报文段的序号&lt;/strong&gt;。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段 的序号为 701，B 发送给 A 的确认报文段中确认号就为 701，没有携带数据就是502。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据偏移&lt;/strong&gt; ：指的是&lt;strong&gt;数据部分距离报文段起始处的偏移量&lt;/strong&gt;，实际上&lt;strong&gt;指的是首部的长度&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;确认 ACK ：&lt;strong&gt;当 ACK=1 时确认号字段ack有效，否则无效&lt;/strong&gt;。TCP 规定，&lt;strong&gt;在连接建立后所有传送的报文段都必须把 ACK 置 1&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;同步 SYN ：&lt;strong&gt;在连接建立时用来同步序号&lt;/strong&gt;。当 &lt;strong&gt;SYN=1，ACK=0 时表示这是一个连接请求报文段&lt;/strong&gt;。若对方同意建立连接，则响应报文中 &lt;strong&gt;SYN=1，ACK=1&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;终止 FIN ：&lt;strong&gt;用来释放一个连接&lt;/strong&gt;，&lt;strong&gt;当 FIN=1 时，表示此报文段的发送方的数据已发送完毕&lt;/strong&gt;，并要求释放连接。&lt;/li&gt;
&lt;li&gt;窗口 ：&lt;strong&gt;窗口值作为接收方让发送方设置其发送窗口&lt;/strong&gt;的依据。之所以要有这个限制，是因为&lt;strong&gt;接收方的数据缓存空间&lt;/strong&gt;是有限的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MTU&lt;/code&gt;：一个网络包的最大长度，以太网中一般为 &lt;code&gt;1500&lt;/code&gt; 字节。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MSS&lt;/code&gt;：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如何查看 TCP 的连接状态？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP 的连接状态查看，在 Linux 可以通过 &lt;code&gt;netstat -napt&lt;/code&gt; 命令查看。&lt;/p&gt;
&lt;h2 id=&#34;24-三次握手和四次挥手&#34;&gt;2.4 三次握手和四次挥手
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://jiangren.work/2019/08/01/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://jiangren.work/2019/08/01/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8E%9F%E7%90%86/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;三次握手&#34;&gt;&lt;strong&gt;三次握手&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;所谓&lt;strong&gt;三次握手&lt;/strong&gt;是指&lt;strong&gt;建立&lt;/strong&gt;一个TCP连接时，&lt;strong&gt;需要客户端和服务器发送3个包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.bmp.ovh/imgs/2019/07/8dabc100eb0549e0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;名词解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SYN：Synchronize，&lt;strong&gt;同步标志位&lt;/strong&gt;，&lt;strong&gt;为1时表示序列号有效&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ACK：Acknowledgment，&lt;strong&gt;确认标志位&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;seq：Synchronize Sequence Number，&lt;strong&gt;同步序列号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;ack：&lt;strong&gt;确认序列号&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;握手过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一次握手：客户端发送&lt;strong&gt;SYN标志为1&lt;/strong&gt;的包，以及&lt;strong&gt;同步序列号x&lt;/strong&gt;，并指明打算连接的&lt;strong&gt;服务器端口&lt;/strong&gt;。此时，&lt;strong&gt;connect进入阻塞状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;客户端会随机初始化序号（&lt;code&gt;client_isn&lt;/code&gt;），将此序号置于 TCP 首部的「序号」字段中，同时把 &lt;code&gt;SYN&lt;/code&gt; 标志位置为 &lt;code&gt;1&lt;/code&gt; ，表示 &lt;code&gt;SYN&lt;/code&gt; 报文。接着把第一个 SYN 报文发送给服务端，表示向服务端发起连接，该报文不包含应用层数据，之后客户端处于 &lt;code&gt;SYN-SENT&lt;/code&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二次握手：服务器收到后，发送&lt;strong&gt;SYN和ACK标志为1&lt;/strong&gt;的包，同时也发送一个自己的&lt;strong&gt;同步序列号y&lt;/strong&gt;，外加一个确认序列号&lt;strong&gt;ack=x+1&lt;/strong&gt;。此时accept进入阻塞状态。&lt;/p&gt;
&lt;p&gt;服务端收到客户端的 &lt;code&gt;SYN&lt;/code&gt; 报文后，首先服务端也随机初始化自己的序号（&lt;code&gt;server_isn&lt;/code&gt;），将此序号填入 TCP 首部的「序号」字段中，其次把 TCP 首部的「确认应答号」字段填入 &lt;code&gt;client_isn + 1&lt;/code&gt;, 接着把 &lt;code&gt;SYN&lt;/code&gt; 和 &lt;code&gt;ACK&lt;/code&gt; 标志位置为 &lt;code&gt;1&lt;/code&gt;。最后把该报文发给客户端，该报文也不包含应用层数据，之后服务端处于 &lt;code&gt;SYN-RCVD&lt;/code&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三次握手：客户端收到后，再次发送&lt;strong&gt;ACK=1&lt;/strong&gt;，以及&lt;strong&gt;同步序列号seq(x+1)和确认序列号ack(y+1)&lt;/strong&gt;，与此同时，connect返回。当服务器收到ACK=1时，accept返回。&lt;/p&gt;
&lt;p&gt;客户端收到服务端报文后，还要向服务端回应最后一个应答报文，首先该应答报文 TCP 首部 &lt;code&gt;ACK&lt;/code&gt; 标志位置为 &lt;code&gt;1&lt;/code&gt; ，其次「确认应答号」字段填入 &lt;code&gt;server_isn + 1&lt;/code&gt; ，最后把报文发送给服务端，&lt;strong&gt;这次报文可以携带客户到服务器的数据&lt;/strong&gt;，之后客户端处于 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器收到客户端的应答报文后，也进入 &lt;code&gt;ESTABLISHED&lt;/code&gt; 状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从上面的过程可以发现&lt;strong&gt;第三次握手是可以携带数据的，前两次握手是不可以携带数据的&lt;/strong&gt;，这也是面试常问的题。&lt;/p&gt;
&lt;h3 id=&#34;四次挥手&#34;&gt;&lt;strong&gt;四次挥手&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/69db7c9b-4035-4d2c-98a7-48038e4fa9db/Untitled.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端打算关闭连接，此时会发送一个 TCP 首部 &lt;code&gt;FIN&lt;/code&gt; 标志位被置为 &lt;code&gt;1&lt;/code&gt; 的报文，也即 &lt;code&gt;FIN&lt;/code&gt; 报文，之后客户端进入 &lt;code&gt;FIN_WAIT_1&lt;/code&gt; 状态。&lt;/li&gt;
&lt;li&gt;服务端收到该报文后，就向客户端发送 &lt;code&gt;ACK&lt;/code&gt; 应答报文，接着服务端进入 &lt;code&gt;CLOSED_WAIT&lt;/code&gt; 状态。&lt;/li&gt;
&lt;li&gt;客户端收到服务端的 &lt;code&gt;ACK&lt;/code&gt; 应答报文后，之后进入 &lt;code&gt;FIN_WAIT_2&lt;/code&gt; 状态。&lt;/li&gt;
&lt;li&gt;等待服务端处理完数据后，也向客户端发送 &lt;code&gt;FIN&lt;/code&gt; 报文，之后服务端进入 &lt;code&gt;LAST_ACK&lt;/code&gt; 状态。&lt;/li&gt;
&lt;li&gt;客户端收到服务端的 &lt;code&gt;FIN&lt;/code&gt; 报文后，回一个 &lt;code&gt;ACK&lt;/code&gt; 应答报文，之后进入 &lt;code&gt;TIME_WAIT&lt;/code&gt; 状态&lt;/li&gt;
&lt;li&gt;服务器收到了 &lt;code&gt;ACK&lt;/code&gt; 应答报文后，就进入了 &lt;code&gt;CLOSED&lt;/code&gt; 状态，至此服务端已经完成连接的关闭。&lt;/li&gt;
&lt;li&gt;客户端在经过 &lt;code&gt;2MSL&lt;/code&gt; 一段时间后，自动进入 &lt;code&gt;CLOSED&lt;/code&gt; 状态，至此客户端也完成连接的关闭&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q1-为什么不能用两次握手连接&#34;&gt;Q&lt;strong&gt;1. 为什么不能用两次握手连接&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;三次握手才可以&lt;strong&gt;阻止重复历史连接的初始化&lt;/strong&gt;（主要原因）&lt;/li&gt;
&lt;li&gt;三次握手才可以&lt;strong&gt;同步双方的初始序列号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;三次握手&lt;strong&gt;才可以避免资源浪费&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;原因一：避免历史连接&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一个「旧 SYN 报文」比「最新的 SYN 」 报文早到达了服务端；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;那么此时服务端就会回一个 &lt;code&gt;SYN + ACK&lt;/code&gt; 报文给客户端；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户端&lt;strong&gt;收到后可以根据自身的上下文，判断这是一个历史连接&lt;/strong&gt;（序列号过期或超时），那么客户端就会发送 &lt;code&gt;RST&lt;/code&gt; 报文给服务端，表示中止这一次连接。&lt;/p&gt;
&lt;p&gt;主要是因为&lt;strong&gt;在两次握手的情况下，「被动发起方」没有中间状态给「主动发起方」来阻止历史连接，导致「被动发起方」可能建立一个历史连接，造成资源浪费&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两次握手的情况下，「被动发起方」在收到 SYN 报文后，就进入 ESTABLISHED 状态，意味着这时可以给对方发送数据给，但是「主动发」起方此时还没有进入 ESTABLISHED 状态，假设这次是历史连接，主动发起方判断到此次连接为历史连接，那么就会回 RST 报文来断开连接，而「被动发起方」在第一次握手的时候就进入 ESTABLISHED 状态，所以它可以发送数据的，但是它并不知道这个是历史连接，它只有在收到 RST 报文后，才会断开连接&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;原因二：同步双方初始序列号&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;TCP 协议的通信双方， 都必须维护一个「序列号」， 序列号是可靠传输的一个关键因素，它的作用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接收方可以去除重复的数据；&lt;/li&gt;
&lt;li&gt;接收方可以根据数据包的序列号按序接收；&lt;/li&gt;
&lt;li&gt;可以标识发送出去的数据包中， 哪些是已经被对方收到的（&lt;strong&gt;通过 ACK 报文中的序列号知道&lt;/strong&gt;）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四次握手其实也能够可靠的同步双方的初始化序号，但由于&lt;strong&gt;第二步和第三步可以优化成一步&lt;/strong&gt;，所以就成了「三次握手」。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而两次握手只保证了一方的初始序列号能被对方成功接收，没办法保证双方的初始序列号都能被确认接收&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;原因三：避免资源浪费&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果只有「两次握手」，当客户端的 &lt;code&gt;SYN&lt;/code&gt; 请求连接在网络中阻塞，客户端没有接收到 &lt;code&gt;ACK&lt;/code&gt; 报文，就会重新发送 &lt;code&gt;SYN&lt;/code&gt; ，由于没有第三次握手，&lt;strong&gt;服务器不清楚客户端是否收到了自己发送的建立连接的 &lt;code&gt;ACK&lt;/code&gt; 确认信号&lt;/strong&gt;，&lt;strong&gt;所以每收到一个 &lt;code&gt;SYN&lt;/code&gt; 就只能先主动建立一个连接，这会造成什么情况呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果客户端的 &lt;code&gt;SYN&lt;/code&gt; 阻塞了，重复发送多次 &lt;code&gt;SYN&lt;/code&gt; 报文，那么服务器在收到请求后就会&lt;strong&gt;建立多个冗余的无效链接，造成不必要的资源浪费。这样就会造成死锁。也有可能打开两个连接或更多。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://img-blog.csdn.net/20180609003511513&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果握手只是两次，服务器端在没有确定客户端是否对自己做出了正确应答的情况下就建立了连接，此时客户端因为意外连接请求报文早就失效了，也不可能再理服务器端，但是&lt;strong&gt;服务器端会一直傻傻地等待客户端会发来点数据，造成了资源的浪费&lt;/strong&gt;。这真是服务器端自己自作多情啊。&lt;/p&gt;
&lt;p&gt;三次握手如果第三次失败了会怎么样：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;失败了服务端收到不确认包，会超时重发5次，若还是没有收到确认包，或者收到了数据包，则服务端直接发送reset重置包结束本次连接。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q2-为什么连接是三次握手而关闭时是四次挥手&#34;&gt;Q&lt;strong&gt;2. 为什么连接是三次握手，而关闭时是四次挥手&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;为什么连接是三次握手：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了&lt;strong&gt;保证服务端能收接受到客户端的信息并能做出正确的应答而进行前两次(第一次和第二次)握手。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了&lt;strong&gt;保证客户端能够接收到服务端的信息并能做出正确的应答而进行后两次(第二次和第三次)握手&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;具体原因见Q1：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关闭时四次挥手：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关闭连接时，&lt;strong&gt;服务端需要回复两次。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;四次挥手之所以结束时需要多一次请求是因为：&lt;strong&gt;客户端单方面无数据发送认为可以结束了，但是服务端不一定没有数据发送。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以服务端要将&lt;strong&gt;确信信息&lt;/strong&gt;和&lt;strong&gt;自身发起断开&lt;/strong&gt;分作两步。&lt;/p&gt;
&lt;p&gt;再来回顾下四次挥手双方发 &lt;code&gt;FIN&lt;/code&gt; 包的过程，就能理解为什么需要四次了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭连接时，客户端向服务端发送 &lt;code&gt;FIN&lt;/code&gt; 时，仅仅&lt;strong&gt;表示客户端不再发送数据了但是还能接收数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;服务器收到客户端的 &lt;code&gt;FIN&lt;/code&gt; 报文时，先回一个 &lt;code&gt;ACK&lt;/code&gt; 应答报文，而&lt;strong&gt;服务端可能还有数据需要处理和发送，等服务端不再发送数据时&lt;/strong&gt;，才发送 &lt;code&gt;FIN&lt;/code&gt; 报文给客户端来表示同意现在关闭连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q3-为什么time_wait状态需要经过2msl&#34;&gt;Q3. &lt;strong&gt;为什么TIME_WAIT状态需要经过2MSL？&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;2MSL是一次&lt;strong&gt;发送和回复的最大时间&lt;/strong&gt; (Maximum Segment Lifetime&lt;strong&gt;报文最大生存时间&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;主要目的是怕最后一个ACK包对方没收到，那么对方在超时后将&lt;strong&gt;重发第三次握手的FIN包&lt;/strong&gt;，主动关闭端接到重发的FIN包后可以再发一个ACK应答包，客户端最后一次发送ACK可能会丢失，如果此时冒然关闭，&lt;strong&gt;会导致服务器没收到ACK，然后一直不断地发Fin。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以需要等2MSL，&lt;strong&gt;如果超过这个时间，都还没有收到服务器的信息，说明已经完成，可以关闭&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MSL&lt;/code&gt; 是 Maximum Segment Lifetime，&lt;strong&gt;报文最大生存时间&lt;/strong&gt;，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。&lt;/p&gt;
&lt;p&gt;因为 TCP 报文基于是 IP 协议的，而 IP 头中有一个 &lt;code&gt;TTL&lt;/code&gt; 字段，是 IP 数据报可以经过的最大路由数，&lt;strong&gt;每经过一个处理他的路由器此值就减 1&lt;/strong&gt;，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。&lt;/p&gt;
&lt;p&gt;MSL 与 TTL 的区别： MSL 的单位是时间，而 TTL 是经过路由跳数。所以 &lt;strong&gt;MSL 应该要大于等于 TTL 消耗为 0 的时间&lt;/strong&gt;，以确保报文已被自然消亡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TTL 的值一般是 64，Linux 将 MSL 设置为 60秒，意味着 Linux 认为数据报文经过 64 个路由器的时间不会超过 30 秒，如果超过了，就认为报文已经消失在网络中了&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;q4-为什么每次建立-tcp-连接时初始化的序列号都要求不一样呢&#34;&gt;Q4. 为什么每次建立 TCP 连接时，初始化的序列号都要求不一样呢？
&lt;/h3&gt;&lt;p&gt;主要原因有两个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为了&lt;strong&gt;防止历史报文被下一个相同四元组的连接接收（主要方面）&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;为了&lt;strong&gt;安全性&lt;/strong&gt;，防止&lt;strong&gt;黑客伪造的相同序列号的 TCP 报文&lt;/strong&gt;被对方接收；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q5-初始序列号-isn-是如何随机产生的&#34;&gt;Q5. 初始序列号 ISN 是如何随机产生的？
&lt;/h3&gt;&lt;p&gt;起始 &lt;code&gt;ISN&lt;/code&gt; 是基于时钟的，每 4 微秒 + 1，转一圈要 4.55 个小时。&lt;/p&gt;
&lt;p&gt;RFC793 提到初始化序列号 ISN 随机生成算法：ISN = M + F(localhost, localport, remotehost, remoteport)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M&lt;/code&gt; 是一个计时器，这个计时器每隔 4 微秒加 1。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F&lt;/code&gt; 是一个 Hash 算法，根据源 IP、目的 IP、源端口、目的端口生成一个随机数值。要保证 Hash 算法不能被外部轻易推算得出，用 MD5 算法是一个比较好的选择。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，随机数是会&lt;strong&gt;基于时钟计时器递增的&lt;/strong&gt;，基本不可能会随机成一样的初始化序列号。&lt;/p&gt;
&lt;h3 id=&#34;q6-既然-ip-层会分片为什么-tcp-层还需要-mss-呢&#34;&gt;Q6. 既然 IP 层会分片，为什么 TCP 层还需要 MSS 呢？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MTU&lt;/code&gt;&lt;/strong&gt;：一个网络包的最大长度，以太网中一般为 &lt;code&gt;1500&lt;/code&gt; 字节；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;MSS&lt;/code&gt;&lt;/strong&gt;：除去 IP 和 TCP 头部之后，一个网络包所能容纳的 TCP 数据的最大长度；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果在 TCP 的整个报文（头部 + 数据）交给 IP 层进行分片，会有什么异常呢？&lt;/p&gt;
&lt;p&gt;当 IP 层有一个超过 &lt;code&gt;MTU&lt;/code&gt; 大小的数据（TCP 头部 + TCP 数据）要发送，那么 IP 层就要进行分片，把数据分片成若干片，保证每一个分片都小于 MTU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;把一份 IP 数据报进行分片以后，由目标主机的 IP 层来进行重新组装后，再交给上一层 TCP 传输层。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这看起来井然有序，但这存在隐患的，&lt;strong&gt;那么当如果一个 IP 分片丢失，整个 IP 报文的所有分片都得重传&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为 IP 层本身没有超时重传机制，它由传输层的 TCP 来负责超时和重传&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，为了达到最佳的传输效能 TCP 协议在&lt;strong&gt;建立连接的时候通常要协商双方的 MSS 值&lt;/strong&gt;，当 TCP 层发现数据超过 MSS 时，则就先会进行分片，当然由它形成的 IP 包的长度也就不会大于 MTU ，自然也就不用 IP 分片了。&lt;/p&gt;
&lt;h3 id=&#34;q7-第一次第二次第三次握手丢失了会发生什么&#34;&gt;Q7. 第一次，第二次，第三次握手丢失了，会发生什么？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一次握手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当客户端想和服务端建立 TCP 连接的时候，首先第一个发的就是 SYN 报文，然后进入到 &lt;code&gt;SYN_SENT&lt;/code&gt; 状态。在这之后，&lt;strong&gt;如果客户端迟迟收不到服务端的 SYN-ACK 报文（第二次握手），就会触发「超时重传」机制，重传 SYN 报文。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不同版本的操作系统可能超时时间不同，有的 1 秒的，也有 3 秒的，&lt;strong&gt;这个超时时间是写死在内核里的，如果想要更改则需要重新编译内核&lt;/strong&gt;，比较麻烦。当客户端在 1 秒后没收到服务端的 SYN-ACK 报文后，客户端就会重发 SYN 报文，那到底重发几次呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在 Linux 里，客户端的 SYN 报文最大重传次数由 &lt;code&gt;tcp_syn_retries&lt;/code&gt;内核参数控制&lt;/strong&gt;，这个参数是可以自定义的，默认值一般是 5。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常，第一次超时重传是在 1 秒后，第二次超时重传是在 2 秒，第三次超时重传是在 4 秒后，第四次超时重传是在 8 秒后，第五次是在超时重传 16 秒后。没错，每次超时的时间是上一次的 2 倍。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当第五次超时重传后，会继续等待 32 秒，如果服务端仍然没有回应 ACK，客户端就不再发送 SYN 包，然后断开 TCP 连接。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以，总耗时是 1+2+4+8+16+32=63 秒，大约 1 分钟左右。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二次握手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;当第二次握手丢失了，客户端和服务端都会重传&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端会重传 SYN 报文，也就是第一次握手，最大重传次数由 &lt;code&gt;tcp_syn_retries&lt;/code&gt;内核参数决定；&lt;/li&gt;
&lt;li&gt;服务端会重传 SYN-ACK 报文，也就是第二次握手，最大重传次数由 &lt;code&gt;tcp_synack_retries&lt;/code&gt; 内核参数决定。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果第二次握手丢失了，服务端就收不到第三次握手，于是&lt;strong&gt;服务端这边会触发超时重传机制，重传 SYN-ACK 报文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在 Linux 下，SYN-ACK 报文的最大重传次数由 &lt;code&gt;tcp_synack_retries&lt;/code&gt;内核参数决定，默认值是 5。&lt;/p&gt;
&lt;p&gt;当服务端收到客户端的第一次握手后，就会回 SYN-ACK 报文给客户端，这个就是第二次握手，此时服务端会进入 &lt;code&gt;SYN_RCVD&lt;/code&gt; 状态。&lt;/p&gt;
&lt;p&gt;第二次握手的 &lt;code&gt;SYN-ACK&lt;/code&gt; 报文其实有两个目的 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第二次握手里的 ACK， 是对第一次握手的确认报文；&lt;/li&gt;
&lt;li&gt;第二次握手里的 SYN，是服务端发起建立 TCP 连接的报文；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以，如果第二次握手丢了，就会发送比较有意思的事情，具体会怎么样呢？&lt;/p&gt;
&lt;p&gt;因为第二次握手报文里是包含对客户端的第一次握手的 ACK 确认报文。&lt;/p&gt;
&lt;p&gt;如果客户端迟迟没有收到第二次握手，&lt;strong&gt;那么客户端就觉得可能自己的 SYN 报文（第一次握手）丢失了，于是客户端就会触发超时重传机制，重传 SYN 报文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然后，因为第二次握手中包含服务端的 SYN 报文，所以当客户端收到后，需要给服务端发送 ACK 确认报文（第三次握手），服务端才会认为该 SYN 报文被客户端收到了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第三次握手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;当第三次握手丢失了，服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文&lt;/strong&gt;，直到收到第三次握手，或者达到最大重传次数。&lt;/p&gt;
&lt;p&gt;客户端收到服务端的 SYN-ACK 报文后，就会给服务端回一个 ACK 报文，也就是第三次握手，此时客户端状态进入到 &lt;code&gt;ESTABLISH&lt;/code&gt; 状态。&lt;/p&gt;
&lt;p&gt;因为这个第三次握手的 ACK 是对第二次握手的 SYN 的确认报文，&lt;strong&gt;所以当第三次握手丢失了，如果服务端那一方迟迟收不到这个确认报文，就会触发超时重传机制，重传 SYN-ACK 报文&lt;/strong&gt;，直到收到第三次握手，或者达到最大重传次数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注意，&lt;strong&gt;ACK 报文是不会有重传的，当 ACK 丢失了，就由对方重传对应的报文&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q8-第一次第二次第三次第四次挥手丢失了都会发生什么&#34;&gt;Q8. 第一次，第二次，第三次，第四次挥手丢失了，都会发生什么？
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;第一次挥手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果第一次挥手丢失了，那么客户端迟迟收不到被动方的 ACK 的话，也就会触发超时重传机制，重传 FIN 报文，重发次数由 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 参数控制。当客户端重传 FIN 报文的次数超过 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 后，就不再发送 FIN 报文，直接进入到 &lt;code&gt;close&lt;/code&gt; 状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当客户端（主动关闭方）调用 close 函数后，就会向服务端发送 FIN 报文，试图与服务端断开连接，此时客户端的连接进入到 &lt;code&gt;FIN_WAIT_1&lt;/code&gt; 状态。正常情况下，如果能及时收到服务端（被动关闭方）的 ACK，则会很快变为 &lt;code&gt;FIN_WAIT2&lt;/code&gt;状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第二次挥手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以如果服务端的第二次挥手丢失了，&lt;strong&gt;客户端就会触发超时重传机制，重传 FIN 报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当服务端收到客户端的第一次挥手后，就会先回一个 ACK 确认报文，此时服务端的连接进入到 &lt;code&gt;CLOSE_WAIT&lt;/code&gt; 状态。在前面我们也提了，ACK 报文是不会重传的。&lt;/p&gt;
&lt;p&gt;这里提一下，当客户端收到第二次挥手，也就是收到服务端发送的 ACK 报文后，客户端就会处于 &lt;code&gt;FIN_WAIT2&lt;/code&gt; 状态，在这个状态需要等服务端发送第三次挥手，也就是服务端的 FIN 报文。&lt;/p&gt;
&lt;p&gt;对于 close 函数关闭的连接，由于&lt;strong&gt;无法再发送和接收数据&lt;/strong&gt;，&lt;strong&gt;所以&lt;code&gt;FIN_WAIT2&lt;/code&gt; 状态不可以持续太久，而 &lt;code&gt;tcp_fin_timeout&lt;/code&gt; 控制了这个状态下连接的持续时长，默认值是 60 秒。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这意味着对于调用 close 关闭的连接，如果在 60 秒后还没有收到 FIN 报文，客户端（主动关闭方）的连接就会直接关闭。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是注意，如果主动关闭方&lt;strong&gt;使用 shutdown 函数关闭连接且指定只关闭发送方向，而接收方向并没有关闭，那么意味着主动关闭方还是可以接收数据的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果主动关闭方一直没收到第三次挥手，那么主动关闭方的连接将会一直处于 &lt;code&gt;FIN_WAIT2&lt;/code&gt; 状态（&lt;code&gt;tcp_fin_timeout&lt;/code&gt; 无法控制 shutdown 关闭的连接）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第三次挥手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果迟迟收不到这个 ACK，服务端就会重发 FIN 报文&lt;/strong&gt;，重发次数仍然由 &lt;strong&gt;&lt;code&gt;tcp_orphan_retries&lt;/code&gt;&lt;/strong&gt; 参数控制，这与客户端重发 FIN 报文的重传次数控制方式是一样的。&lt;/p&gt;
&lt;p&gt;当服务端（被动关闭方）收到客户端（主动关闭方）的 FIN 报文后，内核会自动回复 ACK，同时连接处于 &lt;code&gt;CLOSE_WAIT&lt;/code&gt; 状态，顾名思义，它表示等待应用进程调用 close 函数关闭连接。&lt;/p&gt;
&lt;p&gt;此时，内核是没有权利替代进程关闭连接，必须由&lt;strong&gt;进程主动调用 close 函数来触发服务端发送&lt;/strong&gt; FIN 报文。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务端处于 CLOSE_WAIT 状态时，调用了 close 函数，内核就会发出 FIN 报文，同时连接进入 LAST_ACK 状态，等待客户端返回 ACK 来确认连接关闭&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第四次挥手丢失了，会发生什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果第四次挥手的 ACK 报文没有到达服务端，服务端就会重发 FIN 报文，重发次数仍然由前面介绍过的 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 参数控制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当客户端收到服务端的第三次挥手的 FIN 报文后，就会回 ACK 报文，也就是第四次挥手，此时客户端连接进入 &lt;code&gt;TIME_WAIT&lt;/code&gt; 状态。&lt;/p&gt;
&lt;p&gt;在 Linux 系统，TIME_WAIT 状态会持续 2MSL 后才会进入关闭状态。&lt;/p&gt;
&lt;p&gt;然后，服务端（被动关闭方）&lt;strong&gt;没有收到 ACK 报文前，还是处于 LAST_ACK&lt;/strong&gt; 状态。&lt;/p&gt;
&lt;h3 id=&#34;q9--为什么需要-time_wait-状态&#34;&gt;Q9.  为什么需要 TIME_WAIT 状态？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;避免连接混淆或者连接冲突，防止历史连接中的数据，被后面相同四元组的连接错误的接收&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保证「被动关闭连接」的一方，能被正确的关闭，确保最后的数据包被接收，或处理延迟包&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;TIME_WAIT 过多有什么危害？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;过多的 TIME-WAIT 状态主要的危害有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一是内存资源占用&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二是对端口资源的占用&lt;/strong&gt;，一个 TCP 连接至少消耗「发起连接方」的一个本地端口；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;25-tcp协议如何保证可靠性&#34;&gt;2.5 TCP协议如何保证可靠性
&lt;/h2&gt;&lt;p&gt;TCP 是通过&lt;strong&gt;序列号、确认应答、重发控制、连接管理以及窗口控制&lt;/strong&gt;等机制实现可靠性传输的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）&lt;strong&gt;采用&lt;/strong&gt;三次握手四次挥手&lt;/strong&gt;保证建立的&lt;strong&gt;传输信道是可靠的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）&lt;strong&gt;采用了&lt;/strong&gt;ARQ自动(超时)重传请求&lt;/strong&gt;协议&lt;strong&gt;数据传输的可靠性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（3）&lt;strong&gt;采用&lt;/strong&gt;滑动窗口&lt;/strong&gt;协议进行&lt;strong&gt;流量控制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（4）&lt;strong&gt;使用&lt;/strong&gt;慢开始&lt;/strong&gt;、&lt;strong&gt;拥塞避免&lt;/strong&gt;、&lt;strong&gt;快重传&lt;/strong&gt;和&lt;strong&gt;快恢复&lt;/strong&gt;来进行&lt;strong&gt;拥塞控制&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（5）校验和CRC计算方式&lt;/strong&gt;：在数据传输的过程中，将发送的数据段都当做一个&lt;strong&gt;16位的整数&lt;/strong&gt;。将这些&lt;strong&gt;整数加起来。并且前面的进位不能丢弃，补在后面，最后取反，得到校验和&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;发送方：在发送数据之前计算检验和，并进行校验和的填充。&lt;/p&gt;
&lt;p&gt;接收方：收到数据后，对数据以同样的方式进行计算，求出校验和，与发送方的进行比对。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（6）确认应答与序列号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;序列号：TCP传输时将每个字节的数据都进行了编号。&lt;/p&gt;
&lt;p&gt;确认应答：TCP传输的过程中，每次接收方收到数据后，都会对传输方进行确认应答。也就是发送ACK报文。这个ACK报文当中带有对应的确认序列号，告诉发送方，接收到了哪些数据，下一次的数据从哪里发。&lt;/p&gt;
&lt;h3 id=&#34;自动超时重传机制&#34;&gt;&lt;strong&gt;自动超时重传机制&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;简单理解就是&lt;strong&gt;发送方在发送完数据后等待一个时间，时间到达没有接收到ACK报文，那么对刚才发送的数据进行重新发送&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;由于TCP传输时&lt;strong&gt;保证能够在任何环境下都有一个高性能的通信&lt;/strong&gt;，因此这个&lt;strong&gt;最大超时时间（也就是等待的时间）是动态计算的&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Linux中（BSD Unix和Windows下也是这样）超时以500ms为一个单位进行控制，每次判定超时重发的超时时间都是&lt;strong&gt;500ms的整数倍&lt;/strong&gt;。重发一次后，仍未响应，那么等待2500ms的时间后，再次重传。等待4500ms的时间继续重传。&lt;strong&gt;以一个指数的形式增长&lt;/strong&gt;。&lt;strong&gt;累计到一定的重传次数&lt;/strong&gt;，TCP就认为&lt;strong&gt;网络或者对端出现异常，强制关闭连接。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体步骤如下：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;为了保证数据包的可靠传递，发送方必须把已发送的数据包保留在缓冲区&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;（2）并为每个&lt;strong&gt;已发送的数据包启动一个超时定时器&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;（3）如在&lt;strong&gt;定时器超时之前收到了对方发来的应答信息&lt;/strong&gt;（可能是对本包的应答，也可以是对本包后续包的应答），则&lt;strong&gt;释放该数据包占用的缓冲区;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（4）否则，&lt;strong&gt;重传该数据包，直到收到应答或重传次数超过规定的最大次数为止。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（5）接收方收到数据包后，&lt;strong&gt;先进行CRC校验，如果正确则把数据交给上层协议，然后给发送方发送一个累计应答包，表明该数据已收到&lt;/strong&gt;，&lt;strong&gt;如果接收方正好也有数据要发给发送方，应答包也可方在数据包中捎带过去。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果接收方收到二次重发的数据后，便进行ACK应答。&lt;/p&gt;
&lt;p&gt;如果接收方发现接收的数据已存在（判断存在的根据就是序列号，所以上面说&lt;strong&gt;序列号还有去除重复数据的作用&lt;/strong&gt;），那么&lt;strong&gt;直接丢弃，仍旧发送ACK应答&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;26-tcp协议如何进行流量控制&#34;&gt;2.6 TCP协议如何进行流量控制？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;控制流量的前提当然需要保证正确率可靠性，因此首先要引入ARQ(自动重传请求（Automatic Repeat-reQuest，&lt;em&gt;ARQ&lt;/em&gt;）协议。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP采用&lt;strong&gt;大小可变的滑动窗口&lt;/strong&gt;进行流量控制，&lt;strong&gt;窗口大小的单位是字节&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;数据接收端将&lt;strong&gt;自己可以接受的缓冲区大小放入TCP首部中“窗口大小”字段&lt;/strong&gt;，通过ACK来通知数据传输。（&lt;strong&gt;在TCP的首部，有一个16位窗口字段，此字段就是用来存放窗口大小信息的。）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无差错时，A向B发送&lt;strong&gt;分组&lt;/strong&gt;M1，B收到M1后向A回复，A收到回复后，发送下一个M2…..&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214122158.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果出现差错，B没有收到信息，自然不会回复，&lt;strong&gt;A等待超时后&lt;/strong&gt;，&lt;strong&gt;自动重传&lt;/strong&gt;一个信息M，这就是所谓的ARQ。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但停止等待ARQ协议信道利用率太低。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所以需要使用&lt;strong&gt;连续ARQ协议来进行改善&lt;/strong&gt;。这个协议会&lt;strong&gt;连续发送一组数据包&lt;/strong&gt;，然后&lt;strong&gt;再等待这些数据包的ACK&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214123227.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;连续ARQ协议&lt;/strong&gt;通常是&lt;strong&gt;结合滑动窗口协议&lt;/strong&gt;来使用的，&lt;strong&gt;发送方需要维持一个发送窗口&lt;/strong&gt;，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214123327.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;位于&lt;strong&gt;发送窗口内的5个分组&lt;/strong&gt;都可以连续发送出去，而不需要等待对方的确认，这样就提高了&lt;strong&gt;信道利用率&lt;/strong&gt;。、&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发送方每收到一个确认，就把发送窗口向前滑动一个分组的位置。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接收方一般都是采用累积确认的方式&lt;/strong&gt;。收到几个分组后，对按序到达的&lt;strong&gt;最后一个分组发送确认&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;滑动窗口需掌握的知识点：&lt;/p&gt;
&lt;p&gt;A、数据&lt;strong&gt;接收端将自己可以接受的缓冲区大小放入TCP首部中“窗口大小”字段&lt;/strong&gt;，&lt;strong&gt;通过ACK来通知数据传输端。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;B、&lt;strong&gt;窗口大小字段越大，说明网络的吞吐率越高。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C、窗口大小指的是&lt;strong&gt;无需等待确认应答而可以继续发送数据的最大值&lt;/strong&gt;，即就是说&lt;strong&gt;不需要数据接收端的应答，可以一次连续的发送数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;D、&lt;strong&gt;操作系统内核为了维护滑动窗口，需要开辟发送缓冲区&lt;/strong&gt;，&lt;strong&gt;来记录当前还有哪些数据没有应答&lt;/strong&gt;，&lt;strong&gt;只有确认应答过的数据，才能从缓冲区删除&lt;/strong&gt;。 &lt;strong&gt;(PS：发送缓冲区如果太大，会有空间开销）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;E、数据接收端一旦&lt;strong&gt;发现自己的缓冲区快满了&lt;/strong&gt;，&lt;strong&gt;就会将窗口大小设置成一个更小的值通知给数据传输端，数据传输端收到这个值后，就会减慢自己的发送速度&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;F、如果&lt;strong&gt;数据接收端发现自己的缓冲区满了&lt;/strong&gt;，&lt;strong&gt;就会将窗口大小设置为0&lt;/strong&gt;，此时数据传输端不再传输数据，但是&lt;strong&gt;需要定期发送一个窗口探测数据段&lt;/strong&gt;，将&lt;strong&gt;数据接收端把窗口大小告诉数据传输端&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;TCP 规定是不允许同时减少缓存又收缩窗口的，而是采用先收缩窗口，过段时间再减少缓存，这样就可以避免了丢包情况。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;q1-tcp-是如何解决窗口关闭时潜在的死锁现象呢&#34;&gt;Q1. TCP 是如何解决窗口关闭时，潜在的死锁现象呢？
&lt;/h3&gt;&lt;p&gt;为了解决这个问题，&lt;strong&gt;TCP 为每个连接设有一个持续定时器&lt;/strong&gt;，&lt;strong&gt;只要 TCP 连接一方收到对方的零窗口通知，就启动持续计时器。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果&lt;strong&gt;持续计时器超时，就会发送窗口探测 ( Window probe ) 报文&lt;/strong&gt;，而对方在确认这个探测报文时，给出自己现在的接收窗口大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;窗口探测的次数一般为 3 次，每次大约 30-60 秒&lt;/strong&gt;（不同的实现可能会不一样）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果 3 次过后接收窗口还是 0 的话，有的 TCP 实现就会发 &lt;code&gt;RST&lt;/code&gt; 报文来中断连接。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;27-tcp协议如何进行拥塞控制&#34;&gt;2.7 TCP协议如何进行拥塞控制？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;下载时我们的速度一般都是由慢变快，原因就是拥塞控制。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网络拥塞是指在&lt;strong&gt;分组交换网络中传送分组的数目太多&lt;/strong&gt;时，由于&lt;strong&gt;存储转发节点的资源有限&lt;/strong&gt;而造成&lt;strong&gt;网络传输性能下降&lt;/strong&gt;的情况。&lt;/p&gt;
&lt;p&gt;常见的拥塞控制有：&lt;strong&gt;慢开始，拥塞避免，快重传，快恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;慢开始：不要一开始就发送大量的数据，由小到大逐渐增加拥塞窗口的大小&lt;/strong&gt;, 一次RTT(&lt;em&gt;RTT&lt;/em&gt;(Round-Trip Time)：往返时延)后，也就是&lt;strong&gt;收到一次ACK后拥塞窗口就翻倍&lt;/strong&gt;，也就是指数型增长。&lt;/p&gt;
&lt;p&gt;**拥塞避免：**拥塞避免算法让拥塞窗口缓慢增长，&lt;strong&gt;即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1而不是加倍&lt;/strong&gt;。这样拥塞窗口按线性规律缓慢增长。&lt;/p&gt;
&lt;p&gt;发送方维持一个叫做&lt;strong&gt;拥塞窗口cwnd（congestion window）的状态变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当cwnd到达ssthresh（慢启动阈值）时&lt;/strong&gt;，改用&lt;strong&gt;拥塞避免&lt;/strong&gt;算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拥塞窗口 cwnd&lt;/strong&gt;是&lt;strong&gt;发送方维护的一个的状态变量&lt;/strong&gt;，它会根据&lt;strong&gt;网络的拥塞程度动态变化的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们在前面提到过&lt;strong&gt;发送窗口 &lt;code&gt;swnd&lt;/code&gt; 和接收窗口 &lt;code&gt;rwnd&lt;/code&gt; 是约等于的关系&lt;/strong&gt;，那么由于&lt;strong&gt;加入了拥塞窗口的概念后，此时发送窗口的值是swnd = min(cwnd, rwnd)&lt;/strong&gt;，也就是&lt;strong&gt;拥塞窗口和接收窗口中的最小值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拥塞窗口 &lt;code&gt;cwnd&lt;/code&gt; 变化的规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要网络中&lt;strong&gt;没有出现拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就会增大；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但网络中&lt;strong&gt;出现了拥塞，&lt;code&gt;cwnd&lt;/code&gt; 就减少；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;快重传：&lt;strong&gt;我们可以剔除一些不必要的拥塞报文，提高网络吞吐量。比如接收方在&lt;/strong&gt;收到一个失序的报文段后就立即发出重复确认，而不要等到自己发送数据时捎带确认。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;快重传规定：&lt;strong&gt;发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段&lt;/strong&gt;，&lt;strong&gt;而不必继续等待设置的重传计时器时间到期&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214125708.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;**快恢复：**主要是配合快重传。&lt;strong&gt;当发送方连续收到三个重复确认时，就执行“乘法减小”算法&lt;/strong&gt;，&lt;strong&gt;把ssthresh门限减半&lt;/strong&gt;（&lt;strong&gt;为了预防网络发生拥塞&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;但&lt;strong&gt;接下来并不执行慢开始算法&lt;/strong&gt;，因&lt;strong&gt;为如果网络出现拥塞的话就不会收到好几个重复的确认&lt;/strong&gt;，&lt;strong&gt;收到三个重复确认说明网络状况还可以&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214130136.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;快速重传机制&lt;strong&gt;只解决了一个问题，就是超时时间&lt;/strong&gt;的问题，但是它依然面临着另外一个问题。&lt;/p&gt;
&lt;p&gt;就是&lt;strong&gt;重传的时候，是重传之前的一个，还是重传所有的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如对于上面的例子，是重传 Seq2 呢？还是重传 Seq2、Seq3、Seq4、Seq5 呢？因为发送端并不清楚这连续的三个 Ack 2 是谁传回来的。&lt;/p&gt;
&lt;p&gt;根据 TCP 不同的实现，以上两种情况都是有可能的。可见，这是一把双刃剑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了解决不知道该重传哪些 TCP 报文，于是就有 &lt;code&gt;SACK&lt;/code&gt; 方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;sack-方法&#34;&gt;SACK 方法
&lt;/h3&gt;&lt;p&gt;一种实现重传机制的方式叫：&lt;code&gt;SACK&lt;/code&gt;（ Selective Acknowledgment 选择性确认）。&lt;/p&gt;
&lt;p&gt;这种方式需要&lt;strong&gt;在 TCP 头部「选项」字段里加一个 &lt;code&gt;SACK&lt;/code&gt; 的东西&lt;/strong&gt;，它可以&lt;strong&gt;将缓存的地图发送给发送方&lt;/strong&gt;，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以&lt;strong&gt;只重传丢失的数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如某图例子(发送方收到了三次同样的 ACK 确认报文，于是就会触发快速重发机制，&lt;strong&gt;通过 &lt;code&gt;SACK&lt;/code&gt; 信息发现只有 &lt;code&gt;200~299&lt;/code&gt; 这段数据丢失&lt;/strong&gt;，则重发时，就只选择了这个 TCP 段进行重复。&lt;/p&gt;
&lt;h2 id=&#34;28-socket编程tcp&#34;&gt;2.8 Socket编程TCP
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务端和客户端初始化 &lt;code&gt;socket&lt;/code&gt;&lt;/strong&gt;，得到文件描述符；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端调用 &lt;code&gt;bind&lt;/code&gt;()，将文件描述符绑定在 IP 地址和端口;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务端&lt;strong&gt;调用 &lt;code&gt;listen&lt;/code&gt;，进行监听&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端调用 &lt;code&gt;accept&lt;/code&gt;，等待客户端连接；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端调用 &lt;code&gt;connect&lt;/code&gt;，向服务器端的地址和端口发起连接请求；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;服务端 &lt;code&gt;accept&lt;/code&gt; &lt;strong&gt;返回用于传输的 &lt;code&gt;socket&lt;/code&gt; 的文件描述符；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;客户端&lt;strong&gt;调用 &lt;code&gt;write&lt;/code&gt; 写入数据；服务端调用 &lt;code&gt;read&lt;/code&gt; 读取数据&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;客户端断开连接时，会调用 &lt;code&gt;close&lt;/code&gt;，那么&lt;strong&gt;服务端 &lt;code&gt;read&lt;/code&gt; 读取数据的时候，就会读取到了 &lt;code&gt;EOF&lt;/code&gt;&lt;/strong&gt;，待处理完数据后，服务端调用 &lt;code&gt;close&lt;/code&gt;，表示连接关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux内核中会维护两个队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;半连接队列（SYN 队列）：接收到&lt;strong&gt;一个 SYN 建立连接请求，处于 SYN_RCVD 状态&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;全连接队列（Accpet 队列）：&lt;strong&gt;已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面的描述过程，我们可以得知&lt;strong&gt;客户端 connect 成功返回是在第二次握手，服务端 accept 成功返回是在三次握手成功之后。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;客户端调用 close 了，连接是断开的流程是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们看看客户端主动调用了 &lt;code&gt;close&lt;/code&gt;，会发生什么？&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL3hpYW9saW5jb2Rlci9JbWFnZUhvc3QyLyVFOCVBRSVBMSVFNyVBRSU5NyVFNiU5QyVCQSVFNyVCRCU5MSVFNyVCQiU5Qy9UQ1AtJUU0JUI4JTg5JUU2JUFDJUExJUU2JThGJUExJUU2JTg5JThCJUU1JTkyJThDJUU1JTlCJTlCJUU2JUFDJUExJUU2JThDJUE1JUU2JTg5JThCLzM3LmpwZw?x-oss-process=image/format,png&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;客户端调用 close 过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端调用 &lt;code&gt;close&lt;/code&gt;，表明客户端没有数据需要发送了，则此时会向服务端发送 FIN 报文，进入 FIN_WAIT_1 状态；&lt;/li&gt;
&lt;li&gt;服务端接收到了 FIN 报文，TCP 协议栈会为 FIN 包&lt;strong&gt;插入一个文件结束符 &lt;code&gt;EOF&lt;/code&gt; 到接收缓冲区中，应用程序可以通过 &lt;code&gt;read&lt;/code&gt; 调用来感知这个 FIN 包&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;这个 &lt;code&gt;EOF&lt;/code&gt; 会被&lt;strong&gt;放在已排队等候的其他已接收的数据之后&lt;/strong&gt;，这就意味着&lt;strong&gt;服务端需要处理这种异常情况&lt;/strong&gt;，&lt;strong&gt;因为 EOF 表示在该连接上再无额外数据到达。此时，服务端进入 CLOSE_WAIT 状态&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;接着，当处理完数据后，自然就会读到 &lt;code&gt;EOF&lt;/code&gt;，于是也调用 &lt;code&gt;close&lt;/code&gt; 关闭它的套接字，这会使得服务端发出一个 FIN 包，之后处于 LAST_ACK 状态；&lt;/li&gt;
&lt;li&gt;客户端接收到服务端的 FIN 包，并发送 ACK 确认包给服务端，此时客户端将进入 TIME_WAIT 状态；&lt;/li&gt;
&lt;li&gt;服务端收到 ACK 确认包后，就进入了最后的 CLOSE 状态；&lt;/li&gt;
&lt;li&gt;客户端经过 &lt;code&gt;2MSL&lt;/code&gt; 时间之后，也进入 CLOSE 状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;29-增大-tcp-半连接队列和全连接队列的方式&#34;&gt;2.9 增大 TCP 半连接队列和全连接队列的方式
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增大 TCP 半连接队列的方式是增大 &lt;strong&gt;/proc/sys/net/ipv4/tcp_max_syn_backlog；&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;增大 TCP 全连接队列的方式是增大 &lt;strong&gt;listen() 函数中的 backlog；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux系统中，则使用两个队列syn queue, accept queue分别存储状态为SYN_REVD和ESTABLISHED的连接，并且在linux2.2及以后，backlog表示accept queue的大小，而syn queue大小由 &lt;code&gt;/proc/sys/net/ipv4/tcp_max_syn_backlog&lt;/code&gt;配置。&lt;/p&gt;
&lt;h2 id=&#34;内核参数somaxconn&#34;&gt;&lt;strong&gt;内核参数somaxconn&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;全称：socket max connections 位置：&lt;code&gt;/proc/sys/net/core/somaxconn&lt;/code&gt; 这是系统层面对于backlog的控制，实际上accept queue的大小 = min(somaxconn, backlog)。&lt;/p&gt;
&lt;p&gt;因此在listen这个系统调用层面，backlog最终还是受限于somaxconn。&lt;/p&gt;
&lt;h2 id=&#34;查看队列&#34;&gt;&lt;strong&gt;查看队列&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;`ss -l&lt;/p&gt;
&lt;p&gt;Netid   State    Recv-Q   Send-Q                                      Local Address:Port                     Peer Address:Port
tcp     LISTEN   0        128                                                  [::]:ssh                              [::]:*`&lt;/p&gt;
&lt;p&gt;在LISTEN状态下 Recv-Q 表示当前accept queue中的已连接数。Send-Q 表示总大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;210-如何优化-tcp&#34;&gt;2.10 如何优化 TCP
&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;你可以根据网络的稳定性和目标服务器的繁忙程度修改 **SYN 的重传次数**，**调整客户端的三次握手时间上限**。TCP 三次握手的性能提升；TCP 四次挥手的性能提升；TCP 数据传输的性能提升；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;q1-三次握手优化&#34;&gt;Q1: &lt;strong&gt;三次握手优化&lt;/strong&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;客户端的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当客户端发起 SYN 包时，可以通过 &lt;code&gt;tcp_syn_retries&lt;/code&gt; 控制其重传的次数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务端的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当服务端 SYN 半连接队列溢出后，会导致后续连接被丢弃，可以通过 &lt;code&gt;netstat -s&lt;/code&gt; 观察半连接队列溢出的情况。&lt;/p&gt;
&lt;p&gt;如果 SYN 半连接队列溢出情况比较严重，可以通过 &lt;code&gt;tcp_max_syn_backlog、somaxconn、backlog&lt;/code&gt; 参数来调整 SYN 半连接队列的大小。&lt;/p&gt;
&lt;p&gt;服务端回复 SYN+ACK 的重传次数由 &lt;code&gt;tcp_synack_retries&lt;/code&gt; 参数控制。&lt;/p&gt;
&lt;p&gt;如果遭受 SYN 攻击，应把 &lt;code&gt;tcp_syncookies&lt;/code&gt; 参数设置为 1，表示仅在 SYN 队列满后开启 syncookie 功能，可以保证正常的连接成功建立。&lt;/p&gt;
&lt;p&gt;服务端收到客户端返回的 ACK，会把连接移入 accpet 队列，等待进行调用 accpet() 函数取出连接。&lt;/p&gt;
&lt;p&gt;可以通过 &lt;code&gt;ss -lnt&lt;/code&gt; 查看服务端进程的 accept 队列长度&lt;/p&gt;
&lt;p&gt;如果 &lt;strong&gt;accept 队列溢出，系统默认丢弃 ACK&lt;/strong&gt;，如果可以把 &lt;code&gt;tcp_abort_on_overflow&lt;/code&gt; 设置为 1 ，表示用 RST 通知客户端连接建立失败。&lt;/p&gt;
&lt;p&gt;如果 accpet 队列溢出严重，可以通过 listen 函数的 &lt;code&gt;backlog&lt;/code&gt; 参数和 &lt;code&gt;somaxconn&lt;/code&gt; 系统参数提高队列大小，accept 队列长度取决于 min(backlog, somaxconn)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;绕过三次握手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP Fast Open 功能可以绕过三次握手，使得 HTTP 请求减少了 1 个 RTT 的时间，Linux 下可以通过 &lt;code&gt;tcp_fastopen&lt;/code&gt; 开启该功能，同时必须保证服务端和客户端同时支持。&lt;/p&gt;
&lt;h3 id=&#34;q2-tcp-四次挥手的性能提升&#34;&gt;Q2: &lt;strong&gt;TCP 四次挥手的性能提升&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;针对 TCP 四次挥手的优化，我们需要根据主动方和被动方四次挥手状态变化来调整系统 TCP 内核参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%82%E6%95%B0/39.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;四次挥手的优化策略&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;主动方的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;主动发起 FIN 报文断开连接的一方，如果迟迟没收到对方的 ACK 回复，则会重传 FIN 报文，重传的次数由 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 参数决定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当主动方收到 ACK 报文后，连接就进入 FIN_WAIT2 状态，根据关闭的方式不同，优化的方式也不同：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;如果这是 close 函数关闭的连接，那么它就是孤儿连接。如果 &lt;code&gt;tcp_fin_timeout&lt;/code&gt; 秒内没有收到对方的 FIN 报文，连接就直接关闭。同时，为了应对孤儿连接占用太多的资源，&lt;code&gt;tcp_max_orphans&lt;/code&gt; 定义了最大孤儿连接的数量，超过时连接就会直接释放。&lt;/li&gt;
&lt;li&gt;反之是 shutdown 函数关闭的连接，则不受此参数限制；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当主动方接收到 FIN 报文，并返回 ACK 后，主动方的连接进入 TIME_WAIT 状态。这一状态会持续 1 分钟，为了防止 TIME_WAIT 状态占用太多的资源，&lt;code&gt;tcp_max_tw_buckets&lt;/code&gt; 定义了最大数量，超过时连接也会直接释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当 TIME_WAIT 状态过多时，还可以通过设置 &lt;code&gt;tcp_tw_reuse&lt;/code&gt; 和 &lt;code&gt;tcp_timestamps&lt;/code&gt; 为 1 ，将 TIME_WAIT 状态的端口复用于作为客户端的新连接，注意该参数只适用于客户端。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;被动方的优化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;被动关闭的连接方应对非常简单，它在回复 ACK 后就进入了 CLOSE_WAIT 状态，等待进程调用 close 函数关闭连接。因此，出现大量 CLOSE_WAIT 状态的连接时，应当从应用程序中找问题。&lt;/p&gt;
&lt;p&gt;当被动方发送 FIN 报文后，连接就进入 LAST_ACK 状态，在未等到 ACK 时，会在 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 参数的控制下重发 FIN 报文。&lt;/p&gt;
&lt;h3 id=&#34;q3-tcp-数据传输的性能提升&#34;&gt;Q3: TCP 数据传输的性能提升
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP-%E5%8F%82%E6%95%B0/49.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;211-如何解决粘包&#34;&gt;2.11 如何解决粘包？
&lt;/h2&gt;&lt;p&gt;（1）&lt;strong&gt;发送方引起的粘包是由TCP协议本身造成的&lt;/strong&gt;，TCP为提高传输效率，&lt;strong&gt;发送方往往要收集到足够多的数据后才发送一包数据&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;若连续几次发送的数据都很少，&lt;strong&gt;通常TCP会根据优化算法把这些数据合成一包后一次发送出去&lt;/strong&gt;，这样接收方就收到了粘包数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UDP不存在粘包问题, 是由于UDP发送的时候, 没有经过Negal算法优化, 不会将多个小包合并一次发送出去&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;另外，&lt;strong&gt;在UDP协议的接收端,采用了链式结构来记录每一个到达的UDP包，这样接收端应用程序一次recv只能从socket接收缓冲区中读出一个数据包&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;也就是说,发送端send了几次，接收端必须recv几次(无论recv时指定了多大的缓冲区)&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;接收方引起的粘包是由于接收方用户进程不及时接收数据，从而导致粘包现象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是因为接收方先把收到的数据放在系统接收缓冲区，用户进程从该缓冲区取数据，若下一包数据到达时前一包数据尚未被用户进程取走&lt;/strong&gt;，则下一包数据放到系统接收缓冲区时就接到前一包数据之后，而&lt;strong&gt;用户进程根据预先设定的缓冲区大小从系统接收缓冲区取数据，这样就一次取到了多包数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;粘包的问题出现是&lt;strong&gt;因为不知道一个用户消息的边界在哪，如果知道了边界在哪，接收方就可以通过边界来划分出有效的用户消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一般有三种方式分包的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定长度的消息；&lt;/li&gt;
&lt;li&gt;特殊字符作为边界；&lt;/li&gt;
&lt;li&gt;自定义消息结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;固定长度的消息固定长度的消息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种是最简单方法，即每个用户消息都是固定长度的，比如规定一个消息的长度是 64 个字节，当接收方接满 64 个字节，就认为这个内容是一个完整且有效的消息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是这种方式灵活性不高，实际中很少用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特殊字符作为边界&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以在两个用户消息之间插入一个特殊的字符串，这样接收方在接收数据时，读到了这个特殊字符，就把认为已经读完一个完整的消息。&lt;/p&gt;
&lt;p&gt;HTTP 是一个非常好的例子。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/a49a6bb8cd38ae1738d9c00aec68b444.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP 通过设置回车符、换行符作为 HTTP 报文协议的边界。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有一点要注意，这个作为边界点的特殊字符，如果&lt;strong&gt;刚好消息内容里有这个特殊字符，我们要对这个字符转义&lt;/strong&gt;，&lt;strong&gt;避免被接收方当作消息的边界点而解析到无效的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自定义消息结构&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以&lt;strong&gt;自定义一个消息结构，由包头和数据组成&lt;/strong&gt;，其中包头包是固定大小的，而且&lt;strong&gt;包头里有一个字段来说明紧随其后的数据有多大&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如这个消息结构体，首先 &lt;strong&gt;4 个字节大小的变量来表示数据长度&lt;/strong&gt;，真正的数据则在后面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;u_int32_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当接收方接收到包头的大小（比如 4 个字节）后，就解析包头的内容，于是就可以知道数据的长度，然后接下来就继续读取数据，直到读满数据的长度，就可以组装成一个完整到用户消息来处理了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;212-syn-报文什么时候情况下会被丢弃&#34;&gt;2.12 SYN 报文什么时候情况下会被丢弃？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;开启 tcp_tw_recycle 参数，并且在 NAT 环境下，造成 SYN 报文被丢弃，由于 NAT 环境中的客户端可能有不同的时间戳时钟和值，&lt;strong&gt;tcp_tw_recycle&lt;/strong&gt; 在这种环境中可能会导致合法的 SYN 报文被误丢弃。因此，如果你的服务器有 NAT 后面的客户端连接，通常建议不要启用 &lt;strong&gt;tcp_tw_recycle&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TCP 两个队列满了（半连接队列和全连接队列）&lt;/strong&gt;，造成 SYN 报文被丢弃&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://xiaolincoding.com/network/3_tcp/syn_drop.html#%E5%9D%91%E7%88%B9%E7%9A%84-tcp-tw-recycle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;4.8 SYN 报文什么时候情况下会被丢弃？ | 小林coding (xiaolincoding.com)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Linux 操作系统下，&lt;strong&gt;TIME_WAIT 状态的持续时间是 60 秒&lt;/strong&gt;，这意味着这 60 秒内，客户端一直会占用着这个端口。要知道，端口资源也是有限的，一般可以开启的端口为 32768~61000 ，也可以通过如下参数设置指定范围：&lt;/p&gt;
&lt;p&gt;不过，Linux 操作系统提供了两个可以系统参数来快速回收处于 TIME_WAIT 状态的连接，这两个参数都是默认关闭的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;net.ipv4.tcp_tw_reuse，如果开启该选项的话，客户端（连接发起方） 在调用 connect() 函数时，&lt;strong&gt;内核会随机找一个 time_wait 状态超过 1 秒的连接给新的连接复用&lt;/strong&gt;，所以该选项只适用于连接发起方。&lt;/li&gt;
&lt;li&gt;net.ipv4.tcp_tw_recycle，如果开启该选项的话，允许处于 TIME_WAIT 状态的连接被快速回收；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要使得这两个选项生效，有一个前提条件，就是要打开 &lt;strong&gt;TCP 时间戳&lt;/strong&gt;，即&lt;strong&gt;net.ipv4.tcp_timestamps=1&lt;/strong&gt;（默认即为 1）。&lt;/p&gt;
&lt;p&gt;但是，&lt;strong&gt;tcp_tw_recycle 在使用了 NAT 的网络下是不安全的！&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-dns协议和arp协议&#34;&gt;3. DNS协议和ARP协议
&lt;/h1&gt;&lt;p&gt;这两个协议都是用于&lt;strong&gt;地址间的转化&lt;/strong&gt;，起到了“翻译官”的职责。&lt;/p&gt;
&lt;h2 id=&#34;31-dns解析过程是什么&#34;&gt;3.1 DNS解析过程是什么？
&lt;/h2&gt;&lt;p&gt;DNS (Domain Name System) 是 &lt;strong&gt;域名系统&lt;/strong&gt; 的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统。&lt;/p&gt;
&lt;p&gt;它用于 TCP/IP 网络，它从事将&lt;strong&gt;主机名或域名转换为实际 IP 地址&lt;/strong&gt;的工作，类似于&lt;strong&gt;翻译官&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;DNS查询时优先考虑&lt;strong&gt;本地的Host文件&lt;/strong&gt;和&lt;strong&gt;本地的DNS解析器&lt;/strong&gt;是否保留有&lt;strong&gt;缓存映射&lt;/strong&gt;，如果没有就&lt;strong&gt;向上一级请求&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;依次按照&lt;strong&gt;DNS根服务器，DNS顶层服务器，DNS管理方服务器&lt;/strong&gt;的顺序请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200120162326.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;所谓&lt;strong&gt;递归查询就是变更查询者，迭代查询则没有变更。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;32-什么是mac地址&#34;&gt;3.2 什么是MAC地址？
&lt;/h2&gt;&lt;p&gt;MAC地址是数据链路层和物理层&lt;strong&gt;使用的地址（硬件地址）&lt;/strong&gt;，IP地址网络层和以上各层使用的地址，是一种&lt;strong&gt;逻辑地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在发送数据时，数据从高层到低层，然后才到通信链路上传输。&lt;strong&gt;使用IP地址的IP数据报一旦交给了数据链路层，就被封装成了MAC帧&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAC帧在传送时使用的源地址和目的地址都是硬件地址。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200216103838.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有了IP，为啥还需要MAC地址？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事实上，&lt;strong&gt;IP协议的产生并不只是为解决上述的“广播问题”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;还解决了很多其他网络传输过程会遇到的问题，&lt;strong&gt;比如一次传输的消息过大时，如何对消息进行分组等问题&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;由于历史原因，MAC 地址及相关技术先出现，但是后来发现它并不能解决所有（已知）的问题，所以，先驱们发明了 IP 地址及相关技术来解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另一个角度，个人认为，&lt;strong&gt;由于 MAC 地址没有办法表达网络中的子网的概念，而 IP 地址可以&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果网络互换设备（比如路由器）能从目标 MAC 地址中分析出目标网络，而不是只是目标主机，IP 地址还会出现吗？&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有另一个有趣的问题：**如果历史反过来，**一开始就使用的是 IP 地址，而不是 MAC 地址，我们现在的网络世界会怎么样？&lt;/p&gt;
&lt;h2 id=&#34;33-arp协议工作机制是什么&#34;&gt;3.3 ARP协议工作机制是什么？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;ARP（Address Resolution Protocol）即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标IP对应的MAC地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在每台安装有TCP/IP协议的&lt;strong&gt;电脑或路由器&lt;/strong&gt;里都有一个&lt;strong&gt;ARP缓存表&lt;/strong&gt;，&lt;strong&gt;表里的IP地址与MAC地址是一对应的&lt;/strong&gt;，如下表所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200216104026.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;解析MAC地址时，主机A&lt;strong&gt;首先在其ARP高速缓存中&lt;/strong&gt;查找有无主机B的IP地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果没有就就向本地网段发起一个ARP请求的广播包&lt;/strong&gt;，&lt;strong&gt;查询此目的主机对应的MAC地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;网络中所有的主机收到这个&lt;strong&gt;ARP请求&lt;/strong&gt;后，会检查数据包中的目的IP是否和自己的IP地址一致。&lt;/p&gt;
&lt;p&gt;如果相同，该主机首先&lt;strong&gt;将发送端的MAC地址和IP地址添加到自己的ARP列表中&lt;/strong&gt;，如果ARP表中已经存在该IP的信息，&lt;strong&gt;则将其覆盖&lt;/strong&gt;，然后给源主机发送一个&lt;strong&gt;ARP响应数据包&lt;/strong&gt;，&lt;strong&gt;告诉对方自己是它需要查找的MAC地址&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;源主机收到后&lt;strong&gt;在其ARP高速缓存中写入主机B的IP地址到硬件地址的映射&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;并且采用LRU机制，及时淘汰。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200216104350.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看 ARP 缓存内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Linux 系统中，&lt;strong&gt;我们可以使用 &lt;code&gt;arp -a&lt;/code&gt; 命令来查看 ARP 缓存的内容。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-http协议&#34;&gt;4. HTTP协议
&lt;/h1&gt;&lt;h2 id=&#34;41-http常见的请求方法和状态码&#34;&gt;4.1 HTTP常见的请求方法和状态码
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OPTIONS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回服务器针对特定资源&lt;strong&gt;所支持的HTTP请求方法&lt;/strong&gt;，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HEAD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向服务器索与GET请求相一致的响应，&lt;strong&gt;只不过响应体将不会被返回&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这一方法可以&lt;strong&gt;再不必传输整个响应内容的情况&lt;/strong&gt;下，就可以获取包&lt;strong&gt;含在响应小消息头中的元信息&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向特定的资源发出请求&lt;/strong&gt;。注意：&lt;strong&gt;GET方法不应当被用于产生“副作用”的操作中&lt;/strong&gt;，例如在Web Application中，其中一个原因是GET可能会被网络蜘蛛等随意访问。Loadrunner中对应get请求函数：web_link和web_url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;向指定资源提交数据进行处理请求&lt;/strong&gt;（例如提交表单或者上传文件）。&lt;/p&gt;
&lt;p&gt;数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 Loadrunner中对应POST请求函数：web_submit_data,web_submit_form&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向指定资源位置&lt;strong&gt;上传其最新内容&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;请求服务器&lt;strong&gt;删除Request-URL所标识的资源&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TRACE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回显服务器收到的请求&lt;/strong&gt;，主要用于&lt;strong&gt;测试或诊断&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CONNECT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1）方法名称是&lt;strong&gt;区分大小写&lt;/strong&gt;的，当某个请求所针对的资源&lt;strong&gt;不支持对应的请求方法的时候，服务器应当返回状态码405&lt;/strong&gt;（Mothod Not Allowed）；&lt;/p&gt;
&lt;p&gt;当服务器&lt;strong&gt;不认识或者不支持对应的请求方法时，应返回状态码501&lt;/strong&gt;（Not Implemented）。&lt;/p&gt;
&lt;p&gt;2）HTTP服务器&lt;strong&gt;至少应该实现GET和HEAD/POST方法&lt;/strong&gt;，其他方法都是可选的，此外除上述方法，特定的HTTP服务器支持扩展自定义的方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://uk-1259555870.cos.eu-frankfurt.myqcloud.com/20200214133230.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;100 客户端必须继续发出请求  101 客户端要求服务器根据请求转换HTTP协议版本&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;200 交易成功 201 提示知道新文件的URL 202 接受和处理、但处理未完成&lt;/p&gt;
&lt;p&gt;203 返回信息不确定或不完整 204 请求收到，但返回信息为空&lt;/p&gt;
&lt;p&gt;205 服务器完成了请求，用户代理必须复位当前已经浏览过的文件 206 服务器已经完成了部分用户的GET请求&lt;/p&gt;
&lt;p&gt;300 请求的资源可在多处得到 301 永久重定向，在Location响应首部的值仍为当前URL(隐式重定向) 302 临时重定向，在Location响应首部的值仍为新的URL(显示重定向)&lt;/p&gt;
&lt;p&gt;303 建议客户端访问其他URL或访问方式 304 Not Modified 请求的资源没有改变 可以继续使用缓存 305 请求的资源必须从服务器指定的地址得到&lt;/p&gt;
&lt;p&gt;306 前一版本HTTP中使用的代码，现行版本中不再使用 307 声明请求的资源临时性删除&lt;/p&gt;
&lt;p&gt;400 错误请求，如语法错误 401 未授权402 保留有效ChargeTo头响应 403 禁止访问&lt;/p&gt;
&lt;p&gt;404 没有发现文件、查询或URL 405 用户在Request-Line字段定义的方法不允许&lt;/p&gt;
&lt;p&gt;406 根据用户发送的Accept拖，请求资源不可访问 407 类似401，用户必须首先在代理服务器上得到授权&lt;/p&gt;
&lt;p&gt;500 - 内部服务器错误 HTTP 500.100 - 内部服务器错误 HTTP 500-11 服务器关闭 HTTP&lt;/p&gt;
&lt;p&gt;500-12 应用程序重新启动 HTTP 500-13 - 服务器太忙 HTTP 500-14 - 应用程序无效 HTTP 500-15 - 不允许请求&lt;/p&gt;
&lt;p&gt;501 - 未实现   502 - 网关错误   503 - 服务不可用   504 - 网关超时。&lt;/p&gt;
&lt;h2 id=&#34;42-http协议和其他协议之间的关系&#34;&gt;4.2 HTTP协议和其他协议之间的关系
&lt;/h2&gt;&lt;p&gt;HTTP(超文本传输协议)是利用&lt;strong&gt;TCP在两台电脑(通常是Web服务器和客户端)之间传输信息&lt;/strong&gt;的协议。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果把TCP比作是高速路，HTTP就是卡车&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Socket是对TCP/IP协议的封装&lt;/strong&gt;，Socket本身并不是协议，而是一个&lt;strong&gt;调用接口（API Application Programming Interface,应用程序编程接口）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过Socket，我们能方便地使用TCP/IP协议。&lt;/p&gt;
&lt;h2 id=&#34;43-http长连接和短连接&#34;&gt;4.3 HTTP长连接和短连接
&lt;/h2&gt;&lt;p&gt;短连接：客户端和服务器&lt;strong&gt;每进行一次HTTP操作&lt;/strong&gt;，&lt;strong&gt;就建立一次连接，任务结束就中断连接&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;长连接：客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。&lt;strong&gt;有一个保持时间，&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过Keep-Alive头字段, 服务器配置Nginx, 应用程序代码设置&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;44-http和https安全性端口证书url明密&#34;&gt;4.4 HTTP和HTTPS（安全性，端口，证书，URL，明密)
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTP 是超文本传输协议，信息是明文传输&lt;/strong&gt;，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层&lt;strong&gt;之间加入了 SSL/TLS 安全协议，使得报文能够加密传输&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 连接建立相对简单无状态的， TCP 三次握手之后便可进行 HTTP 的报文传输。&lt;/p&gt;
&lt;p&gt;而 HTTPS 在 TCP 三次握手之后，&lt;strong&gt;还需进行 SSL/TLS 的握手过程&lt;/strong&gt;，才可进入加密报文传输。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP 的&lt;strong&gt;端口号是 80，HTTPS 的端口号是 443。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;HTTPS 协议需要向 CA（证书权威机构）申请数字证书&lt;/strong&gt;，来保证服务器的身份是可信的，一般免费证书较少，因而需要一定费用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTTP：&lt;strong&gt;运行在TCP之上，明文传输&lt;/strong&gt;，客户端与服务器端都&lt;strong&gt;无法验证对方的身份。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTPS：&lt;strong&gt;Https是身披SSL&lt;/strong&gt;(Secure Socket Layer)外壳的Http，&lt;strong&gt;运行于SSL上&lt;/strong&gt;，&lt;strong&gt;SSL运行于TCP之上，是添加了加密和认证机制的HTTP。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;HTTPS 是先进行 TCP 三次握手，再进行 TLS v1.2四次握手&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;ps: 这句话一点问题都没有，怀疑这句话是错的人，才有问题。&lt;/p&gt;
&lt;p&gt;「&lt;strong&gt;HTTPS 中的 TLS 握手过程可以同时进行三次握手&lt;/strong&gt;」&lt;/p&gt;
&lt;p&gt;这个场景是可能存在到，但是在没有说任何前提条件，&lt;strong&gt;而说这句话就等于耍流氓。需要下面这两个条件同时满足才可以&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户端和服务端都开启了 TCP Fast Open 功能，且 TLS 版本是 1.3；&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端和服务端已经完成过一次通信；&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;441-https-是如何建立连接的其间交互了什么&#34;&gt;4.4.1 HTTPS 是如何建立连接的？其间交互了什么？
&lt;/h3&gt;&lt;p&gt;HTTPS 在HTTP的基础上加入了SSL/TLS协议，SSL/TLS依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。&lt;/p&gt;
&lt;p&gt;SSL/TLS 协议基本流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端向服务器索要并验证服务器的公钥。&lt;/li&gt;
&lt;li&gt;双方协商生产「会话秘钥」。&lt;/li&gt;
&lt;li&gt;双方采用「会话秘钥」进行加密通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://img-blog.csdn.net/20180920154005922?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1NjQyMDM2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;HTTPS的缺点，虽然说HTTPS有很大的优势，但其相对来说，还是存在不足之处的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（耗电，效率，证钱，IP，范围)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）HTTPS协议&lt;strong&gt;握手阶段比较费时&lt;/strong&gt;，会使页面的加载&lt;strong&gt;时间延长近50%，增加10%到20%的耗电&lt;/strong&gt;；&lt;/p&gt;
&lt;p&gt;（2）HTTPS连接&lt;strong&gt;缓存不如HTTP高效&lt;/strong&gt;，会增加&lt;strong&gt;数据开销和功耗&lt;/strong&gt;，甚至已有的安全措施也会因此而受到影响；&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;SSL证书需要钱&lt;/strong&gt;，&lt;strong&gt;功能越强大的证书费用越高&lt;/strong&gt;，个人网站、小网站没有必要一般不会用。&lt;/p&gt;
&lt;p&gt;（4）&lt;strong&gt;SSL证书通常需要绑定IP&lt;/strong&gt;，&lt;strong&gt;不能在同一IP上绑定多个域名&lt;/strong&gt;，IPv4资源不可能支撑这个消耗。&lt;/p&gt;
&lt;p&gt;（5）HTTPS协议的&lt;strong&gt;加密范围也比较有限&lt;/strong&gt;，在黑客攻击、&lt;strong&gt;拒绝服务攻击、服务器劫持&lt;/strong&gt;等方面几乎起不到什么作用。&lt;/p&gt;
&lt;p&gt;最关键的，&lt;strong&gt;SSL证书的信用链体系并不安全&lt;/strong&gt;，特别是在&lt;strong&gt;某些国家可以控制CA根证书的情况&lt;/strong&gt;下，中间人攻击一样可行。&lt;/p&gt;
&lt;h2 id=&#34;45-get和post的区别&#34;&gt;4.5 GET和POST的区别
&lt;/h2&gt;&lt;p&gt;GET和POST本质上就是TCP链接，并无差别。但是由于&lt;strong&gt;HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GET在浏览器&lt;strong&gt;回退或者刷新时时无害的&lt;/strong&gt;，而POST会再次提交请求，因为GET请求&lt;strong&gt;是安全幂等&lt;/strong&gt;的，而POST不是&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET&lt;strong&gt;参数通过URL传递&lt;/strong&gt;，&lt;strong&gt;POST放在Request body中&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET请求在URL中&lt;strong&gt;传送的参数是有长度限制的；&lt;strong&gt;而POST没有，因为大多数浏览器通常都会&lt;/strong&gt;限制url长度在2K个字节&lt;/strong&gt;，而大多数服务器&lt;strong&gt;最多处理64K大小的url&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET请求只能进行&lt;strong&gt;url编码&lt;/strong&gt;，而POST&lt;strong&gt;支持多种编码方式，form， json， xml&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对&lt;strong&gt;参数的数据类型，GET只接受ASCII字符&lt;/strong&gt;，&lt;strong&gt;而POST没有限制&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET比POST更不安全，&lt;strong&gt;因为参数直接暴露在URL上，所以不能用来传递敏感信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET请&lt;strong&gt;求参数会被完整保留在浏览器历史记录里，可被收藏为书签&lt;/strong&gt;，&lt;strong&gt;而POST中的参数不会被保留&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GET&lt;strong&gt;请求会被浏览器主动cache&lt;/strong&gt;，而POST不会，除非手动设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET产生一个TCP数据包；POST产生两个TCP数据包。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；&lt;/p&gt;
&lt;p&gt;而对于POST，&lt;strong&gt;浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok&lt;/strong&gt;（返回数据）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;get方式的安全性较Post方式要差些，包含机密信息的话，建议用Post数据提交方式；&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;做数据查询时，建议用Get方式&lt;/strong&gt;；  而&lt;strong&gt;在做数据添加、修改或删除时，建议用Post方式&lt;/strong&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安全的是指没有明显的对用户有影响的副作用(包括修改该资源的状态)仅指该方法的多次调用不会产生副作用，不涉及传统意义上的“安全”，这里的副作用是指资源状态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;即，安全的方法不会修改资源状态&lt;/strong&gt;，尽管多次调用的返回值可能不一样(被其他非安全方法修改过)。HTTP方法里的GET和HEAD都是安全的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;幂等&lt;/strong&gt;指的是&lt;strong&gt;一个方法不论多少次操作，结果都是一样&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;**PUT(把内容放到指定URL)，**DELETE(&lt;strong&gt;删除某个URL代表的资源)&lt;/strong&gt;，虽然都修改了资源内容，但多次操作，结果是相同的，&lt;strong&gt;因此和HEAD，GET一样都是幂等的。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;46-cookie和session的区别&#34;&gt;4.6 Cookie和Session的区别
&lt;/h2&gt;&lt;p&gt;Cookie和Session都是客户端与服务器之间保持状态的解决方案&lt;/p&gt;
&lt;p&gt;具体来说，&lt;strong&gt;cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cookie实际上是&lt;strong&gt;一小段文本信息&lt;/strong&gt;。客户端请求服务器，如果服务器需要记录该用户状态，就向客户端浏览器&lt;strong&gt;颁发一个Cookie&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端浏览器会把Cookie保存起来&lt;/strong&gt;。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器，服务器检查该Cookie，以此来辨认用户状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie对象使用key-value属性对的形式保存用户状态&lt;/strong&gt;，一个Cookie对象保存一个属性对。&lt;/p&gt;
&lt;p&gt;一个request或者response同时使用多个Cookie。&lt;/p&gt;
&lt;p&gt;因为Cookie类位于包javax.servlet.http.*下面，所以JSP中不需要import该类。每个属性对应一个getter方法与一个setter方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie并不提供修改、删除操作。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果要修改某个Cookie，只需要新建一个同名的Cookie，添加到response中覆盖原来的Cookie。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://s3-us-west-2.amazonaws.com/secure.notion-static.com/66f870bb-756b-458e-b92b-9ef1473d77c6/Untitled.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Session的区别在于，&lt;strong&gt;会话状态完全保存在服务器&lt;/strong&gt;。客户端请求服务器，如果服务器记录该用户状态，就获取Session来保存状态，这时，如果服务器已经为此客户端创建过session就按照sessionid把这个session检索出来使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;服务器Session常常依赖于Cookie机制检索ID。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但Cookie被禁用时也有其他方法比如URL重写机制&lt;/strong&gt;，使用上比Cookie简单一些，相应的也&lt;strong&gt;增加了服务器的存储压力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Session对应的类为javax.servlet.http.HttpSession类。每个来访者对应一个Session对象，&lt;strong&gt;所有该客户的状态信息都保存在这个Session对象里&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Session对象是在客户端第一次请求服务器的时候创建的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Session也是一种key-value的属性对，通过getAttribute(Stringkey)和setAttribute(String key，Objectvalue)方法读写客户状态信息。Servlet里通过request.getSession()方法获取该客户的Session，&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为了获得更高的存取速度，服务器一般把Session放在内存里。每个用户都会有一个独立的Session。如果Session内容过于复杂，当大量客户访问服务器时可能会导致内存溢出。因此，Session里的信息应该尽量精简。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于会有越来越多的用户访问服务器，因此Session也会越来越多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为防止内存溢出，服务器会把长时间内没有活跃的Session从内存删除。这个时间就是Session的超时时间。如果超过了超时时间没访问过服务器，Session就自动失效了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;它的正常运行仍然需要客户端浏览器的支持。这是因为Session需要使用Cookie作为识别标志。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP协议是无状态的&lt;/strong&gt;，Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为&lt;strong&gt;JSESSIONID的Cookie&lt;/strong&gt;，&lt;strong&gt;它的值为该Session的id（也就是HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;该Cookie为服务器自动生成的&lt;/strong&gt;，它的&lt;strong&gt;maxAge属性一般为–1，表示仅当前浏览器内有效&lt;/strong&gt;，并且&lt;strong&gt;各浏览器窗口间不共享&lt;/strong&gt;，关闭浏览器就会失效。&lt;/p&gt;
&lt;p&gt;因此同一机器的两个浏览器窗口访问服务器时，&lt;strong&gt;会生成两个不同的Session&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;但是由浏览器窗口内的链接、脚本等打开的新窗口（也就是说不是双击桌面浏览器图标等打开的窗口）除外。&lt;strong&gt;这类子窗口会共享父窗口的Cookie，因此会共享一个Session&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL地址重写是对客户端不支持Cookie的解决方案&lt;/strong&gt;。&lt;strong&gt;URL地址重写的原理是将该用户Session的id信息重写到URL地址中&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。&lt;/p&gt;
&lt;h2 id=&#34;47-http请求报文和响应报文的格式&#34;&gt;4.7 HTTP请求报文和响应报文的格式
&lt;/h2&gt;&lt;p&gt;请求报文格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求行（&lt;strong&gt;请求方法+URI协议+版本&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;请求头部&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;请求主体&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET/sample.jsp HTTP/1.1 请求行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept:image/gif.image/jpeg, 请求头部
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Language:zh-cn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection:Keep-Alive
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host:localhost
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Accept-Encoding:gzip,deflate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;username=jinqiao&amp;amp;password=1234 请求主体
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;响应报文：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态行（版本+状态码+原因短语）&lt;/li&gt;
&lt;li&gt;响应首部&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;li&gt;响应主体&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Server:Apache Tomcat/5.0.12
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:Mon,6Oct2003 13:23:42 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length:112
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &amp;lt;title&amp;gt;HTTP响应示例&amp;lt;title&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        Hello HTTP!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;48-http11http2http3-演变&#34;&gt;4.8 HTTP/1.1、HTTP/2、HTTP/3 演变
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP/1.1 相比 HTTP/1.0 性能上的改进：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(长连接，管道网络)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持管道（pipeline）网络传输&lt;/strong&gt;，只要第一个请求发出去了，&lt;strong&gt;不必等其回来，就可以发第二个请求出去&lt;/strong&gt;，可以&lt;strong&gt;减少整体的响应时间&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但 HTTP/1.1 还是有性能瓶颈：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(头部未压缩，相同首部浪费，依然有响应的队头阻塞，无请求优先级，服务器只能被动响应)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;请求 / 响应头部（Header）未经压缩就发送&lt;/strong&gt;，首部信息越多延迟越大。只能压缩 &lt;code&gt;Body&lt;/code&gt; 的部分；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送冗长的首部。每次互相发送相同的首部造成的浪费较多&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务器是按请求的顺序响应的&lt;/strong&gt;，&lt;strong&gt;如果服务器响应慢，会导致客户端一直请求不到数据&lt;/strong&gt;，&lt;strong&gt;也就是响应的队头阻塞&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;没有请求优先级控制&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;请求只能从客户端开始，服务器只能被动响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HTTP/1.1 管道解决了请求的队头阻塞，但是没有解决响应的队头阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP/2 相比 HTTP/1.1 性能上的改进：&lt;/p&gt;
&lt;p&gt;HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(双向数据流（同一连接并行请求响应)，资源处理优先级，服务器推送，压缩头部二进制）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用&lt;strong&gt;同一个连接并行发送多个请求和相应&lt;/strong&gt;，&lt;strong&gt;可以承接双向数据流&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;允许设定数据流中不同资源的&lt;strong&gt;优先级&lt;/strong&gt;，&lt;strong&gt;明确资源处理的先后顺序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;打破了&lt;strong&gt;请求-响应的束缚&lt;/strong&gt;，除了最初的请求响应外，&lt;strong&gt;服务器还能向客户端推送额外的资源&lt;/strong&gt;（客户端没有明确要求的情况下）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;压缩头部，头信息和数据体都是二进制格式&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;1. 头部压缩&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 会&lt;strong&gt;压缩头&lt;/strong&gt;（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你&lt;strong&gt;消除重复的部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这就是所谓的 &lt;strong&gt;&lt;code&gt;HPACK&lt;/code&gt; 算法&lt;/strong&gt;：在客户端和服务器同时&lt;strong&gt;维护一张头信息表&lt;/strong&gt;，所有&lt;strong&gt;字段都会存入这个表&lt;/strong&gt;，&lt;strong&gt;生成一个索引号&lt;/strong&gt;，以后就不发送同样字段了，只发送索引号，这样就&lt;strong&gt;提高速度&lt;/strong&gt;了。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;2. 二进制格式&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了&lt;strong&gt;二进制格式&lt;/strong&gt;，头信息和数据体都是二进制，并且统称为帧（frame）：&lt;strong&gt;头信息帧（Headers Frame）和数据帧（Data Frame）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost4@main/%E7%BD%91%E7%BB%9C/http2/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B8%A7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，&lt;strong&gt;那么收到报文后，无需再将明文的报文转成二进制&lt;/strong&gt;，&lt;strong&gt;而是直接解析二进制报文&lt;/strong&gt;，这&lt;strong&gt;增加了数据传输的效率&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;HTTP/1.1 中的管道（ pipeline）虽然解决了请求的队头阻塞，但是&lt;strong&gt;没有解决响应的队头阻塞&lt;/strong&gt;，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等相应完这个请求后， 才能处理下一个请求，&lt;strong&gt;这属于 HTTP 层队头阻塞&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTTP/2 虽然通过&lt;strong&gt;多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞&lt;/strong&gt; ，&lt;strong&gt;但是一旦发生丢包，就会阻塞住所有的 HTTP 请求&lt;/strong&gt;，&lt;strong&gt;这属于 TCP 层队头阻塞。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/25-HTTP2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;HTT/1 ~ HTTP/2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP/2 &lt;strong&gt;队头阻塞的问题是因为 TCP&lt;/strong&gt;，所以 &lt;strong&gt;HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/HTTP/27-HTTP3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;HTTP/1 ~ HTTP/3&lt;/p&gt;
&lt;p&gt;UDP 发生是&lt;strong&gt;不管顺序，也不管丢包&lt;/strong&gt;的，所以&lt;strong&gt;不会出现像 HTTP/2 队头阻塞的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大家都知道 UDP 是不可靠传输的，但基于 UDP 的 &lt;strong&gt;QUIC 协议&lt;/strong&gt; 可以实现类似 &lt;strong&gt;TCP 的可靠性传输。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;49-如何减少-http-请求次数&#34;&gt;4.9 如何减少 HTTP 请求次数？
&lt;/h2&gt;&lt;p&gt;减少 HTTP 请求次数自然也就提升了 HTTP 性能，可以从这 3 个方面入手：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（&lt;em&gt;减少重定向请求次数，合并请求，延迟发送请求）&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;减少重定向请求次数&lt;/em&gt;；服务器上的一个资源可能由于迁移、维护等原因从 url1 移至 url2 后，而客户端不知情，它还是继续请求 url1，这时服务器不能粗暴地返回错误，而是通过 &lt;code&gt;302&lt;/code&gt; 响应码和 &lt;code&gt;Location&lt;/code&gt; 头部，告诉客户端该资源已经迁移至 url2 了&lt;/strong&gt;，于是客户端需要再发送 url2 请求以获得服务器的资源。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;合并请求&lt;/strong&gt;&lt;/em&gt;；如果把&lt;strong&gt;多个访问小文件的请求合并成一个大的请求&lt;/strong&gt;，虽然传输的总资源还是一样，但是减少请求，也就意味着&lt;strong&gt;减少了重复发送的 HTTP 头部&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;延迟发送请求&lt;/em&gt;；请求网页的时候，没必要把全部资源都获取到，而是只获取当前用户所看到的页面资源，当用户向下滑动页面的时候，再向服务器获取接下来的资源&lt;/strong&gt;，这样就达到了延迟发送请求的效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;410-如何减少-http-响应的数据大小&#34;&gt;4.10 如何减少 HTTP 响应的数据大小？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;（有损无损压缩，质量因子）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们可以考虑对响应的资源进行&lt;strong&gt;压缩&lt;/strong&gt;，这样就可以减少响应的数据大小，从而提高网络传输的效率。&lt;/p&gt;
&lt;p&gt;压缩的方式一般分为 2 种，分别是：&lt;strong&gt;&lt;em&gt;无损压缩&lt;/em&gt;；&lt;em&gt;有损压缩&lt;/em&gt;；&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;无损压缩&#34;&gt;无损压缩
&lt;/h3&gt;&lt;p&gt;无损压缩是指资源经过压缩后，信息不被破坏，还能完全恢复到压缩前的原样，&lt;strong&gt;适合用在文本文件、程序可执行文件、程序源代码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gzip 就是比较常见的无损压缩&lt;/strong&gt;。（客户端支持的压缩算法，会在 HTTP 请求中通过头部中的 &lt;code&gt;Accept-Encoding&lt;/code&gt; 字段告诉服务器）&lt;/p&gt;
&lt;h3 id=&#34;有损压缩&#34;&gt;有损压缩
&lt;/h3&gt;&lt;p&gt;与无损压缩相对的就是有损压缩，经过此方法压缩，&lt;strong&gt;解压的数据会与原始数据不同但是非常接近&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;有损压缩主要将次要的数据舍弃，牺牲一些质量来减少数据量、提高压缩比，这种方法经常用于压缩多媒体数据，比如&lt;strong&gt;音频、视频、图片。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以通过 HTTP 请求头部中的 &lt;code&gt;Accept&lt;/code&gt; 字段里的「 &lt;strong&gt;q 质量因子&lt;/strong&gt;」，告诉服务器期望的资源质量。&lt;/p&gt;
&lt;p&gt;关于图片的压缩，&lt;strong&gt;目前压缩比较高的是 Google 推出的 WebP 格式&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;411-http如何优化&#34;&gt;4.11 Http如何优化
&lt;/h2&gt;&lt;p&gt;对于硬件优化的方向，因为 HTTPS 是属于&lt;strong&gt;计算密集型，应该选择计算力更强的 CPU&lt;/strong&gt;，而且最好选择&lt;strong&gt;支持 AES-NI 特性的 CPU&lt;/strong&gt;，这个特性可以在硬件级别&lt;strong&gt;优化 AES 对称加密算法&lt;/strong&gt;，加快应用数据的加解密。&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;软件优化&lt;/strong&gt;的方向，如果可以，把软件升级成较新的版本，比如将 &lt;strong&gt;Linux 内核 2.X 升级成 4.X&lt;/strong&gt;，将 &lt;strong&gt;openssl 1.0.1 升级到 1.1.1&lt;/strong&gt;，因为新版本的软件不仅会提供新的特性，而且还会修复老版本的问题。&lt;/p&gt;
&lt;p&gt;对于&lt;strong&gt;协议优化&lt;/strong&gt;的方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;密钥交换算法应该选择 &lt;strong&gt;ECDHE 算法&lt;/strong&gt;，而不用 RSA 算法，因为 ECDHE 算法具备前向安全性，而且客户端可以在第三次握手之后，就发送加密应用数据，节省了 1 RTT。&lt;/li&gt;
&lt;li&gt;将 TSL1.2 升级 &lt;strong&gt;TSL1.3&lt;/strong&gt;，因为 &lt;strong&gt;TSL1.3 的握手过程只需要 1 RTT&lt;/strong&gt;，而且安全性更强。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于&lt;strong&gt;证书优化&lt;/strong&gt;的方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器应该选用 &lt;strong&gt;ECDSA 证书&lt;/strong&gt;，而非 RSA 证书，因为在相同安全级别下，&lt;strong&gt;ECC 的密钥长度比 RSA 短很多&lt;/strong&gt;，这样可以提高证书传输的效率；&lt;/li&gt;
&lt;li&gt;服务器应该开启 &lt;strong&gt;OCSP Stapling&lt;/strong&gt; 功能，由服务器预先获得 OCSP 的响应，并把响应结果缓存起来，这样 TLS 握手的时候就不用再访问 CA 服务器，减少了网络通信的开销，提高了证书验证的效率；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于&lt;strong&gt;重连 HTTPS 时，我们可以使用一些技术让客户端和服务端使用上一次 HTTPS 连接使用的会话密钥&lt;/strong&gt;，直接恢复会话，而不用再重新走完整的 TLS 握手过程。&lt;/p&gt;
&lt;p&gt;常见的&lt;strong&gt;会话重用&lt;/strong&gt;技术有 &lt;strong&gt;Session ID 和 Session Ticket，用了会话重用技术，当再次重连 HTTPS 时，只需要 1 RTT 就可以恢复会话&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对于 TLS1.3 使用 Pre-shared Key 会话重用技术，只需要 0 RTT 就可以恢复会话。这些&lt;strong&gt;会话重用技术虽然好用，但是存在一定的安全风险，它们不仅不具备前向安全&lt;/strong&gt;，而且有&lt;strong&gt;重放攻击的风险&lt;/strong&gt;，所以应当对会话密钥设定一个合理的过期时间。&lt;/p&gt;
&lt;h2 id=&#34;412-hsts协议&#34;&gt;4.12 HSTS协议
&lt;/h2&gt;&lt;p&gt;HSTS（HTTP Strict Transport Security）是一种安全协议，旨在增强网站的安全性，特别是针对HTTPS连接。H&lt;strong&gt;STS通过强制客户端（如浏览器）只能通过加密连接（HTTPS）与服务器通信来防止中间人攻击和SSL剥离攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HSTS的工作原理是在服务器的响应头中包含一个特殊的&lt;strong&gt;HTTP头部字段（Strict-Transport-Security），该字段告知浏览器在未来一段时间内（例如一年）只能通过HTTPS连接访问该网站&lt;/strong&gt;。一旦浏览器接收到这个头部字段，它将会记住并在接下来的请求中自动使用HTTPS连接。&lt;/p&gt;
&lt;p&gt;使用HSTS可以有效减少网站受到中间人攻击和SSL剥离攻击的风险，提高网站的安全性。&lt;/p&gt;
&lt;h1 id=&#34;5-ip地址&#34;&gt;5. IP地址
&lt;/h1&gt;&lt;h2 id=&#34;51-ip地址的格式是什么&#34;&gt;5.1 IP地址的格式是什么？
&lt;/h2&gt;&lt;p&gt;什么是IP地址？IP协议提供的一种统一的地址格式，&lt;strong&gt;它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IP地址编址方案将IP地址空间划分为A、B、C、D、E五类，其中A、B、C是基本类，D、E类作为多播和保留使用，为特殊地址。&lt;/p&gt;
&lt;p&gt;每个IP地址包括两个标识码（ID）：&lt;strong&gt;网络ID和主机ID。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。3字节的网络地址 + 1字节主机地址的意思就是：前三段号码为网络号码，剩下的一段号码为本地计算机的号码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A类地址&lt;/strong&gt;：1字节的网络地址 + 3字节主机地址，&lt;strong&gt;网络地址的最高位必须是0&lt;/strong&gt;。A类IP地址的地址范围&lt;strong&gt;1.0.0.0到127.255.255.255&lt;/strong&gt;，IP地址的子网掩码为255.0.0.0，&lt;strong&gt;每个网络支持的最大主机数为&lt;/strong&gt;&lt;code&gt;256^3-2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;B类地址&lt;/strong&gt;：2字节的网络地址 + 2字节主机地址，&lt;strong&gt;网络地址的最高位必须是10&lt;/strong&gt;。B类IP地址地址范围**128.0.0.0-191.255.255.255，**B类IP地址的子网掩码为255.255.0.0，&lt;strong&gt;每个网络支持的最大主机数&lt;/strong&gt;为&lt;code&gt;256^2-2&lt;/code&gt;。注：1000 0000=128&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C类地址&lt;/strong&gt;：3字节的网络地址 + 1字节主机地址，&lt;strong&gt;网络地址的最高位必须是110&lt;/strong&gt;。C类IP地址范围**192.0.0.0-223.255.255.255。**每个网络支持的最大主机数为&lt;code&gt;256-2&lt;/code&gt;。&lt;strong&gt;适用于小规模局域网络&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;D类地址：&lt;strong&gt;多播地址，用于1对多通信，&lt;strong&gt;最高位必须是1110&lt;/strong&gt;。范围从&lt;/strong&gt;224.0.0.0到239.255.255.255&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;E类地址&lt;/strong&gt;:：为保留地址，&lt;strong&gt;最高位必须是“11110”&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;IPv4 首部与 IPv6 首部&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IPv4 首部与 IPv6 首部的差异如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP/31.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;IPv6 相比 IPv4 的首部改进：&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;取消了首部校验和字段, 取消了中间路由分片/重新组装相关字段，取消选项字段）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;取消了首部校验和字段。&lt;/strong&gt; 因为&lt;strong&gt;在数据链路层和传输层都会校验&lt;/strong&gt;，因此 &lt;strong&gt;IPv6 直接取消了 IP 的校验。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取消了分片/重新组装相关字段。&lt;/strong&gt; 分片与重组是耗时的过程，&lt;strong&gt;IPv6 不允许在中间路由器进行分片与重组&lt;/strong&gt;，&lt;strong&gt;这种操作只能在源与目标主机&lt;/strong&gt;，&lt;strong&gt;这将大大提高了路由器转发的速度。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;取消选项字段。&lt;/strong&gt; &lt;strong&gt;选项字段不再是标准 IP 首部的一部分了，但它并没有消失，而是可能出现在 IPv6 首部中的「下一个首部」指出的位置上&lt;/strong&gt;。删除该选项字段使的 IPv6 的首部成为固定长度的 &lt;code&gt;40&lt;/code&gt; 字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-单播广播多播的区别是什么&#34;&gt;5.2 单播广播多播的区别是什么？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单播：主机间一对一通信&lt;/strong&gt;。   优点：&lt;strong&gt;个性化服务，及时响应&lt;/strong&gt;；缺点：&lt;strong&gt;流量压力大&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;广播：主机间一对所有通信&lt;/strong&gt;。优点：布局简单，维护方便，&lt;strong&gt;流量负载低&lt;/strong&gt;。缺点：&lt;strong&gt;缺乏个性化服务&lt;/strong&gt;，无法在Internet宽带上传播。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多播（组播）：主机间一对一组通信&lt;/strong&gt;。优点：&lt;strong&gt;兼具流量负载和个性化的优点&lt;/strong&gt;，允许在Internet宽带上传播。缺点：&lt;strong&gt;与单播协议相比没有纠错机制&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;53-如何划分子网&#34;&gt;5.3 如何划分子网？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;划分子网的方法是从主机号借用若干个位作为子网号&lt;/strong&gt;，&lt;strong&gt;而主机号也就相应减少了若干个位。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;于是两级IP地址在本单位内部就变为三级IP地址：&lt;strong&gt;网络号、子网号和主机号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区分子网号和主机号的办法是：通过&lt;strong&gt;子网掩码&lt;/strong&gt;将&lt;strong&gt;网络号和子网号全设为1&lt;/strong&gt;的IP地址为子网掩码。&lt;/p&gt;
&lt;p&gt;假设公司有4个部门，A部门有10台主机，B部门有15台主机，C部门有30台主机，D部门有20台主机。分配了一个总的网段为：192.168.2.0/24。请问该如何划分子网？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网段前面的数字是我们的网络地址，后面的24表示用24位来表示网络位，用32-24=8位来表示主机位&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;主机数目不多，可以小型组网，因此&lt;strong&gt;采用C类地址(最大254个主机)，默认掩码为225.255.255.0。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先假设借用主机位&lt;strong&gt;2位来划分4个子网&lt;/strong&gt;，则子网掩码组合为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.00 000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.01 000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.10 000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.11 000000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;然而全为0和全为1的地址不能用&lt;/strong&gt;，所以我们需要借用主机位3位，划分&lt;code&gt;8-2=6&lt;/code&gt;个子网：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.00100000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.01000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.01100000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.10000000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.10100000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.11000000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;验证一下：最后提供的主机位数是&lt;code&gt;2^5=32&lt;/code&gt;，也就是说每个子网&lt;strong&gt;最大的主机数是32-2=30&lt;/strong&gt;，符合题目要求。所以子网划分如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（1）255.255.255.32:    192.168.2.33~ 192.168.2.62
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（2）255.255.255.64:   192.168.2.65~ 192.168.2.94
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（3）255.255.255.96:   192.168.2.97~ 192.168.2.126
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（4）255.255.255.128:  192.168.2.129~ 192.168.2.158
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（5）255.255.255.160:  192.168.2.161~ 192.168.2.190
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;（6）255.255.255.192:  192.168.2.193~ 192.168.2.222
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;子网掩码是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;11111111.11111111.11111111.111 00000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;255.255.255.224
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;6-网络安全&#34;&gt;6. 网络安全
&lt;/h1&gt;&lt;h2 id=&#34;61-什么是ddos攻击&#34;&gt;6.1 什么是DDos攻击？
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;DDos全称Distributed Denial of Service&lt;/strong&gt;，&lt;strong&gt;分布式拒绝服务攻击&lt;/strong&gt;。最基本的DOS攻击过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向服务端发送请求链接数据包&lt;/li&gt;
&lt;li&gt;服务端向客户端发送确认数据包&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端不向服务端发送确认数据包，服务器一直等待来自客户端的确认&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DDoS则是采用分布式的方法，通过在网络上占领多台“肉鸡”，用多台计算机发起攻击。&lt;/p&gt;
&lt;p&gt;DOS攻击现在基本没啥作用了，因为&lt;strong&gt;服务器的性能都很好&lt;/strong&gt;，而且是多台服务器共同作用，1V1的模式黑客无法占上风。对于DDOS攻击，预防方法有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;减少SYN timeout时间。&lt;strong&gt;在&lt;/strong&gt;握手的第三步&lt;/strong&gt;，&lt;strong&gt;服务器会等待30秒-120秒的时间，减少这个等待时间就能释放更多的资源&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限制同时打开的SYN半连接数目。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;62-什么是xss攻击&#34;&gt;6.2 什么是XSS攻击？
&lt;/h2&gt;&lt;p&gt;XSS也称 cross-site scripting，&lt;strong&gt;跨站脚本&lt;/strong&gt;。攻击者在web页面中会&lt;strong&gt;插入一些恶意的script代码&lt;/strong&gt;。当用户浏览该页面的时候，&lt;strong&gt;那么嵌入到web页面中script代码会执行&lt;/strong&gt;，因此会达到恶意攻击用户的目的。&lt;/p&gt;
&lt;p&gt;那么XSS攻击最主要有如下分类：&lt;strong&gt;反射型、存储型、及 DOM-based型。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反射性和DOM-baseed型可以归类为非持久性XSS攻击，存储型可以归类为持久性XSS攻击。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如一个存在XSS漏洞的&lt;strong&gt;论坛，用户发帖时&lt;/strong&gt;就可以引入&lt;strong&gt;带有＜script＞标签的代码&lt;/strong&gt;，导致恶意代码的执行。&lt;/p&gt;
&lt;p&gt;预防措施有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端：&lt;strong&gt;过滤&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;后端：&lt;strong&gt;转义，比如go自带的处理器就具有转义功能。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;反射性xss一般指攻击者通过特定的方式来&lt;strong&gt;诱惑受害者去访问一个包含恶意代码的URL&lt;/strong&gt;。当受害者点击恶意链接url的时候，&lt;strong&gt;恶意代码会直接在受害者的主机上的浏览器执行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存储型XSS的原理是：&lt;strong&gt;主要是&lt;/strong&gt;将恶意代码上传或存储到服务器中，下次只要受害者浏览包含此恶意代码的页面就会执行恶意代码。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;63-什么是注入sql攻击&#34;&gt;6.3 什么是注入SQL攻击？
&lt;/h2&gt;&lt;p&gt;XSS是将脚本代码注入，而SQL注入攻击顾名思义就是注入SQL语句。&lt;/p&gt;
&lt;p&gt;SQL注入是通过客户端的输入把SQL命令注入到一个应用的数据库中，从而执行恶意的SQL语句。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果通过参数进行拼接，拼接后的sql语句&lt;/strong&gt;就是： &lt;strong&gt;select * from user where username = ’’ and password = ’ ’ or ‘123’ = ‘123’;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这样的了，那么会有一个or语句，只要这两个有一个是正确的话，就条件成立，因此 123 = 123 是成立的。因此验证就会被跳过。&lt;/p&gt;
&lt;p&gt;这只是一个简单的列子，比如还有密码比如是这样的：’; drop table user;, 这样的话，那么sql命令就变成了：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;select * from user where username = ’’ and password = ’‘; drop table user;’ , 那么这个时候我们会把user表直接删除了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;比如代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Form&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;sql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SELECT * FROM user WHERE username=&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39; AND password=&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当用户输入&lt;code&gt;myuser&#39; or &#39;foo&#39; = &#39;foo&#39; --&lt;/code&gt;，那么SQL就变成了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;myuser&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在SQL里面&lt;code&gt;--&lt;/code&gt;是注释标记，所以查询语句会在此中断。&lt;/p&gt;
&lt;p&gt;这就让攻击者在不知道任何合法用户名和密码的情况下成功登录了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预防方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;限制数据库权限&lt;/strong&gt;，给用户提供仅仅能够满足其工作的最低权限。&lt;/li&gt;
&lt;li&gt;对进入数据库的&lt;strong&gt;特殊字符（’”&amp;amp;*;等）转义处理&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提供参数化查询接口&lt;/strong&gt;，&lt;strong&gt;不要直接使用原生SQL&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;永远&lt;strong&gt;不要信任用户的输入&lt;/strong&gt;。对用户的输入进行校验，可以通过正&lt;strong&gt;则表达式&lt;/strong&gt;，或限制长度；对&lt;strong&gt;单引号和 双“-”进行转换&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;永远&lt;strong&gt;不要使用动态拼装sql&lt;/strong&gt;，可以使用&lt;strong&gt;参数化的sql&lt;/strong&gt;或者&lt;strong&gt;直接使用存储过程进行数据查询存取&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;永远&lt;strong&gt;不要使用管理员权限的数据库连接&lt;/strong&gt;，为&lt;strong&gt;每个应用使用单独的权限有限的数据库连接。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;不要把&lt;strong&gt;机密信息直接存放&lt;/strong&gt;，加密或者&lt;strong&gt;hash掉密码和敏感&lt;/strong&gt;的信息。&lt;/li&gt;
&lt;li&gt;应用的异&lt;strong&gt;常信息应该给出尽可能少的提示&lt;/strong&gt;，最好使&lt;strong&gt;用自定义的错误信息对原始错误信息进行包装&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sql注入的检测方法一般采取辅助软件或网站平台来检测&lt;/strong&gt;，软件一般采用sql注入检测工具&lt;strong&gt;jsky&lt;/strong&gt;，网站平台就有&lt;strong&gt;亿思网站&lt;/strong&gt;安全平台检测工具。MDCSOFT SCAN等。采用MDCSOFT-IPS可以有效的防御SQL注入，XSS攻击等。&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>1. 入门</title>
        <link>https://Salmooo.github.io/p/1.-%E5%85%A5%E9%97%A8/</link>
        <pubDate>Tue, 18 Jun 2019 12:23:21 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/1.-%E5%85%A5%E9%97%A8/</guid>
        <description></description>
        </item>
        <item>
        <title>代码随想录读后感</title>
        <link>https://Salmooo.github.io/p/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
        <pubDate>Mon, 07 Jan 2019 18:51:29 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
        <description></description>
        </item>
        <item>
        <title>C&#43;&#43; RAII</title>
        <link>https://Salmooo.github.io/p/c-raii/</link>
        <pubDate>Sun, 07 Oct 2018 18:51:29 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/c-raii/</guid>
        <description>&lt;h2 id=&#34;1什么是raii&#34;&gt;1.什么是RAII
&lt;/h2&gt;&lt;p&gt;RAII（&lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;A&lt;/strong&gt;cquisition &lt;strong&gt;I&lt;/strong&gt;s &lt;strong&gt;I&lt;/strong&gt;nitialization）是由c++之父Bjarne Stroustrup提出的，中文翻译为资源获取即初始化.&lt;br&gt;
他说：使用局部对象来管理资源的技术称为资源获取即初始化；这里的资源主要是指操作系统中有限的东西如内存、网络套接字等等，局部对象是指存储在栈的对象，它的生命周期是由操作系统来管理的，无需人工介入.&lt;/p&gt;
&lt;p&gt;(ps: 所以说RAII机制是一种对资源申请、释放这种成对的操作的封装? 通过这种方式实现在局部作用域内申请资源然后销毁资源0 0)&lt;/p&gt;
&lt;h2 id=&#34;2raii的原理&#34;&gt;2.RAII的原理
&lt;/h2&gt;&lt;p&gt;资源的使用一般经历三个步骤a.获取资源 b.使用资源 c.销毁资源，但是资源的销毁往往是程序员经常忘记的一个环节，所以程序界就想如何在程序员中让资源自动销毁呢？&lt;br&gt;
c++之父给出了解决问题的方案：RAII，它充分的利用了C++语言局部对象自动销毁的特性来控制资源的生命周期。给一个简单的例子来看下局部对象的自动销毁的特性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;name_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Init a person!&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Destory a person!&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;age_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;age_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;编译并运行：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ person.cpp -o person
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./person 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;运行结果：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Init a person!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Destory a person!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从person class可以看出，当我们在main函数中声明一个局部对象的时候，会自动调用构造函数进行对象的初始化，当整个main函数执行完成后，自动调用析构函数来销毁对象，整个过程无需人工介入，由操作系统自动完成；&lt;br&gt;
于是，很自然联想到，当我们在使用资源的时候，在构造函数中进行初始化，在析构函数中进行销毁。整个RAII过程我总结四个步骤：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a.设计一个类封装资源
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b.在构造函数中初始化
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;c.在析构函数中执行销毁操作
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;d.使用时声明一个该对象的类
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;3raii的应用&#34;&gt;3.RAII的应用
&lt;/h2&gt;&lt;p&gt;本节主要通过一个简单的例子来说明如何将RAII应用到我们的代码中。linux下经常会使用多线程技术，说到多线程，就得提到互斥锁，互斥锁主要用于互斥，互斥是一种&lt;strong&gt;竞争关系&lt;/strong&gt;，用来保护临界资源一次只被一个线程访问，按照我们前面的分析，我们封装一下POSIX标准的互斥锁：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;pthread.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;cstdlib&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;class Mutex {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; public:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Mutex();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ~Mutex();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  void Lock();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  void Unlock(); 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; private:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  pthread_mutex_t mu_;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  // No copying
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Mutex(const Mutex&amp;amp;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  void operator=(const Mutex&amp;amp;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;#34;mutex.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;static void PthreadCall(const char* label, int result) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  if (result != 0) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    fprintf(stderr, &amp;#34;pthread %s: %s\n&amp;#34;, label, strerror(result));
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Mutex::Mutex() { PthreadCall(&amp;#34;init mutex&amp;#34;, pthread_mutex_init(&amp;amp;mu_, NULL)); }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Mutex::~Mutex() { PthreadCall(&amp;#34;destroy mutex&amp;#34;, pthread_mutex_destroy(&amp;amp;mu_)); }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void Mutex::Lock() { PthreadCall(&amp;#34;lock&amp;#34;, pthread_mutex_lock(&amp;amp;mu_)); }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void Mutex::Unlock() { PthreadCall(&amp;#34;unlock&amp;#34;, pthread_mutex_unlock(&amp;amp;mu_)); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;写到这里其实就可以使用Mutex来锁定临界区，但我们发现Mutex只是用来对锁的初始化和销毁，我们还得在代码中调用Lock和Unlock函数，这又是一个对立操作，所以我们可以继续使用RAII进行封装，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;#34;mutex.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;class  MutexLock {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; public:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  explicit MutexLock(Mutex *mu)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      : mu_(mu)  {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    this-&amp;gt;mu_-&amp;gt;Lock();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ~MutexLock() { this-&amp;gt;mu_-&amp;gt;Unlock(); }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; private:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Mutex *const mu_;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  // No copying allowed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  MutexLock(const MutexLock&amp;amp;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  void operator=(const MutexLock&amp;amp;);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;到这里我们就真正封装了互斥锁，下面我们来通过一个简单的例子来使用它，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;#34;mutexlock.hpp&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#define    NUM_THREADS     10000
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int num=0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Mutex mutex;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;void *count(void *args) {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    MutexLock lock(&amp;amp;mutex);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    num++;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int main() {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    int t;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    pthread_t thread[NUM_THREADS];
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for( t = 0; t &amp;lt; NUM_THREADS; t++) {   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        int ret = pthread_create(&amp;amp;thread[t], NULL, count, NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        if(ret) {   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            return -1;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        }   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for( t = 0; t &amp;lt; NUM_THREADS; t++)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        pthread_join(thread[t], NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    std::cout &amp;lt;&amp;lt; num &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;编译并运行：g++ test_mutexlock.cpp mutexlock.hpp mutex.cpp mutex.h -o test_mutexlock -lpthread
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./test_mutexlock 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;运行结果：10000  符合预期（可以去掉MutexLock lock(&amp;amp;mutex);试试看看结果如何？）
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>99.重点记录/课后习题重点记录</title>
        <link>https://Salmooo.github.io/p/99.%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Thu, 30 Aug 2018 23:19:45 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/99.%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98%E9%87%8D%E7%82%B9%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;h1 id=&#34;第九十九章-重点记录课后习题重点记录&#34;&gt;第九十九章 重点记录/课后习题重点记录
&lt;/h1&gt;&lt;h2 id=&#34;1第一章的重点及练习&#34;&gt;1.第一章的重点及练习
&lt;/h2&gt;&lt;h2 id=&#34;2第二章的重点及练习&#34;&gt;2.第二章的重点及练习
&lt;/h2&gt;&lt;h2 id=&#34;3第三章的重点及练习&#34;&gt;3.第三章的重点及练习
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;头文件中不应该包含using声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串字面值和string是不同的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;str[x],[]输入参数为string::size_type类型，给出int整型也会自动转化为该类型 ，数组下标的类型：size_t&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但凡是使用了迭代器的循环体，都不要向迭代器所属的容器添加元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;初始化：char input_buffer[buffer_size];，长度必须是const表达式，或者不写，让编译器自己推断。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用数组时，编译器一般会把它转换成指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面的程序有何作用？它合法吗？如果不合法？为什么？不合法。使用下标访问空字符串是非法的行为。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将标点符号去除后输出字符串剩余的部分。关键代码if (!ispunct(x))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面的范围for语句合法吗？如果合法，c的类型是什么？
要根据for循环中的代码来看是否合法，c是string 对象中字符的引用，s是常量。因此如果for循环中的代码重新给c赋值就会非法，如果不改变c的值，那么合法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Keep out!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* ... */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;下列的vector对象各包含多少个元素？这些元素的值分别是多少？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// size:0,  no values.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// size:10, value:0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;v3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// size:10, value:42
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// size:1,  value:10
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// size:2,  value:10, 42
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// size:10, value:&amp;#34;&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// size:10, value:&amp;#34;hi&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在100页的二分搜索程序中，为什么用的是 &lt;code&gt;mid = beg + (end - beg) / 2&lt;/code&gt;, 而非 &lt;code&gt;mid = (beg + end) / 2 ;&lt;/code&gt; ? 因为两个迭代器相互之间支持的运算只有 &lt;code&gt;-&lt;/code&gt; ，而没有 &lt;code&gt;+&lt;/code&gt; 。 但是迭代器和迭代器差值（整数值）之间支持 &lt;code&gt;+&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;假设`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt_size&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`是一个无参函数，它的返回值是`&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`。请回答下列哪个定义是非法的，为什么？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;txt_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fundamental&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;非法。维度必须是一个常量表达式。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;合法。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;非法。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的值必须要到运行时才能得到。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;非法。数组的大小应该是&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;假定&lt;code&gt;p1&lt;/code&gt; 和 &lt;code&gt;p2&lt;/code&gt; 都指向同一个数组中的元素，则下面程序的功能是什么？什么情况下该程序是非法的？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;解：&lt;/p&gt;
&lt;p&gt;将 &lt;code&gt;p1&lt;/code&gt; 移动到 &lt;code&gt;p2&lt;/code&gt; 的位置。任何情况下都合法。&lt;/p&gt;
&lt;h2 id=&#34;4&#34;&gt;4
&lt;/h2&gt;&lt;p&gt;求值顺序：int i = f1() + f2()
先计算f1() + f2(),再计算int i = f1() + f2()。但是f1和f2的计算先后不确定
但是，如果f1、f2都对同一对象进行了修改，因为顺序不确定，所以会编译出错，显示未定义&lt;/p&gt;
&lt;p&gt;取余运算m%n，结果符号与m相同&lt;/p&gt;
&lt;p&gt;短路求值：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。先左再右
小技巧，声明为引用类型可以避免对元素的拷贝，如下，如string特别大时可以节省大量时间。
vector&lt;string&gt; text;
for(const auto &amp;amp;s: text){
cout&amp;laquo;s;
}&lt;/p&gt;
&lt;p&gt;赋值运算符满足&lt;strong&gt;右结合律&lt;/strong&gt;，这点和其他二元运算符不一样。 &lt;code&gt;ival = jval = 0;&lt;/code&gt;等价于&lt;code&gt;ival = (jval = 0);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复合赋值运算符，复合运算符只求值一次，普通运算符求值两次。（对性能有一点点点点影响） 任意复合运算符op等价于a = a op b;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;iter++等价于&lt;/em&gt;(iter++)，递增优先级较高&lt;/p&gt;
&lt;p&gt;ptr-&amp;gt;mem等价于(&lt;em&gt;ptr).mem&lt;/em&gt;   ，注意.运算符优先级大于，所以记得加括号&lt;/p&gt;
&lt;p&gt;可以嵌套使用，右结合律，从右向左顺序组合&lt;/p&gt;
&lt;p&gt;finalgrade = (grade &amp;gt; 90) ? &amp;ldquo;high pass&amp;rdquo;
: (grade &amp;lt; 60) ? &amp;ldquo;fail&amp;rdquo; : &amp;ldquo;pass&amp;rdquo;;
//等价于
finalgrade = (grade &amp;gt; 90) ? &amp;ldquo;high pass&amp;rdquo;
: （(grade &amp;lt; 60) ? &amp;ldquo;fail&amp;rdquo; : &amp;ldquo;pass&amp;rdquo;）;
输出表达式使用条件运算符记得加括号，条件运算符优先级太低。&lt;/p&gt;
&lt;p&gt;有符号数负值可能移位后变号，所以强烈建议位运算符仅用于无符号数。&lt;/p&gt;
&lt;p&gt;逗号运算符从左向右依次求值，左侧求值结果丢弃，逗号运算符结果是右侧表达式的值。&lt;/p&gt;
&lt;h2 id=&#34;5&#34;&gt;5.
&lt;/h2&gt;&lt;p&gt;C++语言没有明确规定大多数二元运算符的求值顺序，给编译器优化留下了余地。这种策略实际上是在代码生成效率和程序潜在缺陷之间进行了权衡，你认为这可以接受吗？请说出你的理由。
&lt;strong&gt;可以接受&lt;/strong&gt;。C++的设计思想是尽可能地“相信”程序员，将效率最大化。然而这种思想却有着潜在的危害，就是无法控制程序员自身引发的错误。因此 Java 的诞生也是必然，Java的思想就是尽可能地“不相信”程序员。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;for： for语句可以省略掉 init-statement， condition和 expression的任何一个；甚至全部。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;什么是“悬垂else”？C++语言是如何处理else子句的？ 解： 用来描述在嵌套的if else语句中，如果if比else多时如何处理的问题。C++使用的方法是else匹配最近没有配对的if 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;12 / 3 * 4 + 5 * 15 + 24 % 4 / 2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2) = 16 + 75 + 0 = 91
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。这种策略称为 短路求值。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;相等性运算符未定义求值顺序。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解释在下面的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;if语句中条件部分的判断过程&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;首先判断&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;不是一个空指针，因此&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp为真&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。然后判断&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cp&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;的值是字符&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;，非&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;。因此最后的结果为真。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;执行下述&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;语句后将发生什么情况？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;编译错误。赋值运算符左侧必须是一个可修改的左值。而字面值是右值。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;尽管下面的语句合法，但它们实际执行的行为可能和预期并不一样，为什么？应该如何修改？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;说明前置递增运算符和后置递增运算符的区别。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;前置递增运算符将对象本身作为左值返回，而后置递增运算符将对象原始值的副本作为右值返回。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;表达式有误。&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;并没有规定`&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`运算符两边的求值顺序，应该改为`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;因为运算符的优先级问题，下面这条表达式无法通过编译。根据&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.12&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;节中的表指出它的问题在哪里？应该如何修改？&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;word&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;解：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;加法运算符的优先级高于条件运算符。因此要改为：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;推断下面代码的输出结果并说明理由。实际运行这段程序，结果和你想象的一样吗？如不一样，为什么？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int x[10];   int *p = x;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cout &amp;lt;&amp;lt; sizeof(x)/sizeof(*x) &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cout &amp;lt;&amp;lt; sizeof(p)/sizeof(*p) &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;第一个输出结果是 10。 第二个结果取决于机器。sizeof(p)即int*的内存空间大小, 32位机4B, 64位机8B; sizeof(*p)即sizeof(int), 通常为4B, C++标准规定其不得小于2B。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;6&#34;&gt;6.
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;说明形参、局部变量以及局部静态变量的区别。编写一个函数，同时达到这三种形式。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;形参定义在函数形参列表里面；局部变量定义在代码块里面； 局部静态变量在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序终止时才被销毁。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;// 例子
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int count_add(int n)       // n是形参
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    static int ctr = 0;    // ctr 是局部静态变量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ctr += n;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return ctr;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;int main()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    for (int i = 0; i != 10; ++i)  // i 是局部变量
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      cout &amp;lt;&amp;lt; count_add(i) &amp;lt;&amp;lt; endl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return 0;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;7&#34;&gt;7
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;使用class和struct时有区别吗？如果有，是什么？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;class和struct的唯一区别是默认的访问级别不同。&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;封装是何含义？它有什么用处？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;将类内部分成员设置为外部不可见，而提供部分接口给外面，这样的行为叫做封装。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;用处：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1.确保用户的代码不会无意间破坏封装对象的状态。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2.被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;8io库&#34;&gt;8.IO库
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s.eof()	若流s的eofbit置位，则返回true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s.fail()	若流s的failbit置位，则返回true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s.bad()	若流s的badbit置位，则返回true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s.good()	若流s处于有效状态，则返回true
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;什么情况下，下面的while循环会终止？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;while (cin &amp;gt;&amp;gt; i) /*  ...    */
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：如badbit、failbit、eofbit 的任一个被置位，那么检测流状态的条件会失败。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;istream&amp;amp; func(istream &amp;amp;is)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    std::string buf;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    while (is &amp;gt;&amp;gt; buf)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        std::cout &amp;lt;&amp;lt; buf &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    is.clear();
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    return is;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;有些情况下我们希望提供cin作为接受istream&amp;amp;参数的构造函数的默认实参，请声明这样的构造函数。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Sales_data(std::istream &amp;amp;is = std::cin) { read(is, *this); }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;如果接受string的构造函数和接受istream&amp;amp;的构造函数都使用默认实参，这种行为合法吗？如果不，为什么？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;不合法。当你调用Sales_data()构造函数时，无法区分是哪个重载。    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;下面这条声明合法吗？如果不，为什么？
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;vector&amp;lt;NoDefault&amp;gt; vec(10);//vec初始化有10个元素
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;解：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;不合法。因为NoDefault没有默认构造函数。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;9&#34;&gt;9
&lt;/h2&gt;&lt;p&gt;const_iterator	可以读取元素但不能修改元素的迭代器类型&lt;/p&gt;
&lt;p&gt;C c1(c2);或C c1 = c2;	构造c2的拷贝c1&lt;/p&gt;
&lt;p&gt;使用非成员版本的swap是一个好习惯。&lt;/p&gt;
&lt;p&gt;当我们用一个对象去初始化容器或者将对象插入到容器时，实际上放入的是对象的拷贝。&lt;/p&gt;
&lt;p&gt;emplace开头的函数是新标准引入的，这些操作是构造而不是拷贝元素。&lt;/p&gt;
&lt;p&gt;会改变容器大小，不适用于array。
forward_list有特殊版本的erase
forward_list不支持pop_back
vector和string不支持pop_front&lt;/p&gt;
&lt;p&gt;reverse_iterator	按逆序寻址元素的迭代器
const_reverse_iterator	不能修改元素的逆序迭代器
c.rbegin(), c.rend()	返回指向c的尾元素和首元素之前位置的迭代器
c.crbegin(), c.crend()	返回const_reverse_iterator&lt;/p&gt;
&lt;p&gt;迭代器
迭代器范围：begin到end，即第一个元素到最后一个元素的后面一个位置。
左闭合区间：[begin, end)&lt;/p&gt;
&lt;p&gt;容器操作可能使迭代器失效
在向容器添加元素后：
如果容器是vector或string，且存储空间被重新分配，则指向容器的迭代器、指针、引用都会失效。
对于deque，插入到除首尾位置之外的任何位置都会导致指向容器的迭代器、指针、引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效。
对于list和forward_list，指向容器的迭代器、指针和引用依然有效。
在从一个容器中删除元素后：
对于list和forward_list，指向容器其他位置的迭代器、引用和指针仍然有效。
对于deque，如果在首尾之外的任何位置删除元素，那么指向被删除元素外其他元素的迭代器、指针、引用都会失效；如果是删除deque的尾元素，则尾后迭代器会失效，但其他不受影响；如果删除的是deque的头元素，这些也不会受影响。
对于vector和string，指向被删元素之前的迭代器、引用、指针仍然有效。
注意：当我们删除元素时，尾后迭代器总是会失效。
注意：使用失效的迭代器、指针、引用是严重的运行时错误！
建议：将要求迭代器必须保持有效的程序片段最小化。
建议：不要保存end返回的迭代器。&lt;/p&gt;
&lt;p&gt;定义在stack头文件中。
stack默认基于deque实现，也可以在list或vector之上实现。&lt;/p&gt;
&lt;p&gt;定义在stack头文件中。
stack默认基于deque实现，也可以在list或vector之上实现。&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有时可能希望操作可以接受更多的参数。&lt;/p&gt;
&lt;p&gt;lambda表达式表示一个可调用的代码单元，可以理解成是一个未命名的内联函数。&lt;/p&gt;
&lt;p&gt;形式：[capture list](parameter list) -&amp;gt; return type {function body}。&lt;/p&gt;
&lt;p&gt;其中capture list捕获列表是一个lambda所在函数定义的局部变量的列表（通常为空）。不可忽略。
return type是返回类型。可忽略。
parameter是参数列表。可忽略。
function body是函数体。不可忽略。
auto f = [] {return 42;}&lt;/p&gt;
&lt;p&gt;只读算法
只读取范围中的元素，不改变元素。
如 find和 accumulate（在numeric中定义，求和）。
find_first_of，输入：两对迭代器标记两段范围，在第一段中找第二段中任意元素，返回第一个匹配的元素，找不到返回第一段的end迭代器。
通常最好使用cbegin和cend。
equal：确定两个序列是否保存相同的值。&lt;/p&gt;
&lt;p&gt;隐式捕获：让编译器推断捕获列表，在捕获列表中写一个&amp;amp;（引用方式）或=（值方式）。auto f3 = [=] {return v1;}&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Git Magic</title>
        <link>https://Salmooo.github.io/p/git-magic/</link>
        <pubDate>Thu, 23 Aug 2018 19:20:22 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/git-magic/</guid>
        <description>&lt;h1 id=&#34;git魔法&#34;&gt;git魔法
&lt;/h1&gt;&lt;p&gt;Git 是一个分布式版本管理工具，版本管理工具就是大家在写东西的时候都用过 &lt;strong&gt;回撤&lt;/strong&gt;这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用回撤是找不回来的。而&lt;strong&gt;版本管理工具能记录每次的修改&lt;/strong&gt;，只要提交到版本仓库，就可以找到之前任何时刻的状态（文本状态）。&lt;/p&gt;
&lt;p&gt;下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过页面内查找的方式 Ctrl/Command+f 进行快速查找。&lt;/p&gt;
&lt;h2 id=&#34;开卷必读&#34;&gt;开卷必读
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;如果之前未使用过 Git，可以学习 &lt;a class=&#34;link&#34; href=&#34;https://rogerdudler.github.io/git-guide/index.zh.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git 小白教程&lt;/a&gt;入门&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;一定要先测试命令的效果后&lt;/strong&gt;，再用于工作环境中，以防造成不能弥补的后果！&lt;strong&gt;到时候别拿着砍刀来找我&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;所有的命令都在 git version 2.7.4 (Apple Git-66) 下测试通过&lt;/li&gt;
&lt;li&gt;统一概念：
&lt;ul&gt;
&lt;li&gt;工作区：改动（增删文件和内容）&lt;/li&gt;
&lt;li&gt;暂存区：输入命令：git add 改动的文件名，此次改动就放到了 ‘暂存区’&lt;/li&gt;
&lt;li&gt;本地仓库(简称：本地)：输入命令：git commit 此次修改的描述，此次改动就放到了本地仓库，每个 commit，我叫它为一个版本。&lt;/li&gt;
&lt;li&gt;远程仓库(简称：远程)：输入命令：git push 远程仓库，此次改动就放到了远程仓库（GitHub 等)&lt;/li&gt;
&lt;li&gt;commit-id：输出命令：git log，最上面那行 commit xxxxxx，后面的字符串就是 commit-id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面，就是你在找的 Git 命令速查表。&lt;/p&gt;
&lt;h2 id=&#34;展示帮助信息&#34;&gt;展示帮助信息
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git help -g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The command output as below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The common Git guides are:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   attributes          Defining attributes per path
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   cli                 Git command-line interface and conventions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   core-tutorial       A Git core tutorial for developers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   cvs-migration       Git for CVS users
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   diffcore            Tweaking diff output
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   everyday            A useful minimum set of commands for Everyday Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   glossary            A Git Glossary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   hooks               Hooks used by Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   ignore              Specifies intentionally untracked files to ignore
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   modules             Defining submodule properties
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   namespaces          Git namespaces
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   repository-layout    Git Repository Layout
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   revisions           Specifying revisions and ranges for Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   tutorial            A tutorial introduction to Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   tutorial-2          A tutorial introduction to Git: part two
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   workflows           An overview of recommended workflows with Git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;#39;git help -a&amp;#39; and &amp;#39;git help -g&amp;#39; list available subcommands and some concept guides. See &amp;#39;git help &amp;lt;command&amp;gt;&amp;#39; or &amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39; to read about a specific subcommand or concept.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;回到远程仓库的状态&#34;&gt;回到远程仓库的状态
&lt;/h2&gt;&lt;p&gt;抛弃本地所有的修改，回到远程仓库的状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch --all &amp;amp;&amp;amp; git reset --hard origin/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;重设第一个-commit&#34;&gt;重设第一个 commit
&lt;/h2&gt;&lt;p&gt;也就是把所有的改动都重新放回工作区，并&lt;strong&gt;清空所有的 commit&lt;/strong&gt;，这样就可以重新提交第一个 commit 了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git update-ref -d HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看冲突文件列表&#34;&gt;查看冲突文件列表
&lt;/h2&gt;&lt;p&gt;展示工作区的冲突文件列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff --name-only --diff-filter=U
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示工作区和暂存区的不同&#34;&gt;展示工作区和暂存区的不同
&lt;/h2&gt;&lt;p&gt;输出&lt;strong&gt;工作区&lt;/strong&gt;和&lt;strong&gt;暂存区&lt;/strong&gt;的 different (不同)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;还可以展示本地仓库中任意两个 commit 之间的文件变动：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff &amp;lt;commit-id&amp;gt; &amp;lt;commit-id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示暂存区和最近版本的不同&#34;&gt;展示暂存区和最近版本的不同
&lt;/h2&gt;&lt;p&gt;输出&lt;strong&gt;暂存区&lt;/strong&gt;和本地最近的版本 (commit) 的 different (不同)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff --cached
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示暂存区工作区和最近版本的不同&#34;&gt;展示暂存区、工作区和最近版本的不同
&lt;/h2&gt;&lt;p&gt;输出&lt;strong&gt;工作区&lt;/strong&gt;、&lt;strong&gt;暂存区&lt;/strong&gt; 和本地最近的版本 (commit) 的 different (不同)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff HEAD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;快速切换到上一个分支&#34;&gt;快速切换到上一个分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除已经合并到-master-的分支&#34;&gt;删除已经合并到 master 的分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch --merged master | grep -v &amp;#39;^\\*\\|  master&amp;#39; | xargs -n 1 git branch -d
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示本地分支关联远程仓库的情况&#34;&gt;展示本地分支关联远程仓库的情况
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -vv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;关联远程分支&#34;&gt;关联远程分支
&lt;/h2&gt;&lt;p&gt;关联之后，git branch -vv 就可以展示关联的远程分支名了，同时推送到远程仓库直接：git push，不需要指定远程仓库了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -u origin/mybranch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者在 push 时加上 -u 参数&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin/mybranch -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;列出所有远程分支&#34;&gt;列出所有远程分支
&lt;/h2&gt;&lt;p&gt;-r 参数相当于：remote&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -r
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;列出本地和远程分支&#34;&gt;列出本地和远程分支
&lt;/h2&gt;&lt;p&gt;-a 参数相当于：all&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看远程分支和本地分支的对应关系&#34;&gt;查看远程分支和本地分支的对应关系
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote show origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;远程删除了分支本地也想删除&#34;&gt;远程删除了分支本地也想删除
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote prune origin
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;创建并切换到本地分支&#34;&gt;创建并切换到本地分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b &amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从远程分支中创建并切换到本地分支&#34;&gt;从远程分支中创建并切换到本地分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除本地分支&#34;&gt;删除本地分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -d &amp;lt;local-branchname&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除远程分支&#34;&gt;删除远程分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin --delete &amp;lt;remote-branchname&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin :&amp;lt;remote-branchname&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;重命名本地分支&#34;&gt;重命名本地分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git branch -m &amp;lt;new-branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看标签&#34;&gt;查看标签
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git tag
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;展示当前分支的最近的 tag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git describe --tags --abbrev=0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看标签详细信息&#34;&gt;查看标签详细信息
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git tag -ln
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;本地创建标签&#34;&gt;本地创建标签
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git tag &amp;lt;version-number&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git tag -a &amp;lt;version-number&amp;gt; -m &amp;#34;v1.0 发布(描述)&amp;#34; &amp;lt;commit-id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;推送标签到远程仓库&#34;&gt;推送标签到远程仓库
&lt;/h2&gt;&lt;p&gt;首先要保证本地创建好了标签才可以推送标签到远程仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin &amp;lt;local-version-number&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一次性推送所有标签，同步到远程仓库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin --tags
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除本地标签&#34;&gt;删除本地标签
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git tag -d &amp;lt;tag-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除远程标签&#34;&gt;删除远程标签
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin --delete tag &amp;lt;tagname&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;切回到某个标签&#34;&gt;切回到某个标签
&lt;/h2&gt;&lt;p&gt;一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b branch_name tag_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;放弃工作区的修改&#34;&gt;放弃工作区的修改
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout &amp;lt;file-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;放弃所有修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;恢复删除的文件&#34;&gt;恢复删除的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rev-list -n 1 HEAD -- &amp;lt;file_path&amp;gt; #得到 deleting_commit
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout &amp;lt;deleting_commit&amp;gt;^ -- &amp;lt;file_path&amp;gt; #回到删除文件 deleting_commit 之前的状态
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;以新增一个-commit-的方式还原某一个-commit-的修改&#34;&gt;以新增一个 commit 的方式还原某一个 commit 的修改
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git revert &amp;lt;commit-id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;回到某个-commit-的状态并删除后面的-commit&#34;&gt;回到某个 commit 的状态，并删除后面的 commit
&lt;/h2&gt;&lt;p&gt;和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset &amp;lt;commit-id&amp;gt;  #默认就是-mixed参数。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --mixed HEAD^  #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --soft HEAD~3  #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --hard &amp;lt;commit-id&amp;gt;  #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;修改上一个-commit-的描述&#34;&gt;修改上一个 commit 的描述
&lt;/h2&gt;&lt;p&gt;如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit --amend
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看-commit-历史&#34;&gt;查看 commit 历史
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看某段代码是谁写的&#34;&gt;查看某段代码是谁写的
&lt;/h2&gt;&lt;p&gt;blame 的意思为‘责怪’，你懂的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git blame &amp;lt;file-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;显示本地更新过-head-的-git-命令记录&#34;&gt;显示本地更新过 HEAD 的 git 命令记录
&lt;/h2&gt;&lt;p&gt;每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。 这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reflog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;修改作者名&#34;&gt;修改作者名
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit --amend --author=&amp;#39;Author Name &amp;lt;email@address.com&amp;gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;修改远程仓库的-url&#34;&gt;修改远程仓库的 url
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote set-url origin &amp;lt;URL&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;增加远程仓库&#34;&gt;增加远程仓库
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin &amp;lt;remote-url&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;列出所有远程仓库&#34;&gt;列出所有远程仓库
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;查看两个星期内的改动&#34;&gt;查看两个星期内的改动
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git whatchanged --since=&amp;#39;2 weeks ago&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;把-a-分支的某一个-commit放到-b-分支上&#34;&gt;把 A 分支的某一个 commit，放到 B 分支上
&lt;/h2&gt;&lt;p&gt;这个过程需要 cherry-pick 命令，&lt;a class=&#34;link&#34; href=&#34;http://sg552.iteye.com/blog/1300713#bc2367928&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout &amp;lt;branch-name&amp;gt; &amp;amp;&amp;amp; git cherry-pick &amp;lt;commit-id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;简化命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.&amp;lt;handle&amp;gt; &amp;lt;command&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;比如：git status 改成 git st，这样可以简化命令
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global alias.st status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;存储当前的修改但不用提交-commit&#34;&gt;存储当前的修改，但不用提交 commit
&lt;/h2&gt;&lt;p&gt;详解可以参考&lt;a class=&#34;link&#34; href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;廖雪峰老师的 git 教程&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;保存当前状态包括-untracked-的文件&#34;&gt;保存当前状态，包括 untracked 的文件
&lt;/h2&gt;&lt;p&gt;untracked 文件：新建的文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示所有-stashes&#34;&gt;展示所有 stashes
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;回到某个-stash-的状态&#34;&gt;回到某个 stash 的状态
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash apply &amp;lt;stash@{n}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;回到最后一个-stash-的状态并删除这个-stash&#34;&gt;回到最后一个 stash 的状态，并删除这个 stash
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash pop
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除所有的-stash&#34;&gt;删除所有的 stash
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git stash clear
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从-stash-中拿出某个文件的修改&#34;&gt;从 stash 中拿出某个文件的修改
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout &amp;lt;stash@{n}&amp;gt; -- &amp;lt;file-path&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示所有-tracked-的文件&#34;&gt;展示所有 tracked 的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git ls-files -t
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示所有-untracked-的文件&#34;&gt;展示所有 untracked 的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git ls-files --others
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示所有忽略的文件&#34;&gt;展示所有忽略的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git ls-files --others -i --exclude-standard
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;强制删除-untracked-的文件&#34;&gt;强制删除 untracked 的文件
&lt;/h2&gt;&lt;p&gt;可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。clean 命令，&lt;strong&gt;注意两点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;clean 后，删除的文件无法找回&lt;/li&gt;
&lt;li&gt;不会影响 tracked 的文件的改动，只会删除 untracked 的文件&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clean &amp;lt;file-name&amp;gt; -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;强制删除-untracked-的目录&#34;&gt;强制删除 untracked 的目录
&lt;/h2&gt;&lt;p&gt;可以用来删除新建的目录，&lt;strong&gt;注意&lt;/strong&gt;:这个命令也可以用来删除 untracked 的文件。详情见上一条&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clean &amp;lt;directory-name&amp;gt; -df
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示简化的-commit-历史&#34;&gt;展示简化的 commit 历史
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --pretty=oneline --graph --decorate --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;把某一个分支导出成一个文件&#34;&gt;把某一个分支导出成一个文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git bundle create &amp;lt;file&amp;gt; &amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从包中导入分支&#34;&gt;从包中导入分支
&lt;/h2&gt;&lt;p&gt;新建一个分支，分支内容就是上面 git bundle create 命令导出的内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone repo.bundle &amp;lt;repo-dir&amp;gt; -b &amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;执行-rebase-之前自动-stash&#34;&gt;执行 rebase 之前自动 stash
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase --autostash
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;从远程仓库根据-id拉下某一状态到本地分支&#34;&gt;从远程仓库根据 ID，拉下某一状态，到本地分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch origin pull/&amp;lt;id&amp;gt;/head:&amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;详细展示一行中的修改&#34;&gt;详细展示一行中的修改
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff --word-diff
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;清除-gitignore-文件中记录的文件&#34;&gt;清除 gitignore 文件中记录的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clean -X -f
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示所有-alias-和-configs&#34;&gt;展示所有 alias 和 configs
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --local --list (当前目录)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global --list (全局)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示忽略的文件&#34;&gt;展示忽略的文件
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git status --ignored
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;commit-历史中显示-branch1-有的但是-branch2-没有-commit&#34;&gt;commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log Branch1 ^Branch2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;在-commit-log-中显示-gpg-签名&#34;&gt;在 commit log 中显示 GPG 签名
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --show-signature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;删除全局设置&#34;&gt;删除全局设置
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global --unset &amp;lt;entry-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;新建并切换到新分支上同时这个分支没有任何-commit&#34;&gt;新建并切换到新分支上，同时这个分支没有任何 commit
&lt;/h2&gt;&lt;p&gt;相当于保存修改，但是重写 commit 历史&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout --orphan &amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;展示任意分支某一文件的内容&#34;&gt;展示任意分支某一文件的内容
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git show &amp;lt;branch-name&amp;gt;:&amp;lt;file-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;clone-下来指定的单一分支&#34;&gt;clone 下来指定的单一分支
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone -b &amp;lt;branch-name&amp;gt; --single-branch &amp;lt;https://github.com/user/repo.git&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;clone-最新一次提交&#34;&gt;clone 最新一次提交
&lt;/h2&gt;&lt;p&gt;只会 clone 最近一次提交，将减少 clone 时间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone --depth=1 &amp;lt;https://github.com/user/repo.git&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;忽略某个文件的改动&#34;&gt;忽略某个文件的改动
&lt;/h2&gt;&lt;p&gt;关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git update-index --assume-unchanged path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;恢复 track 指定文件的改动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git update-index --no-assume-unchanged path/to/file
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;忽略文件的权限变化&#34;&gt;忽略文件的权限变化
&lt;/h2&gt;&lt;p&gt;不再将文件的权限变化视作改动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config core.fileMode false
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;以最后提交的顺序列出所有-git-分支&#34;&gt;以最后提交的顺序列出所有 Git 分支
&lt;/h2&gt;&lt;p&gt;最新的放在最上面&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git for-each-ref --sort=-committerdate --format=&amp;#39;%(refname:short)&amp;#39; refs/heads/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;在-commit-log-中查找相关内容&#34;&gt;在 commit log 中查找相关内容
&lt;/h2&gt;&lt;p&gt;通过 grep 查找，given-text：所需要查找的字段&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --all --grep=&amp;#39;&amp;lt;given-text&amp;gt;&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;把暂存区的指定-file-放到工作区中&#34;&gt;把暂存区的指定 file 放到工作区中
&lt;/h2&gt;&lt;p&gt;不添加参数，默认是 -mixed&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset &amp;lt;file-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;强制推送&#34;&gt;强制推送
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -f &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>12. 动态内存</title>
        <link>https://Salmooo.github.io/p/12.-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
        <pubDate>Mon, 30 Jul 2018 23:27:45 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/12.-%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
        <description>&lt;h1 id=&#34;第八章-io库&#34;&gt;第八章 IO库
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md前面章节已经在用的io库设施前面章节已经在用的io库设施&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e5%89%8d%e9%9d%a2%e7%ab%a0%e8%8a%82%e5%b7%b2%e7%bb%8f%e5%9c%a8%e7%94%a8%e7%9a%84io%e5%ba%93%e8%ae%be%e6%96%bd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;前面章节已经在用的IO库设施
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;istream&lt;/strong&gt;：输入流类型，提供输入操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ostream&lt;/strong&gt;：输出流类型，提供输出操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cin&lt;/strong&gt;：一个&lt;code&gt;istream&lt;/code&gt;对象，从标准输入读取数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cout&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准输出写入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cerr&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准错误写入消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&amp;gt;运算符&lt;/strong&gt;：用来从一个&lt;code&gt;istream&lt;/code&gt;对象中读取输入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;laquo;运算符&lt;/strong&gt;：用来向一个&lt;code&gt;ostream&lt;/code&gt;对象中写入输出数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getline函数&lt;/strong&gt;：从一个给定的&lt;code&gt;istream&lt;/code&gt;对象中读取一行数据，存入到一个给定的&lt;code&gt;string&lt;/code&gt;对象中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio类io类&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e7%b1%bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO类
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md标准库定义的io类型标准库定义的io类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%a0%87%e5%87%86%e5%ba%93%e5%ae%9a%e4%b9%89%e7%9a%84io%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;标准库定义的IO类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;头文件：从标准流中读写数据，&lt;code&gt;istream&lt;/code&gt;、&lt;code&gt;ostream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;头文件：从文件中读写数据，&lt;code&gt;ifstream&lt;/code&gt;、&lt;code&gt;ofstream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream&lt;/code&gt;头文件：从字符串中读写数据，&lt;code&gt;istringstream&lt;/code&gt;、&lt;code&gt;ostringstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio对象不可复制或赋值io对象不可复制或赋值&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e5%af%b9%e8%b1%a1%e4%b8%8d%e5%8f%af%e5%a4%8d%e5%88%b6%e6%88%96%e8%b5%8b%e5%80%bc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO对象不可复制或赋值
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.IO对象不能存在容器里.&lt;/li&gt;
&lt;li&gt;2.形参和返回类型也不能是流类型。&lt;/li&gt;
&lt;li&gt;3.形参和返回类型一般是流的&lt;strong&gt;引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;4.读写一个IO对象会改变其状态，因此传递和返回的引用不能是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md条件状态条件状态&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%9d%a1%e4%bb%b6%e7%8a%b6%e6%80%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;条件状态
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;状态&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:iostate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;是一种机器无关的&lt;strong&gt;类型&lt;/strong&gt;，提供了表达条件状态的完整功能&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:badbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流已经崩溃&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:failbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出一个IO操作失败了&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:eofbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流到达了文件结束&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:goodbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流未处于错误状态，此值保证为零&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.eof()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;eofbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.fail()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;failbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.bad()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;badbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.good()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;处于有效状态，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中所有条件状态位复位，将流的状态设置成有效，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中指定的条件状态位复位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.setstate(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;根据给定的标志位，将流&lt;code&gt;s&lt;/code&gt;中对应的条件状态位置位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.rdstate()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回流&lt;code&gt;s&lt;/code&gt;的当前条件状态，返回值类型为&lt;code&gt;strm::iostate&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;strm&lt;/code&gt;是一种IO类型，（如&lt;code&gt;istream&lt;/code&gt;）， &lt;code&gt;s&lt;/code&gt;是一个流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md管理输出缓冲管理输出缓冲&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e7%ae%a1%e7%90%86%e8%be%93%e5%87%ba%e7%bc%93%e5%86%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;管理输出缓冲
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。&lt;/li&gt;
&lt;li&gt;刷新缓冲区，可以使用如下IO操纵符：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;：输出一个换行符并刷新缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;：刷新流，单不添加任何字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends&lt;/code&gt;：在缓冲区插入空字符&lt;code&gt;null&lt;/code&gt;，然后刷新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unitbuf&lt;/code&gt;：告诉流接下来每次操作之后都要进行一次&lt;code&gt;flush&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nounitbuf&lt;/code&gt;：回到正常的缓冲方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件输入输出文件输入输出&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件输入输出
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;fstream&lt;/code&gt;定义了三个类型来支持文件IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;从一个给定文件读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;向一个给定文件写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;可以读写给定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件流&lt;/strong&gt;：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdfstream特有的操作fstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#fstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;fstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个未绑定的文件流。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个文件流，并打开名为&lt;code&gt;s&lt;/code&gt;的文件，&lt;code&gt;s&lt;/code&gt;可以是&lt;code&gt;string&lt;/code&gt;也可以是&lt;code&gt;char&lt;/code&gt;指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s, mode);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;与前一个构造函数类似，但按指定&lt;code&gt;mode&lt;/code&gt;打开文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.open(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开名为&lt;code&gt;s&lt;/code&gt;的文件，并和&lt;code&gt;fstrm&lt;/code&gt;绑定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.close()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关闭和&lt;code&gt;fstrm&lt;/code&gt;绑定的文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.is_open()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个&lt;code&gt;bool&lt;/code&gt;值，指出与&lt;code&gt;fstrm&lt;/code&gt;关联的文件是否成功打开且尚未关闭&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;fstream&lt;/code&gt;是头文件&lt;code&gt;fstream&lt;/code&gt;中定义的一个类型，&lt;code&gt;fstrm&lt;/code&gt;是一个文件流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件模式文件模式&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e6%a8%a1%e5%bc%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件模式
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;文件模式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以读的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以写的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;app&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;每次写操作前均定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开文件后立即定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;截断文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以二进制方式进行IO操作。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstring流string流&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#string%e6%b5%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string流
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;sstream&lt;/code&gt;定义了三个类型来支持内存IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istringstream&lt;/code&gt;从&lt;code&gt;string&lt;/code&gt;读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostringstream&lt;/code&gt;向&lt;code&gt;string&lt;/code&gt;写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringstream&lt;/code&gt;可以读写给定&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstringstream特有的操作stringstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#stringstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;stringstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;定义一个未绑定的&lt;code&gt;stringstream&lt;/code&gt;对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;s&lt;/code&gt;初始化对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;strm&lt;/code&gt;所保存的&lt;code&gt;string&lt;/code&gt;的拷贝&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;拷贝到&lt;code&gt;strm&lt;/code&gt;中，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中&lt;code&gt;sstream&lt;/code&gt;是头文件&lt;code&gt;sstream&lt;/code&gt;中任意一个类型。&lt;code&gt;s&lt;/code&gt;是一个&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>11.关联容器</title>
        <link>https://Salmooo.github.io/p/11.%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
        <pubDate>Mon, 30 Jul 2018 23:16:32 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/11.%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
        <description>&lt;h1 id=&#34;第十一章-关联容器&#34;&gt;第十一章 关联容器
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;关联容器和顺序容器的不同：关联容器中的元素时按照&lt;strong&gt;关键字&lt;/strong&gt;来保存和访问的。&lt;/li&gt;
&lt;li&gt;关联容器支持通过关键字来高效地查找和读取元素，基本的关联容器类型是 &lt;code&gt;map&lt;/code&gt;和 &lt;code&gt;set&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关联容器类型&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;容器类型&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;按顺序存储&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关键数组：保存&lt;code&gt;关键字-值&lt;/code&gt;对&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关键字即值，即只保存关键字的容器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;multimap&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;支持同一个键多次出现的&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;multiset&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;支持同一个键多次出现的&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;无序集合&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用哈希函数组织的&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用哈希函数组织的&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;哈希组织的&lt;code&gt;map&lt;/code&gt;，关键字可以重复出现&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;哈希组织的&lt;code&gt;set&lt;/code&gt;，关键字可以重复出现&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md关联容器概述关联容器概述&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%85%b3%e8%81%94%e5%ae%b9%e5%99%a8%e6%a6%82%e8%bf%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;关联容器概述
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md定义关联容器定义关联容器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%ae%9a%e4%b9%89%e5%85%b3%e8%81%94%e5%ae%b9%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义关联容器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需要指定元素类型。&lt;/li&gt;
&lt;li&gt;列表初始化：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;：&lt;code&gt;map&amp;lt;string, int&amp;gt; word_count = {{&amp;quot;a&amp;quot;, 1}, {&amp;quot;b&amp;quot;, 2}};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;：&lt;code&gt;set&amp;lt;string&amp;gt; exclude = {&amp;quot;the&amp;quot;, &amp;quot;a&amp;quot;};&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md关键字类型的要求关键字类型的要求&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%85%b3%e9%94%ae%e5%ad%97%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%a6%81%e6%b1%82&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;关键字类型的要求
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于有序容器，关键字类型必须定义元素比较的方法。默认是&lt;code&gt;&amp;lt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果想传递一个比较的函数，可以这样定义：&lt;code&gt;multiset&amp;lt;Sales_data, decltype(compareIsbn)*&amp;gt; bookstore(compareIsbn);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11mdpairpair&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#pair&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;pair
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;utility&lt;/code&gt;头文件中定义。&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;pair&lt;/code&gt;保存两个数据成员，两个类型不要求一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pair的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt; p;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;p&lt;/code&gt;是一个&lt;code&gt;pair&lt;/code&gt;，两个类型分别是&lt;code&gt;T1&lt;/code&gt;和&lt;code&gt;T2&lt;/code&gt;的成员都进行了值初始化。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt; p(v1, v2);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;first&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;分别用&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;进行初始化。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;p = {v1, v2};&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于`p(v1, v2)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;make_pair(v1, v2);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;pair&lt;/code&gt;的类型从&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;的类型推断出来。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;p.first&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的名为&lt;code&gt;first&lt;/code&gt;的数据成员。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;p.second&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的名为&lt;code&gt;second&lt;/code&gt;的数据成员。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;p1 relop p2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;运算关系符按字典序定义。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;p1 == p2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;必须两对元素两两相等&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;p1 != p2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md关联容器操作关联容器操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%85%b3%e8%81%94%e5%ae%b9%e5%99%a8%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;关联容器操作
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;关联容器额外的类型别名&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型别名&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;此容器类型的关键字类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;每个关键字关联的类型，只适用于&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;对于&lt;code&gt;map&lt;/code&gt;，是&lt;code&gt;pair&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt;; 对于&lt;code&gt;set&lt;/code&gt;，和&lt;code&gt;key_type&lt;/code&gt;相同。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md关联容器迭代器关联容器迭代器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%85%b3%e8%81%94%e5%ae%b9%e5%99%a8%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;关联容器迭代器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;解引用一个关联容器迭代器时，会得到一个类型为容器的&lt;code&gt;value_type&lt;/code&gt;的值的引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;的迭代器是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;遍历关联容器：使用&lt;code&gt;begin&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;，遍历&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;时，迭代器按&lt;strong&gt;关键字升序&lt;/strong&gt;遍历元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md添加元素添加元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e6%b7%bb%e5%8a%a0%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;添加元素
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关联容器&lt;code&gt;insert&lt;/code&gt;操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;code&gt;insert&lt;/code&gt;操作&lt;/th&gt;
          &lt;th&gt;关联容器&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(v)&lt;/code&gt; &lt;code&gt;c.emplace(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v&lt;/code&gt;是&lt;code&gt;value_type&lt;/code&gt;类型的对象；&lt;code&gt;args&lt;/code&gt;用来构造一个元素。 对于&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;，只有元素的关键字不存在&lt;code&gt;c&lt;/code&gt;中才插入或构造元素。函数返回一个&lt;code&gt;pair&lt;/code&gt;，包含一个迭代器，指向具有指定关键字的元素，以及一个指示插入是否成功的&lt;code&gt;bool&lt;/code&gt;值。对于&lt;code&gt;multimap&lt;/code&gt;和&lt;code&gt;multiset&lt;/code&gt;则会插入范围中的每个元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(b, e)&lt;/code&gt; &lt;code&gt;c.insert(il)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;是迭代器，表示一个&lt;code&gt;c::value_type&lt;/code&gt;�类型值的范围；&lt;code&gt;il&lt;/code&gt;是这种值的花括号列表。函数返回&lt;code&gt;void&lt;/code&gt;。对于 &lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;，只插入关键字不在&lt;code&gt;c&lt;/code&gt;中的元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(p, v)&lt;/code&gt; &lt;code&gt;c.emplace(p, args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;类似&lt;code&gt;insert(v)&lt;/code&gt;，但将迭代器&lt;code&gt;p&lt;/code&gt;作为一个提示，指出从哪里开始搜索新元素应该存储的位置。返回一个迭代器，指向具有给定关键字的元素。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;向&lt;code&gt;map&lt;/code&gt;添加元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word_count.insert({word, 1});&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(make_pair(word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(pair&amp;lt;string, size_t&amp;gt;(word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(map&amp;lt;string, size_t&amp;gt;::value_type (word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md删除元素删除元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;删除元素
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;从关联容器中删除元素&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.erase(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;c&lt;/code&gt;中删除每个关键字为&lt;code&gt;k&lt;/code&gt;的元素。返回一个&lt;code&gt;size_type&lt;/code&gt;值，指出删除的元素的数量。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.erase(p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;c&lt;/code&gt;中删除迭代器&lt;code&gt;p&lt;/code&gt;指定的元素。&lt;code&gt;p&lt;/code&gt;必须指向&lt;code&gt;c&lt;/code&gt;中一个真实元素，不能等于&lt;code&gt;c.end()&lt;/code&gt;。返回一个指向&lt;code&gt;p&lt;/code&gt;之后元素的迭代器，若&lt;code&gt;p&lt;/code&gt;指向&lt;code&gt;c&lt;/code&gt;中的尾元素，则返回&lt;code&gt;c.end()&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.erase(b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除迭代器对&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;所表示范围中的元素。返回&lt;code&gt;e&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md下标操作下标操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e4%b8%8b%e6%a0%87%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;下标操作
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;的下标操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c[k]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回关键字为&lt;code&gt;k&lt;/code&gt;的元素；如果&lt;code&gt;k&lt;/code&gt;不在&lt;code&gt;c&lt;/code&gt;中，添加一个关键字为&lt;code&gt;k&lt;/code&gt;的元素，对其值初始化。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.at(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;访问关键字为&lt;code&gt;k&lt;/code&gt;的元素，带参数检查；若&lt;code&gt;k&lt;/code&gt;不存在在&lt;code&gt;c&lt;/code&gt;中，抛出一个&lt;code&gt;out_of_range&lt;/code&gt;异常。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md查找元素查找元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e6%9f%a5%e6%89%be%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;查找元素
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在一个关联容器中查找元素&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.find(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个迭代器，指向第一个关键字为&lt;code&gt;k&lt;/code&gt;的元素，若&lt;code&gt;k&lt;/code&gt;不在容器中，则返回尾后迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.count(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回关键字等于&lt;code&gt;k&lt;/code&gt;的元素的数量。对于不允许重复关键字的容器，返回值永远是0或1。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.lower_bound(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个迭代器，指向第一个关键字&lt;strong&gt;不小于&lt;/strong&gt;&lt;code&gt;k&lt;/code&gt;的元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.upper_bound(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个迭代器，指向第一个关键字&lt;strong&gt;大于&lt;/strong&gt;&lt;code&gt;k&lt;/code&gt;的元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.equal_range(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个迭代器&lt;code&gt;pair&lt;/code&gt;，表示关键字等于&lt;code&gt;k&lt;/code&gt;的元素的范围。若&lt;code&gt;k&lt;/code&gt;不存在，&lt;code&gt;pair&lt;/code&gt;的两个成员均等于&lt;code&gt;c.end()&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower_bound&lt;/code&gt;和&lt;code&gt;upper_bound&lt;/code&gt;不适用于无序容器。&lt;/li&gt;
&lt;li&gt;下标和&lt;code&gt;at&lt;/code&gt;操作只适用于非&lt;code&gt;const&lt;/code&gt;的&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch11md无序容器无序容器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch11.md#%e6%97%a0%e5%ba%8f%e5%ae%b9%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;无序容器
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有序容器使用比较运算符来组织元素；无序容器使用哈希函数和关键字类型的&lt;code&gt;==&lt;/code&gt;运算符。&lt;/li&gt;
&lt;li&gt;理论上哈希技术可以获得更好的性能。&lt;/li&gt;
&lt;li&gt;无序容器在存储上组织为一组桶(bucket)，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;无序容器管理操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;桶接口&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.bucket_count()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;正在使用的桶的数目&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.max_bucket_count()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;容器能容纳的最多的桶的数目&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.bucket_size(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;第&lt;code&gt;n&lt;/code&gt;个桶中有多少个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.bucket(k)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关键字为&lt;code&gt;k&lt;/code&gt;的元素在哪个桶中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;桶迭代&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;local_iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;可以用来访问桶中元素的迭代器类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;const_local_iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;桶迭代器的&lt;code&gt;const&lt;/code&gt;版本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.begin(n)&lt;/code&gt;，&lt;code&gt;c.end(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;桶&lt;code&gt;n&lt;/code&gt;的首元素迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.cbegin(n)&lt;/code&gt;，&lt;code&gt;c.cend(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;与前两个函数类似，但返回&lt;code&gt;const_local_iterator&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;哈希策略&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.load_factor()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;每个桶的平均元素数量，返回&lt;code&gt;float&lt;/code&gt;值。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.max_load_factor()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;c&lt;/code&gt;试图维护的平均比桶大小，返回&lt;code&gt;float&lt;/code&gt;值。&lt;code&gt;c&lt;/code&gt;会在需要时添加新的桶，以使得&lt;code&gt;load_factor&amp;lt;=max_load_factor&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.rehash(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;重组存储，使得&lt;code&gt;bucket_count&amp;gt;=n&lt;/code&gt;，且&lt;code&gt;bucket_count&amp;gt;size/max_load_factor&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.reverse(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;重组存储，使得&lt;code&gt;c&lt;/code&gt;可以保存&lt;code&gt;n&lt;/code&gt;个元素且不必&lt;code&gt;rehash&lt;/code&gt;。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>8. IO库</title>
        <link>https://Salmooo.github.io/p/8.-io%E5%BA%93/</link>
        <pubDate>Mon, 30 Jul 2018 22:19:10 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/8.-io%E5%BA%93/</guid>
        <description>&lt;h1 id=&#34;第八章-io库&#34;&gt;第八章 IO库
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md前面章节已经在用的io库设施前面章节已经在用的io库设施&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e5%89%8d%e9%9d%a2%e7%ab%a0%e8%8a%82%e5%b7%b2%e7%bb%8f%e5%9c%a8%e7%94%a8%e7%9a%84io%e5%ba%93%e8%ae%be%e6%96%bd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;前面章节已经在用的IO库设施
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;istream&lt;/strong&gt;：输入流类型，提供输入操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ostream&lt;/strong&gt;：输出流类型，提供输出操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cin&lt;/strong&gt;：一个&lt;code&gt;istream&lt;/code&gt;对象，从标准输入读取数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cout&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准输出写入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cerr&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准错误写入消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&amp;gt;运算符&lt;/strong&gt;：用来从一个&lt;code&gt;istream&lt;/code&gt;对象中读取输入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;laquo;运算符&lt;/strong&gt;：用来向一个&lt;code&gt;ostream&lt;/code&gt;对象中写入输出数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getline函数&lt;/strong&gt;：从一个给定的&lt;code&gt;istream&lt;/code&gt;对象中读取一行数据，存入到一个给定的&lt;code&gt;string&lt;/code&gt;对象中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio类io类&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e7%b1%bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO类
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md标准库定义的io类型标准库定义的io类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%a0%87%e5%87%86%e5%ba%93%e5%ae%9a%e4%b9%89%e7%9a%84io%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;标准库定义的IO类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;头文件：从标准流中读写数据，&lt;code&gt;istream&lt;/code&gt;、&lt;code&gt;ostream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;头文件：从文件中读写数据，&lt;code&gt;ifstream&lt;/code&gt;、&lt;code&gt;ofstream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream&lt;/code&gt;头文件：从字符串中读写数据，&lt;code&gt;istringstream&lt;/code&gt;、&lt;code&gt;ostringstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio对象不可复制或赋值io对象不可复制或赋值&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e5%af%b9%e8%b1%a1%e4%b8%8d%e5%8f%af%e5%a4%8d%e5%88%b6%e6%88%96%e8%b5%8b%e5%80%bc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO对象不可复制或赋值
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.IO对象不能存在容器里.&lt;/li&gt;
&lt;li&gt;2.形参和返回类型也不能是流类型。&lt;/li&gt;
&lt;li&gt;3.形参和返回类型一般是流的&lt;strong&gt;引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;4.读写一个IO对象会改变其状态，因此传递和返回的引用不能是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md条件状态条件状态&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%9d%a1%e4%bb%b6%e7%8a%b6%e6%80%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;条件状态
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;状态&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:iostate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;是一种机器无关的&lt;strong&gt;类型&lt;/strong&gt;，提供了表达条件状态的完整功能&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:badbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流已经崩溃&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:failbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出一个IO操作失败了&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:eofbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流到达了文件结束&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:goodbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流未处于错误状态，此值保证为零&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.eof()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;eofbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.fail()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;failbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.bad()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;badbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.good()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;处于有效状态，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中所有条件状态位复位，将流的状态设置成有效，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中指定的条件状态位复位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.setstate(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;根据给定的标志位，将流&lt;code&gt;s&lt;/code&gt;中对应的条件状态位置位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.rdstate()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回流&lt;code&gt;s&lt;/code&gt;的当前条件状态，返回值类型为&lt;code&gt;strm::iostate&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;strm&lt;/code&gt;是一种IO类型，（如&lt;code&gt;istream&lt;/code&gt;）， &lt;code&gt;s&lt;/code&gt;是一个流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md管理输出缓冲管理输出缓冲&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e7%ae%a1%e7%90%86%e8%be%93%e5%87%ba%e7%bc%93%e5%86%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;管理输出缓冲
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。&lt;/li&gt;
&lt;li&gt;刷新缓冲区，可以使用如下IO操纵符：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;：输出一个换行符并刷新缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;：刷新流，单不添加任何字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends&lt;/code&gt;：在缓冲区插入空字符&lt;code&gt;null&lt;/code&gt;，然后刷新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unitbuf&lt;/code&gt;：告诉流接下来每次操作之后都要进行一次&lt;code&gt;flush&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nounitbuf&lt;/code&gt;：回到正常的缓冲方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件输入输出文件输入输出&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件输入输出
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;fstream&lt;/code&gt;定义了三个类型来支持文件IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;从一个给定文件读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;向一个给定文件写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;可以读写给定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件流&lt;/strong&gt;：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdfstream特有的操作fstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#fstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;fstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个未绑定的文件流。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个文件流，并打开名为&lt;code&gt;s&lt;/code&gt;的文件，&lt;code&gt;s&lt;/code&gt;可以是&lt;code&gt;string&lt;/code&gt;也可以是&lt;code&gt;char&lt;/code&gt;指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s, mode);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;与前一个构造函数类似，但按指定&lt;code&gt;mode&lt;/code&gt;打开文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.open(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开名为&lt;code&gt;s&lt;/code&gt;的文件，并和&lt;code&gt;fstrm&lt;/code&gt;绑定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.close()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关闭和&lt;code&gt;fstrm&lt;/code&gt;绑定的文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.is_open()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个&lt;code&gt;bool&lt;/code&gt;值，指出与&lt;code&gt;fstrm&lt;/code&gt;关联的文件是否成功打开且尚未关闭&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;fstream&lt;/code&gt;是头文件&lt;code&gt;fstream&lt;/code&gt;中定义的一个类型，&lt;code&gt;fstrm&lt;/code&gt;是一个文件流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件模式文件模式&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e6%a8%a1%e5%bc%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件模式
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;文件模式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以读的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以写的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;app&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;每次写操作前均定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开文件后立即定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;截断文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以二进制方式进行IO操作。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstring流string流&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#string%e6%b5%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string流
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;sstream&lt;/code&gt;定义了三个类型来支持内存IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istringstream&lt;/code&gt;从&lt;code&gt;string&lt;/code&gt;读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostringstream&lt;/code&gt;向&lt;code&gt;string&lt;/code&gt;写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringstream&lt;/code&gt;可以读写给定&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstringstream特有的操作stringstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#stringstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;stringstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;定义一个未绑定的&lt;code&gt;stringstream&lt;/code&gt;对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;s&lt;/code&gt;初始化对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;strm&lt;/code&gt;所保存的&lt;code&gt;string&lt;/code&gt;的拷贝&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;拷贝到&lt;code&gt;strm&lt;/code&gt;中，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中&lt;code&gt;sstream&lt;/code&gt;是头文件&lt;code&gt;sstream&lt;/code&gt;中任意一个类型。&lt;code&gt;s&lt;/code&gt;是一个&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>9. 顺序容器</title>
        <link>https://Salmooo.github.io/p/9.-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</link>
        <pubDate>Mon, 30 Jul 2018 21:37:20 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/9.-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</guid>
        <description>&lt;h1 id=&#34;第八章-io库&#34;&gt;第八章 IO库
&lt;/h1&gt;&lt;h1 id=&#34;第九章-顺序容器&#34;&gt;第九章 顺序容器
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md顺序容器概述顺序容器概述&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e9%a1%ba%e5%ba%8f%e5%ae%b9%e5%99%a8%e6%a6%82%e8%bf%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;顺序容器概述
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺序容器&lt;/strong&gt;（sequential container）：为程序员提供了控制元素存储和访问顺序的能力。这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md顺序容器类型顺序容器类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e9%a1%ba%e5%ba%8f%e5%ae%b9%e5%99%a8%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;顺序容器类型
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;容器类型&lt;/th&gt;
          &lt;th&gt;介绍&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;deque&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;双向链表。只支持双向顺序访问。在&lt;code&gt;list&lt;/code&gt;中任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;forward_list&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;固定大小数组。支持快速随机访问。不能添加或者删除元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;与&lt;code&gt;vector&lt;/code&gt;相似的容器，但专门用于保存字符。随机访问块。在尾部插入/删除速度快。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;除了固定大小的&lt;code&gt;array&lt;/code&gt;外，其他容器都提供高效、灵活的内存管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;和&lt;code&gt;array&lt;/code&gt;是新C++标准增加的类型。&lt;/li&gt;
&lt;li&gt;通常使用&lt;code&gt;vector&lt;/code&gt;是最好的选择，除非你有很好的理由选择其他容器。&lt;/li&gt;
&lt;li&gt;新标准库的容器比旧版的快得多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md容器操作容器操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%ae%b9%e5%99%a8%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;容器操作
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md类型类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类型
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;此容器类型的迭代器类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;可以读取元素但不能修改元素的迭代器类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;无符号整数类型，足够保存此种容器类型最大可能的大小&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;带符号整数类型，足够保存两个迭代器之间的距离&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;元素类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;元素的左值类型；和&lt;code&gt;value_type &amp;amp;&lt;/code&gt;含义相同&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;元素的&lt;code&gt;const&lt;/code&gt;左值类型，即&lt;code&gt;const value_type &amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md构造函数构造函数&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;构造函数
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;默认构造函数，构造空容器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c1(c2);&lt;/code&gt;或&lt;code&gt;C c1 = c2;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;构造&lt;code&gt;c2&lt;/code&gt;的拷贝&lt;code&gt;c1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c(b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;构造&lt;code&gt;c&lt;/code&gt;，将迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;指定范围内的所有元素拷贝到&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c(a, b, c...)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;列表初始化&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;只支持顺序容器，且不包括&lt;code&gt;array&lt;/code&gt;，包含&lt;code&gt;n&lt;/code&gt;个元素，这些元素进行了值初始化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;C c(n, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;包含&lt;code&gt;n&lt;/code&gt;个初始值为&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;只有顺序容器的构造函数才接受大小参数，关联容器并不支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;具有固定大小。&lt;/li&gt;
&lt;li&gt;和其他容器不同，默认构造的&lt;code&gt;array&lt;/code&gt;是非空的。&lt;/li&gt;
&lt;li&gt;直接复制：将一个容器复制给另一个容器时，类型必须匹配：容器类型和元素类型都必须相同。&lt;/li&gt;
&lt;li&gt;使用迭代器复制：不要求容器类型相同，容器内的元素类型也可以不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md赋值和swap赋值和swap&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e8%b5%8b%e5%80%bc%e5%92%8cswap&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;赋值和&lt;code&gt;swap&lt;/code&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c1 = c2;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;c1&lt;/code&gt;中的元素替换成&lt;code&gt;c2&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c1 = {a, b, c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;c1&lt;/code&gt;中的元素替换成列表中的元素（不适用于&lt;code&gt;array&lt;/code&gt;）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;交换&lt;code&gt;c1&lt;/code&gt;和&lt;code&gt;c2&lt;/code&gt;的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;swap(c1, c2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.assign(b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换成迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;表示范围中的元素，&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;不能指向&lt;code&gt;c&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.assign(il)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换成初始化列表&lt;code&gt;il&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.assign(n, r)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换为&lt;code&gt;n&lt;/code&gt;个值是&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用非成员版本的&lt;code&gt;swap&lt;/code&gt;是一个好习惯。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt;操作不适用于关联容器和&lt;code&gt;array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md大小大小&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%a4%a7%e5%b0%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;大小
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;c&lt;/code&gt;中元素的数目（不支持&lt;code&gt;forward_list&lt;/code&gt;）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.max_size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;c&lt;/code&gt;中可保存的最大元素数目&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.empty()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若&lt;code&gt;c&lt;/code&gt;中存储了元素，返回&lt;code&gt;false&lt;/code&gt;，否则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md添加元素添加元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e6%b7%bb%e5%8a%a0%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;添加元素
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.push_back(t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;c&lt;/code&gt;尾部创建一个值为&lt;code&gt;t&lt;/code&gt;的元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.emplace_back(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.push_front(t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;c&lt;/code&gt;头部创建一个值为&lt;code&gt;t&lt;/code&gt;的元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.emplace_front(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(p, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;指向的元素之前创建一个值是&lt;code&gt;t&lt;/code&gt;的元素，返回指向新元素的迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.emplace(p, args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(p, n, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;指向的元素之前插入&lt;code&gt;n&lt;/code&gt;个值为&lt;code&gt;t&lt;/code&gt;的元素，返回指向第一个新元素的迭代器；如果&lt;code&gt;n&lt;/code&gt;是0，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(p, b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;范围内的元素，插入到&lt;code&gt;p&lt;/code&gt;指向的元素之前；如果范围为空，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.insert(p, il)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;il&lt;/code&gt;是一个花括号包围中的元素值列表，将其插入到&lt;code&gt;p&lt;/code&gt;指向的元素之前；如果&lt;code&gt;il&lt;/code&gt;是空，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;因为这些操作会改变大小，因此不适用于&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;有自己专有版本的&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;emplace&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;不支持&lt;code&gt;push_back&lt;/code&gt;和&lt;code&gt;emplace_back&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当我们用一个对象去初始化容器或者将对象插入到容器时，实际上放入的是对象的拷贝。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace&lt;/code&gt;开头的函数是新标准引入的，这些操作是构造而不是拷贝元素。&lt;/li&gt;
&lt;li&gt;传递给&lt;code&gt;emplace&lt;/code&gt;的参数必须和元素类型的构造函数相匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md访问元素访问元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e8%ae%bf%e9%97%ae%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;访问元素
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.back()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中尾元素的引用。若&lt;code&gt;c&lt;/code&gt;为空，函数行为未定义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.front()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中头元素的引用。若&lt;code&gt;c&lt;/code&gt;为空，函数行为未定义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c[n]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中下标是&lt;code&gt;n&lt;/code&gt;的元素的引用，&lt;code&gt;n&lt;/code&gt;时候一个无符号证书。若&lt;code&gt;n&amp;gt;=c.size()&lt;/code&gt;，则函数行为未定义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.at(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回下标为&lt;code&gt;n&lt;/code&gt;的元素引用。如果下标越界，则抛出&lt;code&gt;out_of_range&lt;/code&gt;异常&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;访问成员函数返回的是引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;at&lt;/code&gt;和下标操作只适用于&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;deque&lt;/code&gt;、&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;back&lt;/code&gt;不适用于&lt;code&gt;forward_list&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果希望下标是合法的，可以使用&lt;code&gt;at&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md删除元素删除元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%88%a0%e9%99%a4%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;删除元素
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.pop_back()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中尾元素，若&lt;code&gt;c&lt;/code&gt;为空，则函数行为未定义。函数返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.pop_front()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中首元素，若&lt;code&gt;c&lt;/code&gt;为空，则函数行为未定义。函数返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.erase(p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除迭代器&lt;code&gt;p&lt;/code&gt;指向的元素，返回一个指向被删除元素之后的元素的迭代器，若&lt;code&gt;p&lt;/code&gt;本身是尾后迭代器，则函数行为未定义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.erase(b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;范围内的元素，返回指向最后一个被删元素之后元素的迭代器，若&lt;code&gt;e&lt;/code&gt;本身就是尾后迭代器，则返回尾后迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.clear()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中所有元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;会改变容器大小，不适用于&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;有特殊版本的&lt;code&gt;erase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;不支持&lt;code&gt;pop_back&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;不支持&lt;code&gt;pop_front&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md特殊的forwad_list操作特殊的forwad_list操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e7%89%b9%e6%ae%8a%e7%9a%84forwad_list%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;特殊的forwad_list操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;链表在删除元素时需要修改前置节点的内容，双向链表会前驱的指针，但是单向链表没有保存，因此需要增加获取前置节点的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;定义了&lt;code&gt;before_begin&lt;/code&gt;，即首前（off-the-begining）迭代器，允许我们再在首元素之前添加或删除元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.before_begin()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回指向链表首元素之前不存在的元素的迭代器，此迭代器不能解引用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.cbefore_begin()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上，但是返回的是常量迭代器。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.insert_after(p, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。&lt;code&gt;t&lt;/code&gt;是一个对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.insert_after(p, n, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。&lt;code&gt;t&lt;/code&gt;是一个对象，&lt;code&gt;n&lt;/code&gt;是数量。若&lt;code&gt;n&lt;/code&gt;是0则函数行为未定义&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.insert_after(p, b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。由迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;指定范围。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.insert_after(p, il)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。由&lt;code&gt;il&lt;/code&gt;指定初始化列表。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;emplace_after(p, args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;使用&lt;code&gt;args&lt;/code&gt;在&lt;code&gt;p&lt;/code&gt;之后的位置，创建一个元素，返回一个指向这个新元素的迭代器。若&lt;code&gt;p&lt;/code&gt;为尾后迭代器，则函数行为未定义。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.erase_after(p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除&lt;code&gt;p&lt;/code&gt;指向位置之后的元素，返回一个指向被删元素之后的元素的迭代器，若&lt;code&gt;p&lt;/code&gt;指向&lt;code&gt;lst&lt;/code&gt;的尾元素或者是一个尾后迭代器，则函数行为未定义。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;lst.erase_after(b, e)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;类似上面，删除对象换成从&lt;code&gt;b&lt;/code&gt;到&lt;code&gt;e&lt;/code&gt;指定的范围。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md改变容器大小改变容器大小&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e6%94%b9%e5%8f%98%e5%ae%b9%e5%99%a8%e5%a4%a7%e5%b0%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;改变容器大小
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.resize(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;调整&lt;code&gt;c&lt;/code&gt;的大小为&lt;code&gt;n&lt;/code&gt;个元素，若&lt;code&gt;n&amp;lt;c.size()&lt;/code&gt;，则多出的元素被丢弃。若必须添加新元素，对新元素进行值初始化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.resize(n, t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;调整&lt;code&gt;c&lt;/code&gt;的大小为&lt;code&gt;n&lt;/code&gt;个元素，任何新添加的元素都初始化为值&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md获取迭代器获取迭代器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e8%8e%b7%e5%8f%96%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;获取迭代器
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.begin()&lt;/code&gt;, &lt;code&gt;c.end()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回指向&lt;code&gt;c&lt;/code&gt;的首元素和尾元素之后位置的迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.cbegin()&lt;/code&gt;, &lt;code&gt;c.cend()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;以&lt;code&gt;c&lt;/code&gt;开头的版本是C++11新标准引入的&lt;/li&gt;
&lt;li&gt;当不需要写访问时，应该使用&lt;code&gt;cbegin&lt;/code&gt;和&lt;code&gt;cend&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md反向容器的额外成员反向容器的额外成员&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%8f%8d%e5%90%91%e5%ae%b9%e5%99%a8%e7%9a%84%e9%a2%9d%e5%a4%96%e6%88%90%e5%91%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;反向容器的额外成员
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;按逆序寻址元素的迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;不能修改元素的逆序迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.rbegin()&lt;/code&gt;, &lt;code&gt;c.rend()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回指向&lt;code&gt;c&lt;/code&gt;的尾元素和首元素之前位置的迭代器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.crbegin()&lt;/code&gt;, &lt;code&gt;c.crend()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;不支持&lt;code&gt;forward_list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md迭代器迭代器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;迭代器范围：&lt;code&gt;begin&lt;/code&gt;到&lt;code&gt;end&lt;/code&gt;，即第一个元素到最后一个元素的后面一个位置。&lt;/li&gt;
&lt;li&gt;左闭合区间：&lt;code&gt;[begin, end)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左闭合范围蕴含的编程设定：
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;begin&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;相等，则范围为空。&lt;/li&gt;
&lt;li&gt;如果二者不等，则范围至少包含一个元素，且&lt;code&gt;begin&lt;/code&gt;指向该范围中的第一个元素。&lt;/li&gt;
&lt;li&gt;可以对&lt;code&gt;begin&lt;/code&gt;递增若干次，使得&lt;code&gt;begin == end&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md容器操作可能使迭代器失效容器操作可能使迭代器失效&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%ae%b9%e5%99%a8%e6%93%8d%e4%bd%9c%e5%8f%af%e8%83%bd%e4%bd%bf%e8%bf%ad%e4%bb%a3%e5%99%a8%e5%a4%b1%e6%95%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;容器操作可能使迭代器失效
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在向容器添加元素后：
&lt;ul&gt;
&lt;li&gt;如果容器是&lt;code&gt;vector&lt;/code&gt;或&lt;code&gt;string&lt;/code&gt;，且存储空间被重新分配，则指向容器的迭代器、指针、引用都会失效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;deque&lt;/code&gt;，插入到除首尾位置之外的任何位置都会导致指向容器的迭代器、指针、引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;list&lt;/code&gt;和&lt;code&gt;forward_list&lt;/code&gt;，指向容器的迭代器、指针和引用依然有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在从一个容器中删除元素后：
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;list&lt;/code&gt;和&lt;code&gt;forward_list&lt;/code&gt;，指向容器其他位置的迭代器、引用和指针仍然有效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;deque&lt;/code&gt;，如果在首尾之外的任何位置删除元素，那么指向被删除元素外其他元素的迭代器、指针、引用都会失效；如果是删除&lt;code&gt;deque&lt;/code&gt;的尾元素，则尾后迭代器会失效，但其他不受影响；如果删除的是&lt;code&gt;deque&lt;/code&gt;的头元素，这些也不会受影响。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;，指向被删元素之前的迭代器、引用、指针仍然有效。&lt;/li&gt;
&lt;li&gt;注意：当我们删除元素时，尾后迭代器总是会失效。&lt;/li&gt;
&lt;li&gt;注意：使用失效的迭代器、指针、引用是严重的运行时错误！&lt;/li&gt;
&lt;li&gt;建议：将要求迭代器必须保持有效的程序片段最小化。&lt;/li&gt;
&lt;li&gt;建议：不要保存&lt;code&gt;end&lt;/code&gt;返回的迭代器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md容器内元素的类型约束容器内元素的类型约束&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%ae%b9%e5%99%a8%e5%86%85%e5%85%83%e7%b4%a0%e7%9a%84%e7%b1%bb%e5%9e%8b%e7%ba%a6%e6%9d%9f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;容器内元素的类型约束
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;元素类型必须支持赋值运算；&lt;/li&gt;
&lt;li&gt;元素类型的对象必须可以复制。&lt;/li&gt;
&lt;li&gt;除了输入输出标准库类型外，其他所有标准库类型都是有效的容器元素类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdvector对象是如何增长的vector对象是如何增长的&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#vector%e5%af%b9%e8%b1%a1%e6%98%af%e5%a6%82%e4%bd%95%e5%a2%9e%e9%95%bf%e7%9a%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;vector对象是如何增长的
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;在内存中是连续保存的，如果原先分配的内存位置已经使用完，则需要重新分配新空间，将已有元素从就位置移动到新空间中，然后添加新元素。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md管理容量的成员函数管理容量的成员函数&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e7%ae%a1%e7%90%86%e5%ae%b9%e9%87%8f%e7%9a%84%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;管理容量的成员函数
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.shrink_to_fit()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;capacity()&lt;/code&gt;减少到和&lt;code&gt;size()&lt;/code&gt;相同大小&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.capacity()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;不重新分配内存空间的话，&lt;code&gt;c&lt;/code&gt;可以保存多少个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c.reverse(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;分配至少能容纳&lt;code&gt;n&lt;/code&gt;个元素的内存空间&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;只适用于&lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;deque&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capacity&lt;/code&gt;和&lt;code&gt;reverse&lt;/code&gt;只适用于&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md额外的string操作额外的string操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e9%a2%9d%e5%a4%96%e7%9a%84string%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;额外的string操作
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md构造string的其他方法构造string的其他方法&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e6%9e%84%e9%80%a0string%e7%9a%84%e5%85%b6%e4%bb%96%e6%96%b9%e6%b3%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;构造string的其他方法
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s(cp, n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;cp&lt;/code&gt;指向的数组中前&lt;code&gt;n&lt;/code&gt;个字符的拷贝，此数组&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s(s2, pos2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;string s2&lt;/code&gt;从下标&lt;code&gt;pos2&lt;/code&gt;开始的字符的拷贝。若&lt;code&gt;pos2 &amp;gt; s2.size()&lt;/code&gt;，则构造函数的行为未定义。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s(s2, pos2, len2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;string s2&lt;/code&gt;从下标&lt;code&gt;pos2&lt;/code&gt;开始的&lt;code&gt;len2&lt;/code&gt;个字符的拷贝。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;,&lt;code&gt;len2&lt;/code&gt;,&lt;code&gt;pos2&lt;/code&gt;都是无符号值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdsubstr操作substr操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#substr%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;substr操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.substr(pos, n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个&lt;code&gt;string&lt;/code&gt;，包含&lt;code&gt;s&lt;/code&gt;中从&lt;code&gt;pos&lt;/code&gt;开始的&lt;code&gt;n&lt;/code&gt;个字符的拷贝。&lt;code&gt;pos&lt;/code&gt;的默认值是0，&lt;code&gt;n&lt;/code&gt;的默认值是&lt;code&gt;s.size() - pos&lt;/code&gt;，即拷贝从&lt;code&gt;pos&lt;/code&gt;开始的所有字符。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md改变string的其他方法改变string的其他方法&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e6%94%b9%e5%8f%98string%e7%9a%84%e5%85%b6%e4%bb%96%e6%96%b9%e6%b3%95&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;改变string的其他方法
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.insert(pos, args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;pos&lt;/code&gt;之前插入&lt;code&gt;args&lt;/code&gt;指定的字符。&lt;code&gt;pos&lt;/code&gt;可以使是下标或者迭代器。接受下标的版本返回指向&lt;code&gt;s&lt;/code&gt;的引用；接受迭代器的版本返回指向第一个插入字符的迭代器。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.erase(pos, len)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除从&lt;code&gt;pos&lt;/code&gt;开始的&lt;code&gt;len&lt;/code&gt;个字符，如果&lt;code&gt;len&lt;/code&gt;被省略，则删除后面所有字符，返回指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.assign(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;中的字符替换成&lt;code&gt;args&lt;/code&gt;指定的字符。返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.append(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;args&lt;/code&gt;指定的字符追加到&lt;code&gt;s&lt;/code&gt;，返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.replace(range, args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除&lt;code&gt;s&lt;/code&gt;中范围&lt;code&gt;range&lt;/code&gt;中的字符，替换成&lt;code&gt;args&lt;/code&gt;指定的字符。返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdstring搜索操作string搜索操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#string%e6%90%9c%e7%b4%a2%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string搜索操作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;类提供了6个不同的搜索函数，每个函数都有4个重载版本。&lt;/li&gt;
&lt;li&gt;每个搜索操作都返回一个&lt;code&gt;string::size_type&lt;/code&gt;值，表示匹配发生位置的下标。如果搜索失败则返回一个名为&lt;code&gt;string::npos&lt;/code&gt;的&lt;code&gt;static&lt;/code&gt;成员（类型是&lt;code&gt;string::size_type&lt;/code&gt;，初始化值是-1，也就是&lt;code&gt;string&lt;/code&gt;最大的可能大小）。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;搜索操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.find(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;查找&lt;code&gt;s&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;第一次出现的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.rfind(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;查找&lt;code&gt;s&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;最后一次出现的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.find_first_of(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找&lt;code&gt;args&lt;/code&gt;中任何一个字符第一次出现的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.find_last_of(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找&lt;code&gt;args&lt;/code&gt;中任何一个字符最后一次出现的位置&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.find_first_not_of(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找第一个不在&lt;code&gt;args&lt;/code&gt;中的字符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.find_first_not_of(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找最后一个不在&lt;code&gt;args&lt;/code&gt;中的字符&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;args必须是一下的形式之一：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;code&gt;args&lt;/code&gt;形式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;c, pos&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找字符&lt;code&gt;c&lt;/code&gt;。&lt;code&gt;pos&lt;/code&gt;默认是0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s2, pos&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找字符串&lt;code&gt;s&lt;/code&gt;。&lt;code&gt;pos&lt;/code&gt;默认是0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;cp, pos&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找指针&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的C风格字符串。&lt;code&gt;pos&lt;/code&gt;默认是0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;cp, pos, n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找指针&lt;code&gt;cp&lt;/code&gt;指向的前&lt;code&gt;n&lt;/code&gt;个字符。&lt;code&gt;pos&lt;/code&gt;和&lt;code&gt;n&lt;/code&gt;无默认值。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdscompare的几种参数形式scompare的几种参数形式&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#scompare%e7%9a%84%e5%87%a0%e7%a7%8d%e5%8f%82%e6%95%b0%e5%bd%a2%e5%bc%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;s.compare的几种参数形式
&lt;/h3&gt;&lt;p&gt;逻辑类似于C标准库的&lt;code&gt;strcmp&lt;/code&gt;函数，根据&lt;code&gt;s&lt;/code&gt;是等于、大于还是小于参数指定的字符串，&lt;code&gt;s.compare&lt;/code&gt;返回0、正数或负数。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;参数形式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pos1, n1, s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pos1, n1, s2, pos2, n2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;cp&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;和&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的字符数组&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pos1, n1, cp&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的字符数组&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;pos1, n1, cp, n2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;cp&lt;/code&gt;指向的地址开始&lt;code&gt;n2&lt;/code&gt;个字符&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdstring和数值转换string和数值转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#string%e5%92%8c%e6%95%b0%e5%80%bc%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string和数值转换
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;转换&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;to_string(val)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;一组重载函数，返回数值&lt;code&gt;val&lt;/code&gt;的&lt;code&gt;string&lt;/code&gt;表示。&lt;code&gt;val&lt;/code&gt;可以使任何算术类型。对每个浮点类型和&lt;code&gt;int&lt;/code&gt;或更大的整型，都有相应版本的&lt;code&gt;to_string()&lt;/code&gt;。和往常一样，小整型会被提升。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stoi(s, p, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;起始子串（表示整数内容）的数值，&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;s&lt;/code&gt;中第一个非数值字符的下标，默认是0，&lt;code&gt;b&lt;/code&gt;是转换所用的基数。返回&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stol(s, p, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stoul(s, p, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;unsigned long&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stoll(s, p, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stoull(s, p, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stof(s, p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;起始子串（表示浮点数内容）的数值，&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;s&lt;/code&gt;中第一个非数值字符的下标，默认是0。返回&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stod(s, p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;stold(s, p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md容器适配器adapter容器适配器adapter&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e5%ae%b9%e5%99%a8%e9%80%82%e9%85%8d%e5%99%a8adapter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;容器适配器（adapter）
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;适配器是使一事物的行为类似于另一事物的行为的一种机制，例如&lt;code&gt;stack&lt;/code&gt;可以使任何一种顺序容器以栈的方式工作。&lt;/li&gt;
&lt;li&gt;初始化 &lt;code&gt;deque&amp;lt;int&amp;gt; deq; stack&amp;lt;int&amp;gt; stk(deq);&lt;/code&gt; 从&lt;code&gt;deq&lt;/code&gt;拷贝元素到&lt;code&gt;stk&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;创建适配器时，指定一个顺序容器，可以覆盖默认的基础容器： &lt;code&gt;stack&amp;lt;string, vector&amp;lt;string&amp;gt; &amp;gt; str_stk;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09md适配器的通用操作和类型适配器的通用操作和类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#%e9%80%82%e9%85%8d%e5%99%a8%e7%9a%84%e9%80%9a%e7%94%a8%e6%93%8d%e4%bd%9c%e5%92%8c%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;适配器的通用操作和类型
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;一种类型，须以保存当前类型的最大对象的大小&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;元素类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;container_type&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;实现适配器的底层容器类型&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;A a;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个名为&lt;code&gt;a&lt;/code&gt;的空适配器&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;A a(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个名为&lt;code&gt;a&lt;/code&gt;的适配器，带有容器&lt;code&gt;c&lt;/code&gt;的一个拷贝&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;关系运算符&lt;/td&gt;
          &lt;td&gt;每个适配器都支持所有关系运算符：&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、 &lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;这些运算符返回底层容器的比较结果&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;a.empty()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若&lt;code&gt;a&lt;/code&gt;包含任何元素，返回&lt;code&gt;false&lt;/code&gt;;否则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;a.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;a&lt;/code&gt;中的元素数目&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;swap(a, b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;交换&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;的内容，&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;必须有相同类型，包括底层容器类型也必须相同&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;a.swap(b)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdstackstack&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;stack
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.pop()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除栈顶元素，不返回。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.push(item)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个新元素，压入栈顶，该元素通过拷贝或移动&lt;code&gt;item&lt;/code&gt;而来&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.emplace(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上，但元素由&lt;code&gt;args&lt;/code&gt;来构造。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.top()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回栈顶元素，不删除。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;定义在&lt;code&gt;stack&lt;/code&gt;头文件中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt;默认基于&lt;code&gt;deque&lt;/code&gt;实现，也可以在&lt;code&gt;list&lt;/code&gt;或&lt;code&gt;vector&lt;/code&gt;之上实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch09mdqueue和priority_queuequeue和priority_queue&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch09.md#queue%e5%92%8cpriority_queue&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;queue和priority_queue
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.pop()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;删除队首元素，但不返回。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.front()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回队首元素的值，不删除。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.back()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回队尾元素的值，不删除。只适用于&lt;code&gt;queue&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.top()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回具有最高优先级的元素值，不删除。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.push(item)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;在队尾压入一个新元素。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;q.emplace(args)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;定义在&lt;code&gt;queue&lt;/code&gt;头文件中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queue&lt;/code&gt;默认基于&lt;code&gt;deque&lt;/code&gt;实现，&lt;code&gt;priority_queue&lt;/code&gt;默认基于&lt;code&gt;vector&lt;/code&gt;实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queue&lt;/code&gt;可以在&lt;code&gt;list&lt;/code&gt;或&lt;code&gt;vector&lt;/code&gt;之上实现，&lt;code&gt;priority_queue&lt;/code&gt;也可以用&lt;code&gt;deque&lt;/code&gt;实现。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>7.类 （Class）</title>
        <link>https://Salmooo.github.io/p/7.%E7%B1%BB-class/</link>
        <pubDate>Mon, 30 Jul 2018 20:18:41 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/7.%E7%B1%BB-class/</guid>
        <description>&lt;h1 id=&#34;第七章-类-class&#34;&gt;第七章 类 （Class）
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md定义抽象数据类型定义抽象数据类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e5%ae%9a%e4%b9%89%e6%8a%bd%e8%b1%a1%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义抽象数据类型
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类背后的基本思想&lt;/strong&gt;：&lt;strong&gt;数据抽象&lt;/strong&gt;（data abstraction）和&lt;strong&gt;封装&lt;/strong&gt;（encapsulation）。&lt;/li&gt;
&lt;li&gt;数据抽象是一种依赖于&lt;strong&gt;接口&lt;/strong&gt;（interface）和&lt;strong&gt;实现&lt;/strong&gt;（implementation）分离的编程技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类成员-member类成员-member&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e6%88%90%e5%91%98-member&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类成员 （Member）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;必须在类的内部声明，不能在其他地方增加成员。&lt;/li&gt;
&lt;li&gt;成员可以是数据，函数，类型别名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类的成员函数类的成员函数&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e7%9a%84%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类的成员函数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;成员函数的&lt;strong&gt;声明&lt;/strong&gt;必须在类的内部。&lt;/li&gt;
&lt;li&gt;成员函数的&lt;strong&gt;定义&lt;/strong&gt;既可以在类的内部也可以在外部。&lt;/li&gt;
&lt;li&gt;使用点运算符 &lt;code&gt;.&lt;/code&gt; 调用成员函数。&lt;/li&gt;
&lt;li&gt;必须对任何&lt;code&gt;const&lt;/code&gt;或引用类型成员以及没有默认构造函数的类类型的任何成员使用初始化式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认实参： &lt;code&gt;Sales_item(const std::string &amp;amp;book): isbn(book), units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*this&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;每个成员函数都有一个额外的，隐含的形参&lt;code&gt;this&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;总是指向当前对象，因此&lt;code&gt;this&lt;/code&gt;是一个常量指针。&lt;/li&gt;
&lt;li&gt;形参表后面的&lt;code&gt;const&lt;/code&gt;，改变了隐含的&lt;code&gt;this&lt;/code&gt;形参的类型，如 &lt;code&gt;bool same_isbn(const Sales_item &amp;amp;rhs) const&lt;/code&gt;，这种函数称为“常量成员函数”（&lt;code&gt;this&lt;/code&gt;指向的当前对象是常量）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return *this;&lt;/code&gt;可以让成员函数连续调用。&lt;/li&gt;
&lt;li&gt;普通的非&lt;code&gt;const&lt;/code&gt;成员函数：&lt;code&gt;this&lt;/code&gt;是指向类类型的&lt;code&gt;const&lt;/code&gt;指针（可以改变&lt;code&gt;this&lt;/code&gt;所指向的值，不能改变&lt;code&gt;this&lt;/code&gt;保存的地址）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;成员函数：&lt;code&gt;this&lt;/code&gt;是指向const类类型的&lt;code&gt;const&lt;/code&gt;指针（既不能改变&lt;code&gt;this&lt;/code&gt;所指向的值，也不能改变&lt;code&gt;this&lt;/code&gt;保存的地址）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md非成员函数非成员函数&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e9%9d%9e%e6%88%90%e5%91%98%e5%87%bd%e6%95%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;非成员函数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;和类相关的非成员函数，定义和声明都应该在类的外部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类的构造函数类的构造函数&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e7%9a%84%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类的构造函数
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做&lt;strong&gt;构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;构造函数是特殊的成员函数。&lt;/li&gt;
&lt;li&gt;构造函数放在类的&lt;code&gt;public&lt;/code&gt;部分。&lt;/li&gt;
&lt;li&gt;与类同名的成员函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=default&lt;/code&gt;要求编译器合成默认的构造函数。(&lt;code&gt;C++11&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;初始化列表：冒号和花括号之间的代码： &lt;code&gt;Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md访问控制与封装访问控制与封装&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e8%ae%bf%e9%97%ae%e6%8e%a7%e5%88%b6%e4%b8%8e%e5%b0%81%e8%a3%85&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;访问控制与封装
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问说明符&lt;/strong&gt;（access specifiers）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：定义在 &lt;code&gt;public&lt;/code&gt;后面的成员在整个程序内可以被访问； &lt;code&gt;public&lt;/code&gt;成员定义类的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：定义在 &lt;code&gt;private&lt;/code&gt;后面的成员可以被类的成员函数访问，但不能被使用该类的代码访问； &lt;code&gt;private&lt;/code&gt;隐藏了类的实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;class&lt;/code&gt;或者 &lt;code&gt;struct&lt;/code&gt;：都可以被用于定义一个类。唯一的却别在于访问权限。
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;class&lt;/code&gt;：在第一个访问说明符之前的成员是 &lt;code&gt;priavte&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;struct&lt;/code&gt;：在第一个访问说明符之前的成员是 &lt;code&gt;public&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md友元友元&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e5%8f%8b%e5%85%83&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;友元
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;允许特定的&lt;strong&gt;非成员函数&lt;/strong&gt;访问一个类的&lt;strong&gt;私有成员&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;友元的声明以关键字 &lt;code&gt;friend&lt;/code&gt;开始。 &lt;code&gt;friend Sales_data add(const Sales_data&amp;amp;, const Sales_data&amp;amp;);&lt;/code&gt;表示非成员函数&lt;code&gt;add&lt;/code&gt;可以访问类的非公有成员。&lt;/li&gt;
&lt;li&gt;通常将友元声明成组地放在&lt;strong&gt;类定义的开始或者结尾&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;类之间的友元：
&lt;ul&gt;
&lt;li&gt;如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md封装的益处封装的益处&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e5%b0%81%e8%a3%85%e7%9a%84%e7%9b%8a%e5%a4%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;封装的益处
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;确保用户的代码不会无意间破坏封装对象的状态。&lt;/li&gt;
&lt;li&gt;被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类的其他特性类的其他特性&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e7%9a%84%e5%85%b6%e4%bb%96%e7%89%b9%e6%80%a7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类的其他特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;成员函数作为内联函数 &lt;code&gt;inline&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;在类的内部，常有一些规模较小的函数适合于被声明成内联函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;在类内部的函数是&lt;strong&gt;自动内联&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;在类外部定义的成员函数，也可以在声明时显式地加上 &lt;code&gt;inline&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可变数据成员&lt;/strong&gt; （mutable data member）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutable size_t access_ctr;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;永远不会是&lt;code&gt;const&lt;/code&gt;，即使它是&lt;code&gt;const&lt;/code&gt;对象的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个类定义了唯一的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类的作用域类的作用域&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e7%9a%84%e4%bd%9c%e7%94%a8%e5%9f%9f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类的作用域
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由引用、对象、指针使用成员访问运算符来访问。&lt;/li&gt;
&lt;li&gt;函数的&lt;strong&gt;返回类型&lt;/strong&gt;通常在函数名前面，因此当成员函数定义在类的外部时，返回类型中使用的名字都位于类的作用域之外。&lt;/li&gt;
&lt;li&gt;如果成员使用了外层作用域中的某个名字，而该名字代表一种&lt;strong&gt;类型&lt;/strong&gt;，则类不能在之后重新定义该名字。&lt;/li&gt;
&lt;li&gt;类中的&lt;strong&gt;类型名定义&lt;/strong&gt;都要放在一开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md构造函数再探构造函数再探&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0%e5%86%8d%e6%8e%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;构造函数再探
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;构造函数初始值列表：
&lt;ul&gt;
&lt;li&gt;类似&lt;code&gt;python&lt;/code&gt;使用赋值的方式有时候不行，比如&lt;code&gt;const&lt;/code&gt;或者引用类型的数据，只能初始化，不能赋值。（注意初始化和赋值的区别）&lt;/li&gt;
&lt;li&gt;最好让构造函数初始值的顺序和成员声明的顺序保持一致。&lt;/li&gt;
&lt;li&gt;如果一个构造函数为所有参数都提供了默认参数，那么它实际上也定义了默认的构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md委托构造函数-delegating-constructor-c11委托构造函数-delegating-constructor-c11&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e5%a7%94%e6%89%98%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0-delegating-constructor-c11&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;委托构造函数 （delegating constructor, &lt;code&gt;C++11&lt;/code&gt;）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;委托构造函数将自己的职责委托给了其他构造函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sale_data(): Sale_data(&amp;quot;&amp;quot;, 0, 0) {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md隐式的类型转换隐式的类型转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e9%9a%90%e5%bc%8f%e7%9a%84%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;隐式的类型转换
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果构造函数&lt;strong&gt;只接受一个实参&lt;/strong&gt;，则它实际上定义了转换为此类类型的&lt;strong&gt;隐式转换机制&lt;/strong&gt;。这种构造函数又叫&lt;strong&gt;转换构造函数&lt;/strong&gt;（converting constructor）。&lt;/li&gt;
&lt;li&gt;编译器只会自动地执行&lt;code&gt;仅一步&lt;/code&gt;类型转换。&lt;/li&gt;
&lt;li&gt;抑制构造函数定义的隐式转换：
&lt;ul&gt;
&lt;li&gt;将构造函数声明为&lt;code&gt;explicit&lt;/code&gt;加以阻止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;构造函数只能用于直接初始化，不能用于拷贝形式的初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md聚合类-aggregate-class聚合类-aggregate-class&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e8%81%9a%e5%90%88%e7%b1%bb-aggregate-class&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;聚合类 （aggregate class）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;满足以下所有条件：
&lt;ul&gt;
&lt;li&gt;所有成员都是&lt;code&gt;public&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;没有定义任何构造函数。&lt;/li&gt;
&lt;li&gt;没有类内初始值。&lt;/li&gt;
&lt;li&gt;没有基类，也没有&lt;code&gt;virtual&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用一个花括号括起来的成员初始值列表，初始值的顺序必须和声明的顺序一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md字面值常量类字面值常量类&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e5%ad%97%e9%9d%a2%e5%80%bc%e5%b8%b8%e9%87%8f%e7%b1%bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;字面值常量类
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;函数的参数和返回值必须是字面值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字面值类型&lt;/strong&gt;：除了算术类型、引用和指针外，某些类也是字面值类型。&lt;/li&gt;
&lt;li&gt;数据成员都是字面值类型的聚合类是字面值常量类。&lt;/li&gt;
&lt;li&gt;如果不是聚合类，则必须满足下面所有条件：
&lt;ul&gt;
&lt;li&gt;数据成员都必须是字面值类型。&lt;/li&gt;
&lt;li&gt;类必须至少含有一个&lt;code&gt;constexpr&lt;/code&gt;构造函数。&lt;/li&gt;
&lt;li&gt;如果一个数据成员含有类内部初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的&lt;code&gt;constexpr&lt;/code&gt;构造函数。&lt;/li&gt;
&lt;li&gt;类必须使用析构函数的默认定义，该成员负责销毁类的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch07md类的静态成员类的静态成员&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch07.md#%e7%b1%bb%e7%9a%84%e9%9d%99%e6%80%81%e6%88%90%e5%91%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类的静态成员
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;非&lt;code&gt;static&lt;/code&gt;数据成员存在于类类型的每个对象中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;数据成员独立于该类的任意对象而存在。&lt;/li&gt;
&lt;li&gt;每个&lt;code&gt;static&lt;/code&gt;数据成员是与类关联的对象，并不与该类的对象相关联。&lt;/li&gt;
&lt;li&gt;声明：
&lt;ul&gt;
&lt;li&gt;声明之前加上关键词&lt;code&gt;static&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用：
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;作用域运算符&lt;/strong&gt;&lt;code&gt;::&lt;/code&gt;直接访问静态成员:&lt;code&gt;r = Account::rate();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以使用对象访问：&lt;code&gt;r = ac.rate();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义：
&lt;ul&gt;
&lt;li&gt;在类外部定义时不用加&lt;code&gt;static&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化：
&lt;ul&gt;
&lt;li&gt;通常不在类的内部初始化，而是在定义时进行初始化，如 &lt;code&gt;double Account::interestRate = initRate();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果一定要在类内部定义，则要求必须是字面值常量类型的&lt;code&gt;constexpr&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>10. 泛型算法</title>
        <link>https://Salmooo.github.io/p/10.-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</link>
        <pubDate>Mon, 30 Jul 2018 19:49:44 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/10.-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</guid>
        <description>&lt;h1 id=&#34;第八章-io库&#34;&gt;第八章 IO库
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md前面章节已经在用的io库设施前面章节已经在用的io库设施&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e5%89%8d%e9%9d%a2%e7%ab%a0%e8%8a%82%e5%b7%b2%e7%bb%8f%e5%9c%a8%e7%94%a8%e7%9a%84io%e5%ba%93%e8%ae%be%e6%96%bd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;前面章节已经在用的IO库设施
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;istream&lt;/strong&gt;：输入流类型，提供输入操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ostream&lt;/strong&gt;：输出流类型，提供输出操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cin&lt;/strong&gt;：一个&lt;code&gt;istream&lt;/code&gt;对象，从标准输入读取数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cout&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准输出写入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cerr&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准错误写入消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;gt;&amp;gt;运算符&lt;/strong&gt;：用来从一个&lt;code&gt;istream&lt;/code&gt;对象中读取输入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;laquo;运算符&lt;/strong&gt;：用来向一个&lt;code&gt;ostream&lt;/code&gt;对象中写入输出数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getline函数&lt;/strong&gt;：从一个给定的&lt;code&gt;istream&lt;/code&gt;对象中读取一行数据，存入到一个给定的&lt;code&gt;string&lt;/code&gt;对象中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio类io类&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e7%b1%bb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO类
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md标准库定义的io类型标准库定义的io类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%a0%87%e5%87%86%e5%ba%93%e5%ae%9a%e4%b9%89%e7%9a%84io%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;标准库定义的IO类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;头文件：从标准流中读写数据，&lt;code&gt;istream&lt;/code&gt;、&lt;code&gt;ostream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;头文件：从文件中读写数据，&lt;code&gt;ifstream&lt;/code&gt;、&lt;code&gt;ofstream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream&lt;/code&gt;头文件：从字符串中读写数据，&lt;code&gt;istringstream&lt;/code&gt;、&lt;code&gt;ostringstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdio对象不可复制或赋值io对象不可复制或赋值&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#io%e5%af%b9%e8%b1%a1%e4%b8%8d%e5%8f%af%e5%a4%8d%e5%88%b6%e6%88%96%e8%b5%8b%e5%80%bc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO对象不可复制或赋值
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.IO对象不能存在容器里.&lt;/li&gt;
&lt;li&gt;2.形参和返回类型也不能是流类型。&lt;/li&gt;
&lt;li&gt;3.形参和返回类型一般是流的&lt;strong&gt;引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;4.读写一个IO对象会改变其状态，因此传递和返回的引用不能是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md条件状态条件状态&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%9d%a1%e4%bb%b6%e7%8a%b6%e6%80%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;条件状态
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;状态&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:iostate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;是一种机器无关的&lt;strong&gt;类型&lt;/strong&gt;，提供了表达条件状态的完整功能&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:badbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流已经崩溃&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:failbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出一个IO操作失败了&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:eofbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流到达了文件结束&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm:goodbit&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用来指出流未处于错误状态，此值保证为零&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.eof()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;eofbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.fail()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;failbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.bad()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;badbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.good()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;处于有效状态，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中所有条件状态位复位，将流的状态设置成有效，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.clear(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中指定的条件状态位复位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.setstate(flags)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;根据给定的标志位，将流&lt;code&gt;s&lt;/code&gt;中对应的条件状态位置位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.rdstate()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回流&lt;code&gt;s&lt;/code&gt;的当前条件状态，返回值类型为&lt;code&gt;strm::iostate&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;strm&lt;/code&gt;是一种IO类型，（如&lt;code&gt;istream&lt;/code&gt;）， &lt;code&gt;s&lt;/code&gt;是一个流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md管理输出缓冲管理输出缓冲&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e7%ae%a1%e7%90%86%e8%be%93%e5%87%ba%e7%bc%93%e5%86%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;管理输出缓冲
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。&lt;/li&gt;
&lt;li&gt;刷新缓冲区，可以使用如下IO操纵符：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;：输出一个换行符并刷新缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;：刷新流，单不添加任何字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends&lt;/code&gt;：在缓冲区插入空字符&lt;code&gt;null&lt;/code&gt;，然后刷新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unitbuf&lt;/code&gt;：告诉流接下来每次操作之后都要进行一次&lt;code&gt;flush&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nounitbuf&lt;/code&gt;：回到正常的缓冲方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件输入输出文件输入输出&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件输入输出
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;fstream&lt;/code&gt;定义了三个类型来支持文件IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;从一个给定文件读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;向一个给定文件写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;可以读写给定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件流&lt;/strong&gt;：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdfstream特有的操作fstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#fstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;fstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个未绑定的文件流。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;创建一个文件流，并打开名为&lt;code&gt;s&lt;/code&gt;的文件，&lt;code&gt;s&lt;/code&gt;可以是&lt;code&gt;string&lt;/code&gt;也可以是&lt;code&gt;char&lt;/code&gt;指针&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstream fstrm(s, mode);&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;与前一个构造函数类似，但按指定&lt;code&gt;mode&lt;/code&gt;打开文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.open(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开名为&lt;code&gt;s&lt;/code&gt;的文件，并和&lt;code&gt;fstrm&lt;/code&gt;绑定&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.close()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;关闭和&lt;code&gt;fstrm&lt;/code&gt;绑定的文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;fstrm.is_open()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回一个&lt;code&gt;bool&lt;/code&gt;值，指出与&lt;code&gt;fstrm&lt;/code&gt;关联的文件是否成功打开且尚未关闭&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;fstream&lt;/code&gt;是头文件&lt;code&gt;fstream&lt;/code&gt;中定义的一个类型，&lt;code&gt;fstrm&lt;/code&gt;是一个文件流对象。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08md文件模式文件模式&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#%e6%96%87%e4%bb%b6%e6%a8%a1%e5%bc%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;文件模式
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;文件模式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以读的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以写的方式打开&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;app&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;每次写操作前均定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;打开文件后立即定位到文件末尾&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;截断文件&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以二进制方式进行IO操作。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstring流string流&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#string%e6%b5%81&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string流
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;sstream&lt;/code&gt;定义了三个类型来支持内存IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istringstream&lt;/code&gt;从&lt;code&gt;string&lt;/code&gt;读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostringstream&lt;/code&gt;向&lt;code&gt;string&lt;/code&gt;写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringstream&lt;/code&gt;可以读写给定&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch08mdstringstream特有的操作stringstream特有的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch08.md#stringstream%e7%89%b9%e6%9c%89%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;stringstream特有的操作
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;定义一个未绑定的&lt;code&gt;stringstream&lt;/code&gt;对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;sstream strm(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;s&lt;/code&gt;初始化对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;strm&lt;/code&gt;所保存的&lt;code&gt;string&lt;/code&gt;的拷贝&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strm.str(s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;拷贝到&lt;code&gt;strm&lt;/code&gt;中，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中&lt;code&gt;sstream&lt;/code&gt;是头文件&lt;code&gt;sstream&lt;/code&gt;中任意一个类型。&lt;code&gt;s&lt;/code&gt;是一个&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>6.函数</title>
        <link>https://Salmooo.github.io/p/6.%E5%87%BD%E6%95%B0/</link>
        <pubDate>Sun, 29 Jul 2018 20:18:41 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/6.%E5%87%BD%E6%95%B0/</guid>
        <description>&lt;h1 id=&#34;第三章-字符串向量和数组&#34;&gt;第三章 字符串，向量和数组
&lt;/h1&gt;&lt;h2 id=&#34;using声明&#34;&gt;using声明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用某个命名空间：例如 &lt;code&gt;using std::cin&lt;/code&gt;表示使用命名空间&lt;code&gt;std&lt;/code&gt;中的名字&lt;code&gt;cin&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;头文件中不应该包含&lt;code&gt;using&lt;/code&gt;声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988estringstring&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#string&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标准库类型&lt;code&gt;string&lt;/code&gt;表示可变长的字符序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;using std::string;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string对象&lt;/strong&gt;：注意，不同于字符串字面值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化string对象定义和初始化string对象&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96string%e5%af%b9%e8%b1%a1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化string对象
&lt;/h3&gt;&lt;p&gt;初始化&lt;code&gt;string&lt;/code&gt;对象的方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;默认初始化，&lt;code&gt;s1&lt;/code&gt;是个空字符串&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s2(s1)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s2 = s1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;s2(s1)&lt;/code&gt;，&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s3(&amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s3&lt;/code&gt;是字面值“value”的副本，除了字面值最后的那个空字符外&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s3 = &amp;quot;value&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;s3(&amp;quot;value&amp;quot;)&lt;/code&gt;，&lt;code&gt;s3&lt;/code&gt;是字面值&amp;quot;value&amp;quot;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s4(n, &#39;c&#39;)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;把&lt;code&gt;s4&lt;/code&gt;初始化为由连续&lt;code&gt;n&lt;/code&gt;个字符&lt;code&gt;c&lt;/code&gt;组成的串&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;拷贝初始化（copy initialization）：使用等号&lt;code&gt;=&lt;/code&gt;将一个已有的对象拷贝到正在创建的对象。&lt;/li&gt;
&lt;li&gt;直接初始化（direct initialization）：通过括号给对象赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988estring对象上的操作string对象上的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#string%e5%af%b9%e8%b1%a1%e4%b8%8a%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string对象上的操作
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;的操作：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; s&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;写到输出流&lt;code&gt;os&lt;/code&gt;当中，返回&lt;code&gt;os&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; s&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取字符串赋给&lt;code&gt;s&lt;/code&gt;，字符串以空白分割，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;getline(is, s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取一行赋给&lt;code&gt;s&lt;/code&gt;，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.empty()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s&lt;/code&gt;为空返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中字符的个数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s[n]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个字符的引用，位置&lt;code&gt;n&lt;/code&gt;从0计起&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1+s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;连接后的结果&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1=s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;s2&lt;/code&gt;的副本代替&lt;code&gt;s1&lt;/code&gt;中原来的字符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1==s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;如果&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;中所含的字符完全一样，则它们相等；&lt;code&gt;string&lt;/code&gt;对象的相等性判断对字母的大小写敏感&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1!=s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;利用字符在字典中的顺序进行比较，且对字母的大小写敏感（对第一个不相同的位置进行比较）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;string io：
&lt;ul&gt;
&lt;li&gt;执行读操作&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline&lt;/code&gt;：读取一整行，&lt;strong&gt;包括空白符&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.size()&lt;/code&gt;返回的时&lt;code&gt;string::size_type&lt;/code&gt;类型，记住是一个&lt;strong&gt;无符号&lt;/strong&gt;类型的值，不要和&lt;code&gt;int&lt;/code&gt;混用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s1+s2&lt;/code&gt;使用时，保证至少一侧是string类型。&lt;code&gt;string s1 = &amp;quot;hello&amp;quot; + &amp;quot;world&amp;quot; // 错误，两侧均为字符串字面值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串字面值和string是不同的类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e处理string对象中的字符处理string对象中的字符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%a4%84%e7%90%86string%e5%af%b9%e8%b1%a1%e4%b8%ad%e7%9a%84%e5%ad%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;处理string对象中的字符
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ctype.h vs. cctype&lt;/strong&gt;：C++修改了c的标准库，名称为去掉&lt;code&gt;.h&lt;/code&gt;，前面加&lt;code&gt;c&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如c++版本为&lt;code&gt;cctype&lt;/code&gt;，c版本为&lt;code&gt;ctype.h&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尽量使用c++版本的头文件&lt;/strong&gt;，即&lt;code&gt;cctype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cctype&lt;/code&gt;头文件中定义了一组标准函数：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;函数&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isalnum(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母或数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isalpha(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iscntrl(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是控制字符时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isdigit(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isgraph(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;不是空格但可以打印时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;islower(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isprint(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是可打印字符时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ispunct(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是标点符号时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isspace(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是空白时为真（空格、横向制表符、纵向制表符、回车符、换行符、进纸符）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isupper(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isxdigit(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是十六进制数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;tolower(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母，输出对应的小写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;toupper(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母，输出对应的大写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;遍历字符串：使用&lt;strong&gt;范围for&lt;/strong&gt;（range for）语句： &lt;code&gt;for (auto c: str)&lt;/code&gt;，或者 &lt;code&gt;for (auto &amp;amp;c: str)&lt;/code&gt;使用引用直接改变字符串中的字符。 （C++11）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str[x]&lt;/code&gt;,[]输入参数为&lt;code&gt;string::size_type&lt;/code&gt;类型，给出&lt;code&gt;int&lt;/code&gt;整型也会自动转化为该类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988evectorvector&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#vector&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;vector
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vector是一个&lt;strong&gt;容器&lt;/strong&gt;，也是一个类模板；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt; 然后 &lt;code&gt;using std::vector;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器：包含其他对象。&lt;/li&gt;
&lt;li&gt;类模板：本身不是类，但可以&lt;strong&gt;实例化instantiation&lt;/strong&gt;出一个类。 &lt;code&gt;vector&lt;/code&gt;是一个模板， &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;是一个类型。&lt;/li&gt;
&lt;li&gt;通过将类型放在类模板名称后面的&lt;strong&gt;尖括号&lt;/strong&gt;中来指定&lt;strong&gt;类型&lt;/strong&gt;，如&lt;code&gt;vector&amp;lt;int&amp;gt; ivec&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化vector对象定义和初始化vector对象&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96vector%e5%af%b9%e8%b1%a1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化vector对象
&lt;/h3&gt;&lt;p&gt;初始化&lt;code&gt;vector&lt;/code&gt;对象的方法&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v1&lt;/code&gt;是一个空&lt;code&gt;vector&lt;/code&gt;，它潜在的元素是&lt;code&gt;T&lt;/code&gt;类型的，执行默认初始化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2(v1)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v2&lt;/code&gt;中包含有&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2 = v1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;v2(v1)&lt;/code&gt;，&lt;code&gt;v2&lt;/code&gt;中包含&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v3(n, val)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v3&lt;/code&gt;包含了n个重复的元素，每个元素的值都是&lt;code&gt;val&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v4(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v4&lt;/code&gt;包含了n个重复地执行了值初始化的对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v5&lt;/code&gt;包含了初始值个数的元素，每个元素被赋予相应的初始值&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5={a, b, c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;列表初始化： &lt;code&gt;vector&amp;lt;string&amp;gt; v{&amp;quot;a&amp;quot;, &amp;quot;an&amp;quot;, &amp;quot;the&amp;quot;};&lt;/code&gt; （C++11）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e向vector对象中添加元素向vector对象中添加元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%90%91vector%e5%af%b9%e8%b1%a1%e4%b8%ad%e6%b7%bb%e5%8a%a0%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;向vector对象中添加元素
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v.push_back(e)&lt;/code&gt; 在尾部增加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e其他vector操作其他vector操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%85%b6%e4%bb%96vector%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;其他vector操作
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;支持的操作：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.emtpy()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;如果&lt;code&gt;v&lt;/code&gt;不含有任何元素，返回真；否则返回假&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中元素的个数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.push_back(t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;向&lt;code&gt;v&lt;/code&gt;的尾端添加一个值为&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v[n]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个位置上元素的&lt;strong&gt;引用&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 = v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;v2&lt;/code&gt;中的元素拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 = {a,b,c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用列表中元素的拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 == v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;相等当且仅当它们的元素数量相同且对应位置的元素值都相同&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 != v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;lt;=&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以字典顺序进行比较&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;范围&lt;code&gt;for&lt;/code&gt;语句内不应该改变其遍历序列的大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;对象（以及&lt;code&gt;string&lt;/code&gt;对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e迭代器iterator迭代器iterator&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%bf%ad%e4%bb%a3%e5%99%a8iterator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代器iterator
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有标准库容器都可以使用迭代器。&lt;/li&gt;
&lt;li&gt;类似于指针类型，迭代器也提供了对对象的间接访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e使用迭代器使用迭代器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e4%bd%bf%e7%94%a8%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;使用迭代器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;int&amp;gt;::iterator iter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto b = v.begin();&lt;/code&gt;返回指向第一个元素的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto e = v.end();&lt;/code&gt;返回指向最后一个元素的下一个（哨兵，尾后,one past the end）的迭代器（off the end）。&lt;/li&gt;
&lt;li&gt;如果容器为空， &lt;code&gt;begin()&lt;/code&gt;和 &lt;code&gt;end()&lt;/code&gt;返回的是同一个迭代器，都是尾后迭代器。&lt;/li&gt;
&lt;li&gt;使用解引用符&lt;code&gt;*&lt;/code&gt;访问迭代器指向的元素。&lt;/li&gt;
&lt;li&gt;养成使用迭代器和&lt;code&gt;!=&lt;/code&gt;的习惯（泛型编程）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器&lt;/strong&gt;：可以包含其他对象；但所有的对象必须类型相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代器（iterator）&lt;/strong&gt;：每种标准容器都有自己的迭代器。&lt;code&gt;C++&lt;/code&gt;倾向于用迭代器而不是下标遍历元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const_iterator&lt;/strong&gt;：只能读取容器内元素不能改变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;箭头运算符&lt;/strong&gt;： 解引用 + 成员访问，&lt;code&gt;it-&amp;gt;mem&lt;/code&gt;等价于 &lt;code&gt;(*it).mem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨记&lt;/strong&gt;：但凡是使用了&lt;strong&gt;迭代器&lt;/strong&gt;的循环体，都&lt;strong&gt;不要&lt;/strong&gt;向迭代器所属的容器&lt;strong&gt;添加元素&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准容器迭代器的运算符:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;运算符&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;*iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回迭代器&lt;code&gt;iter&lt;/code&gt;所指向的&lt;strong&gt;元素的引用&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter-&amp;gt;mem&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;(*iter).mem&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;++iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的下一个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的上一个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 == iter2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;判断两个迭代器是否相等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e迭代器运算迭代器运算&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%bf%ad%e4%bb%a3%e5%99%a8%e8%bf%90%e7%ae%97&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代器运算
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;迭代器支持的运算：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;运算符&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter + n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置和原来相比向前移动了若干个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter - n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器减去一个整数仍得到一个迭代器，迭代器指示的新位置比原来向后移动了若干个元素。结果迭代器或者指向容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 += n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器加法的复合赋值语句，将&lt;code&gt;iter1&lt;/code&gt;加n的结果赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 -= n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器减法的复合赋值语句，将&lt;code&gt;iter2&lt;/code&gt;减n的加过赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 - iter2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;两个迭代器相减的结果是它们之间的距离，也就是说，将运算符右侧的迭代器向前移动差值个元素后得到左侧的迭代器。参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器的关系运算符，如果某迭代器&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;difference_type&lt;/strong&gt;：保证足够大以存储任何两个迭代器对象间的距离，可正可负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e数组数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相当于vector的低级版，&lt;strong&gt;长度固定&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化内置数组定义和初始化内置数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96%e5%86%85%e7%bd%ae%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化内置数组
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化：&lt;code&gt;char input_buffer[buffer_size];&lt;/code&gt;，长度必须是const表达式，或者不写，让编译器自己推断。&lt;/li&gt;
&lt;li&gt;数组不允许直接赋值给另一个数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e访问数组元素访问数组元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%ae%bf%e9%97%ae%e6%95%b0%e7%bb%84%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;访问数组元素
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组下标的类型：&lt;code&gt;size_t&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;字符数组的特殊性：结尾处有一个空字符，如 &lt;code&gt;char a[] = &amp;quot;hello&amp;quot;;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;用数组初始化 &lt;code&gt;vector&lt;/code&gt;： &lt;code&gt;int a[] = {1,2,3,4,5}; vector&amp;lt;int&amp;gt; v(begin(a), end(a));&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e数组和指针数组和指针&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%95%b0%e7%bb%84%e5%92%8c%e6%8c%87%e9%92%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;数组和指针
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用数组时，编译器一般会把它转换成指针。&lt;/li&gt;
&lt;li&gt;标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针访问数组&lt;/strong&gt;：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988ec风格字符串c风格字符串&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#c%e9%a3%8e%e6%a0%bc%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;C风格字符串
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从C继承来的字符串。&lt;/li&gt;
&lt;li&gt;用空字符结束（&lt;code&gt;\0&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;对大多数应用来说，使用标准库 &lt;code&gt;string&lt;/code&gt;比使用C风格字符串更安全、更高效。&lt;/li&gt;
&lt;li&gt;获取 &lt;code&gt;string&lt;/code&gt; 中的 &lt;code&gt;cstring&lt;/code&gt; ： &lt;code&gt;const char *str = s.c_str();&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C标准库String函数，定义在&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt; 中：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;函数&lt;/th&gt;
          &lt;th&gt;介绍&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strlen(p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的长度，空字符不计算在内&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcmp(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;p1&lt;/code&gt;和&lt;code&gt;p2&lt;/code&gt;的相等性。如果&lt;code&gt;p1==p2&lt;/code&gt;，返回0；如果&lt;code&gt;p1&amp;gt;p2&lt;/code&gt;，返回一个正值；如果&lt;code&gt;p1&amp;lt;p2&lt;/code&gt;，返回一个负值。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcat(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;附加到&lt;code&gt;p1&lt;/code&gt;之后，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcpy(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;拷贝给&lt;code&gt;p1&lt;/code&gt;，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;尽量使用vector和迭代器，少用数组&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e多维数组多维数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%a4%9a%e7%bb%b4%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;多维数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多维数组的初始化&lt;/strong&gt;： &lt;code&gt;int ia[3][4] = {{0,1,2,3}, ...}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用范围for语句时，除了最内层的循环外，其他所有循环的控制变量都应该是&lt;strong&gt;引用&lt;/strong&gt;类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e指针vs引用指针vs引用&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%8c%87%e9%92%88vs%e5%bc%95%e7%94%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指针vs引用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引用总是指向某个对象，定义引用时没有初始化是错的。&lt;/li&gt;
&lt;li&gt;给引用赋值，修改的是该引用所关联的对象的值，而不是让引用和另一个对象相关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e指向指针的指针指向指针的指针&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%8c%87%e5%90%91%e6%8c%87%e9%92%88%e7%9a%84%e6%8c%87%e9%92%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指向指针的指针
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义： &lt;code&gt;int **ppi = &amp;amp;pi;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解引用：&lt;code&gt;**ppi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e动态数组动态数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%8a%a8%e6%80%81%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;动态数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;new&lt;/code&gt;和 &lt;code&gt;delete&lt;/code&gt;表达和c中&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;类似的功能，即在堆（自由存储区）中分配存储空间。&lt;/li&gt;
&lt;li&gt;定义： &lt;code&gt;int *pia = new int[10];&lt;/code&gt; 10可以被一个变量替代。&lt;/li&gt;
&lt;li&gt;释放： &lt;code&gt;delete [] pia;&lt;/code&gt;，注意不要忘记&lt;code&gt;[]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>5.语句</title>
        <link>https://Salmooo.github.io/p/5.%E8%AF%AD%E5%8F%A5/</link>
        <pubDate>Sat, 28 Jul 2018 23:09:14 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/5.%E8%AF%AD%E5%8F%A5/</guid>
        <description>&lt;h1 id=&#34;第五章-语句&#34;&gt;第五章 语句
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch05md简单语句简单语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch05.md#%e7%ae%80%e5%8d%95%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;简单语句
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表达式语句&lt;/strong&gt;：一个表达式末尾加上分号，就变成了表达式语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空语句&lt;/strong&gt;：只有一个单独的分号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合语句（块）&lt;/strong&gt;：用花括号 &lt;code&gt;{}&lt;/code&gt;包裹起来的语句和声明的序列。一个块就是一个作用域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch05md条件语句条件语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch05.md#%e6%9d%a1%e4%bb%b6%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;条件语句
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;悬垂else&lt;/strong&gt;（dangling else）：用来描述在嵌套的&lt;code&gt;if else&lt;/code&gt;语句中，如果&lt;code&gt;if&lt;/code&gt;比&lt;code&gt;else&lt;/code&gt;多时如何处理的问题。C++使用的方法是&lt;code&gt;else&lt;/code&gt;匹配最近没有配对的&lt;code&gt;if&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch05md迭代语句迭代语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch05.md#%e8%bf%ad%e4%bb%a3%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代语句
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;while&lt;/strong&gt;：当不确定到底要迭代多少次时，使用 &lt;code&gt;while&lt;/code&gt;循环比较合适，比如读取输入的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for&lt;/strong&gt;： &lt;code&gt;for&lt;/code&gt;语句可以省略掉 &lt;code&gt;init-statement&lt;/code&gt;， &lt;code&gt;condition&lt;/code&gt;和 &lt;code&gt;expression&lt;/code&gt;的任何一个；&lt;strong&gt;甚至全部&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围for&lt;/strong&gt;： &lt;code&gt;for (declaration: expression) statement&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch05md跳转语句跳转语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch05.md#%e8%b7%b3%e8%bd%ac%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;跳转语句
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;break&lt;/strong&gt;：&lt;code&gt;break&lt;/code&gt;语句负责终止离它最近的&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do while&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;或者&lt;code&gt;switch&lt;/code&gt;语句，并从这些语句之后的第一条语句开始继续执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continue&lt;/strong&gt;：终止最近的循环中的当前迭代并立即开始下一次迭代。只能在&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do while&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;循环的内部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch05mdtry语句块和异常处理try语句块和异常处理&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch05.md#try%e8%af%ad%e5%8f%a5%e5%9d%97%e5%92%8c%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;try语句块和异常处理
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;throw表达式&lt;/strong&gt;：异常检测部分使用 &lt;code&gt;throw&lt;/code&gt;表达式来表示它遇到了无法处理的问题。我们说 &lt;code&gt;throw&lt;/code&gt;引发 &lt;code&gt;raise&lt;/code&gt;了异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;try语句块&lt;/strong&gt;：以 &lt;code&gt;try&lt;/code&gt;关键词开始，以一个或多个 &lt;code&gt;catch&lt;/code&gt;字句结束。 &lt;code&gt;try&lt;/code&gt;语句块中的代码抛出的异常通常会被某个 &lt;code&gt;catch&lt;/code&gt;捕获并处理。 &lt;code&gt;catch&lt;/code&gt;子句也被称为&lt;strong&gt;异常处理代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常类&lt;/strong&gt;：用于在 &lt;code&gt;throw&lt;/code&gt;表达式和相关的 &lt;code&gt;catch&lt;/code&gt;子句之间传递异常的具体信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>4.表达式</title>
        <link>https://Salmooo.github.io/p/4.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <pubDate>Fri, 27 Jul 2018 20:38:41 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/4.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        <description>&lt;h1 id=&#34;第四章-表达式&#34;&gt;第四章 表达式
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md表达式基础表达式基础&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e8%a1%a8%e8%be%be%e5%bc%8f%e5%9f%ba%e7%a1%80&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;表达式基础
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运算对象转换&lt;/strong&gt;：小整数类型会被提升为较大的整数类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重载运算符&lt;/strong&gt;：当运算符作用在类类型的运算对象时，用户可以自行定义其含义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左值和右值&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;C中原意：左值&lt;strong&gt;可以&lt;/strong&gt;在表达式左边，右值不能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt;：当一个对象被用作&lt;strong&gt;右值&lt;/strong&gt;的时候，用的是对象的&lt;strong&gt;值&lt;/strong&gt;（内容）；&lt;/li&gt;
&lt;li&gt;被用做&lt;strong&gt;左值&lt;/strong&gt;时，用的是对象的&lt;strong&gt;身份&lt;/strong&gt;（在内存中的位置）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;求值顺序&lt;/strong&gt;：&lt;code&gt;int i = f1() + f2()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;先计算&lt;code&gt;f1() + f2()&lt;/code&gt;,再计算&lt;code&gt;int i = f1() + f2()&lt;/code&gt;。但是f1和f2的计算&lt;strong&gt;先后不确定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但是，如果f1、f2都对同一对象进行了修改，因为顺序不确定，所以会编译出错，显示未定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md算术运算符算术运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e7%ae%97%e6%9c%af%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;算术运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;溢出&lt;/strong&gt;：当计算的结果超出该类型所能表示的范围时就会产生溢出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;bool类型不应该参与计算&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//仍然为true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//b为true，提升为对应int=1，-b=-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//b2=-1≠0，所以b2仍未true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取余运算m%n，结果符号与m相同&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md逻辑运算符逻辑运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;逻辑运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短路求值&lt;/strong&gt;：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。&lt;strong&gt;先左再右&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小技巧，声明为引用类型可以避免对元素的拷贝，如下，如string特别大时可以节省大量时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md赋值运算符赋值运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e8%b5%8b%e5%80%bc%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;赋值运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;赋值运算的&lt;strong&gt;返回结果时它的左侧运算对象&lt;/strong&gt;，且是一个左值。类型也就是左侧对象的类型。&lt;/li&gt;
&lt;li&gt;如果赋值运算的左右侧运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。&lt;/li&gt;
&lt;li&gt;赋值运算符满足&lt;strong&gt;右结合律&lt;/strong&gt;，这点和其他二元运算符不一样。 &lt;code&gt;ival = jval = 0;&lt;/code&gt;等价于&lt;code&gt;ival = (jval = 0);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值运算优先级比较低，使用其当条件时应该加括号。&lt;/li&gt;
&lt;li&gt;复合赋值运算符，&lt;strong&gt;复合运算符只求值一次&lt;/strong&gt;，普通运算符求值两次。（对性能有一点点点点影响） 任意复合运算符op等价于&lt;code&gt;a = a op b;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md递增递减运算符递增递减运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e9%80%92%e5%a2%9e%e9%80%92%e5%87%8f%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;递增递减运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前置版本&lt;code&gt;j = ++i&lt;/code&gt;，先加一后赋值&lt;/li&gt;
&lt;li&gt;后置版本&lt;code&gt;j = i++&lt;/code&gt;，先赋值后加一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优先使用前置&lt;/strong&gt;版本，后置多一步储存原始值。（除非需要变化前的值）&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md混用解引用和递增运算符混用解引用和递增运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%b7%b7%e7%94%a8%e8%a7%a3%e5%bc%95%e7%94%a8%e5%92%8c%e9%80%92%e5%a2%9e%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;混用解引用和递增运算符
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;*iter++&lt;/code&gt;等价于&lt;code&gt;*(iter++)&lt;/code&gt;，递增优先级较高&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 输出当前值，指针向前移1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简介是一种美德&lt;/strong&gt;，追求简洁能降低程序出错可能性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md成员访问运算符成员访问运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%88%90%e5%91%98%e8%ae%bf%e9%97%ae%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;成员访问运算符
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ptr-&amp;gt;mem&lt;/code&gt;等价于&lt;code&gt;(*ptr).mem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;.&lt;/code&gt;运算符优先级大于&lt;code&gt;*&lt;/code&gt;，所以记得加括号&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md条件运算符条件运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%9d%a1%e4%bb%b6%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;条件运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件运算符（&lt;code&gt;?:&lt;/code&gt;）允许我们把简单的&lt;code&gt;if-else&lt;/code&gt;逻辑嵌入到单个表达式中去，按照如下形式：&lt;code&gt;cond? expr1: expr2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以嵌套使用，&lt;strong&gt;右结合律&lt;/strong&gt;，从右向左顺序组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;finalgrade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;high pass&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//等价于
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalgrade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;high pass&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出表达式使用条件运算符记得加括号，条件运算符优先级太低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md位运算符位运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e4%bd%8d%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;位运算符
&lt;/h2&gt;&lt;p&gt;用于检查和设置二进制位的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位运算符是作用于&lt;strong&gt;整数类型&lt;/strong&gt;的运算对象。&lt;/li&gt;
&lt;li&gt;二进制位向左移（&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;）或者向右移（&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;），移出边界外的位就被舍弃掉了。&lt;/li&gt;
&lt;li&gt;位取反（&lt;code&gt;~&lt;/code&gt;）（逐位求反）、与（&lt;code&gt;&amp;amp;&lt;/code&gt;）、或（&lt;code&gt;|&lt;/code&gt;）、异或（&lt;code&gt;^&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有符号数负值可能移位后变号，所以强烈建议&lt;strong&gt;位运算符仅用于无符号数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 每一位代表一个学生是否通过考试
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 代表第12个学生通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 将第12个学生置为已通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 将第12个学生修改为未通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu12&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 判断第12个学生是否通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;位运算符使用较少，但是重载cout、cin大家都用过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;位运算符满足左结合律，优先级介于中间，使用时尽量加括号。&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04mdsizeof运算符sizeof运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#sizeof%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;sizeof运算符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;返回一条表达式或一个类型名字所占的&lt;strong&gt;字节数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;返回的类型是 &lt;code&gt;size_t&lt;/code&gt;的常量表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt;并不实际计算其运算对象的值。&lt;/li&gt;
&lt;li&gt;两种形式：
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sizeof (type)&lt;/code&gt;，给出类型名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof expr&lt;/code&gt;，给出表达式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可用sizeof返回数组的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sizeof(ia)返回整个数组所占空间的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sizeof(ia)/sizeof(*ia)返回数组的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md逗号运算符逗号运算符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e9%80%97%e5%8f%b7%e8%bf%90%e7%ae%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;逗号运算符
&lt;/h2&gt;&lt;p&gt;从左向右依次求值。&lt;/p&gt;
&lt;p&gt;左侧求值结果丢弃，逗号运算符&lt;strong&gt;结果是右侧表达式&lt;/strong&gt;的值。&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md类型转换类型转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类型转换
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md隐式类型转换隐式类型转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e9%9a%90%e5%bc%8f%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;隐式类型转换
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;设计为尽可能避免损失精度，即转换为更精细类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;比 &lt;code&gt;int&lt;/code&gt;类型小的整数值先提升为较大的整数类型。&lt;/li&gt;
&lt;li&gt;条件中，非布尔转换成布尔。&lt;/li&gt;
&lt;li&gt;初始化中，初始值转换成变量的类型。&lt;/li&gt;
&lt;li&gt;算术运算或者关系运算的运算对象有多种类型，要转换成同一种类型。&lt;/li&gt;
&lt;li&gt;函数调用时也会有转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md算术转换算术转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e7%ae%97%e6%9c%af%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;算术转换
&lt;/h4&gt;&lt;h5 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md整型提升整型提升&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%95%b4%e5%9e%8b%e6%8f%90%e5%8d%87&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;整型提升
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;常见的char、bool、short能存在int就会转换成int，否则提升为&lt;code&gt;unsigned int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wchar_t,char16_t,char32_t&lt;/code&gt;提升为整型中&lt;code&gt;int,long,long long ……&lt;/code&gt;最小的，且能容纳原类型所有可能值的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md其他转换其他转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e5%85%b6%e4%bb%96%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;其他转换
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;p143&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md显式类型转换尽量避免显式类型转换尽量避免&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%98%be%e5%bc%8f%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2%e5%b0%bd%e9%87%8f%e9%81%bf%e5%85%8d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;显式类型转换（尽量避免）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt;：任何明确定义的类型转换，只要不包含底层const，都可以使用。 &lt;code&gt;double slope = static_cast&amp;lt;double&amp;gt;(j);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;dynamic_cast&lt;/strong&gt;：支持运行时类型识别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;const_cast&lt;/strong&gt;：只能改变运算对象的底层const，一般可用于去除const性质。 &lt;code&gt;const char *pc; char *p = const_cast&amp;lt;char*&amp;gt;(pc)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有其可以改变常量属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;reinterpret_cast&lt;/strong&gt;：通常为运算对象的位模式提供低层次上的重新解释。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md旧式强制类型转换旧式强制类型转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e6%97%a7%e5%bc%8f%e5%bc%ba%e5%88%b6%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;旧式强制类型转换
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;type expr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomapplenobcpp_primer_practiceblobmasternotesch04md运算符优先级表运算符优先级表&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/applenob/Cpp_Primer_Practice/blob/master/notes/ch04.md#%e8%bf%90%e7%ae%97%e7%ac%a6%e4%bc%98%e5%85%88%e7%ba%a7%e8%a1%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;运算符优先级表
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;p147&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>3.字符串，向量和数组</title>
        <link>https://Salmooo.github.io/p/3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</link>
        <pubDate>Thu, 26 Jul 2018 22:18:41 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/3.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
        <description>&lt;h1 id=&#34;第三章-字符串向量和数组&#34;&gt;第三章 字符串，向量和数组
&lt;/h1&gt;&lt;h2 id=&#34;using声明&#34;&gt;using声明
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用某个命名空间：例如 &lt;code&gt;using std::cin&lt;/code&gt;表示使用命名空间&lt;code&gt;std&lt;/code&gt;中的名字&lt;code&gt;cin&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;头文件中不应该包含&lt;code&gt;using&lt;/code&gt;声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988estringstring&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#string&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标准库类型&lt;code&gt;string&lt;/code&gt;表示可变长的字符序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;using std::string;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string对象&lt;/strong&gt;：注意，不同于字符串字面值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化string对象定义和初始化string对象&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96string%e5%af%b9%e8%b1%a1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化string对象
&lt;/h3&gt;&lt;p&gt;初始化&lt;code&gt;string&lt;/code&gt;对象的方式：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方式&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;默认初始化，&lt;code&gt;s1&lt;/code&gt;是个空字符串&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s2(s1)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s2 = s1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;s2(s1)&lt;/code&gt;，&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s3(&amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s3&lt;/code&gt;是字面值“value”的副本，除了字面值最后的那个空字符外&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s3 = &amp;quot;value&amp;quot;&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;s3(&amp;quot;value&amp;quot;)&lt;/code&gt;，&lt;code&gt;s3&lt;/code&gt;是字面值&amp;quot;value&amp;quot;的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;string s4(n, &#39;c&#39;)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;把&lt;code&gt;s4&lt;/code&gt;初始化为由连续&lt;code&gt;n&lt;/code&gt;个字符&lt;code&gt;c&lt;/code&gt;组成的串&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;拷贝初始化（copy initialization）：使用等号&lt;code&gt;=&lt;/code&gt;将一个已有的对象拷贝到正在创建的对象。&lt;/li&gt;
&lt;li&gt;直接初始化（direct initialization）：通过括号给对象赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988estring对象上的操作string对象上的操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#string%e5%af%b9%e8%b1%a1%e4%b8%8a%e7%9a%84%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;string对象上的操作
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;的操作：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; s&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;s&lt;/code&gt;写到输出流&lt;code&gt;os&lt;/code&gt;当中，返回&lt;code&gt;os&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; s&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取字符串赋给&lt;code&gt;s&lt;/code&gt;，字符串以空白分割，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;getline(is, s)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取一行赋给&lt;code&gt;s&lt;/code&gt;，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.empty()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;s&lt;/code&gt;为空返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中字符的个数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s[n]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个字符的引用，位置&lt;code&gt;n&lt;/code&gt;从0计起&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1+s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;连接后的结果&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1=s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;s2&lt;/code&gt;的副本代替&lt;code&gt;s1&lt;/code&gt;中原来的字符&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1==s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;如果&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;中所含的字符完全一样，则它们相等；&lt;code&gt;string&lt;/code&gt;对象的相等性判断对字母的大小写敏感&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;s1!=s2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;利用字符在字典中的顺序进行比较，且对字母的大小写敏感（对第一个不相同的位置进行比较）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;string io：
&lt;ul&gt;
&lt;li&gt;执行读操作&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline&lt;/code&gt;：读取一整行，&lt;strong&gt;包括空白符&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.size()&lt;/code&gt;返回的时&lt;code&gt;string::size_type&lt;/code&gt;类型，记住是一个&lt;strong&gt;无符号&lt;/strong&gt;类型的值，不要和&lt;code&gt;int&lt;/code&gt;混用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s1+s2&lt;/code&gt;使用时，保证至少一侧是string类型。&lt;code&gt;string s1 = &amp;quot;hello&amp;quot; + &amp;quot;world&amp;quot; // 错误，两侧均为字符串字面值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串字面值和string是不同的类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e处理string对象中的字符处理string对象中的字符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%a4%84%e7%90%86string%e5%af%b9%e8%b1%a1%e4%b8%ad%e7%9a%84%e5%ad%97%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;处理string对象中的字符
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ctype.h vs. cctype&lt;/strong&gt;：C++修改了c的标准库，名称为去掉&lt;code&gt;.h&lt;/code&gt;，前面加&lt;code&gt;c&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如c++版本为&lt;code&gt;cctype&lt;/code&gt;，c版本为&lt;code&gt;ctype.h&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尽量使用c++版本的头文件&lt;/strong&gt;，即&lt;code&gt;cctype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cctype&lt;/code&gt;头文件中定义了一组标准函数：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;函数&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isalnum(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母或数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isalpha(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iscntrl(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是控制字符时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isdigit(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isgraph(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;不是空格但可以打印时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;islower(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isprint(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是可打印字符时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;ispunct(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是标点符号时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isspace(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是空白时为真（空格、横向制表符、纵向制表符、回车符、换行符、进纸符）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isupper(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;isxdigit(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是十六进制数字时为真&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;tolower(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母，输出对应的小写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;toupper(c)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母，输出对应的大写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;遍历字符串：使用&lt;strong&gt;范围for&lt;/strong&gt;（range for）语句： &lt;code&gt;for (auto c: str)&lt;/code&gt;，或者 &lt;code&gt;for (auto &amp;amp;c: str)&lt;/code&gt;使用引用直接改变字符串中的字符。 （C++11）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str[x]&lt;/code&gt;,[]输入参数为&lt;code&gt;string::size_type&lt;/code&gt;类型，给出&lt;code&gt;int&lt;/code&gt;整型也会自动转化为该类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988evectorvector&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#vector&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;vector
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;vector是一个&lt;strong&gt;容器&lt;/strong&gt;，也是一个类模板；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt; 然后 &lt;code&gt;using std::vector;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器：包含其他对象。&lt;/li&gt;
&lt;li&gt;类模板：本身不是类，但可以&lt;strong&gt;实例化instantiation&lt;/strong&gt;出一个类。 &lt;code&gt;vector&lt;/code&gt;是一个模板， &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;是一个类型。&lt;/li&gt;
&lt;li&gt;通过将类型放在类模板名称后面的&lt;strong&gt;尖括号&lt;/strong&gt;中来指定&lt;strong&gt;类型&lt;/strong&gt;，如&lt;code&gt;vector&amp;lt;int&amp;gt; ivec&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化vector对象定义和初始化vector对象&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96vector%e5%af%b9%e8%b1%a1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化vector对象
&lt;/h3&gt;&lt;p&gt;初始化&lt;code&gt;vector&lt;/code&gt;对象的方法&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v1&lt;/code&gt;是一个空&lt;code&gt;vector&lt;/code&gt;，它潜在的元素是&lt;code&gt;T&lt;/code&gt;类型的，执行默认初始化&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2(v1)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v2&lt;/code&gt;中包含有&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2 = v1&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;v2(v1)&lt;/code&gt;，&lt;code&gt;v2&lt;/code&gt;中包含&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v3(n, val)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v3&lt;/code&gt;包含了n个重复的元素，每个元素的值都是&lt;code&gt;val&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v4(n)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v4&lt;/code&gt;包含了n个重复地执行了值初始化的对象&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v5&lt;/code&gt;包含了初始值个数的元素，每个元素被赋予相应的初始值&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5={a, b, c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;列表初始化： &lt;code&gt;vector&amp;lt;string&amp;gt; v{&amp;quot;a&amp;quot;, &amp;quot;an&amp;quot;, &amp;quot;the&amp;quot;};&lt;/code&gt; （C++11）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e向vector对象中添加元素向vector对象中添加元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%90%91vector%e5%af%b9%e8%b1%a1%e4%b8%ad%e6%b7%bb%e5%8a%a0%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;向vector对象中添加元素
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v.push_back(e)&lt;/code&gt; 在尾部增加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e其他vector操作其他vector操作&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%85%b6%e4%bb%96vector%e6%93%8d%e4%bd%9c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;其他vector操作
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;支持的操作：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;操作&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.emtpy()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;如果&lt;code&gt;v&lt;/code&gt;不含有任何元素，返回真；否则返回假&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.size()&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中元素的个数&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v.push_back(t)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;向&lt;code&gt;v&lt;/code&gt;的尾端添加一个值为&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v[n]&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个位置上元素的&lt;strong&gt;引用&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 = v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用&lt;code&gt;v2&lt;/code&gt;中的元素拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 = {a,b,c...}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用列表中元素的拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 == v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;相等当且仅当它们的元素数量相同且对应位置的元素值都相同&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;v1 != v2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;同上&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;lt;=&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;以字典顺序进行比较&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;范围&lt;code&gt;for&lt;/code&gt;语句内不应该改变其遍历序列的大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;对象（以及&lt;code&gt;string&lt;/code&gt;对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e迭代器iterator迭代器iterator&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%bf%ad%e4%bb%a3%e5%99%a8iterator&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代器iterator
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所有标准库容器都可以使用迭代器。&lt;/li&gt;
&lt;li&gt;类似于指针类型，迭代器也提供了对对象的间接访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e使用迭代器使用迭代器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e4%bd%bf%e7%94%a8%e8%bf%ad%e4%bb%a3%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;使用迭代器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;int&amp;gt;::iterator iter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto b = v.begin();&lt;/code&gt;返回指向第一个元素的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto e = v.end();&lt;/code&gt;返回指向最后一个元素的下一个（哨兵，尾后,one past the end）的迭代器（off the end）。&lt;/li&gt;
&lt;li&gt;如果容器为空， &lt;code&gt;begin()&lt;/code&gt;和 &lt;code&gt;end()&lt;/code&gt;返回的是同一个迭代器，都是尾后迭代器。&lt;/li&gt;
&lt;li&gt;使用解引用符&lt;code&gt;*&lt;/code&gt;访问迭代器指向的元素。&lt;/li&gt;
&lt;li&gt;养成使用迭代器和&lt;code&gt;!=&lt;/code&gt;的习惯（泛型编程）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器&lt;/strong&gt;：可以包含其他对象；但所有的对象必须类型相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代器（iterator）&lt;/strong&gt;：每种标准容器都有自己的迭代器。&lt;code&gt;C++&lt;/code&gt;倾向于用迭代器而不是下标遍历元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const_iterator&lt;/strong&gt;：只能读取容器内元素不能改变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;箭头运算符&lt;/strong&gt;： 解引用 + 成员访问，&lt;code&gt;it-&amp;gt;mem&lt;/code&gt;等价于 &lt;code&gt;(*it).mem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨记&lt;/strong&gt;：但凡是使用了&lt;strong&gt;迭代器&lt;/strong&gt;的循环体，都&lt;strong&gt;不要&lt;/strong&gt;向迭代器所属的容器&lt;strong&gt;添加元素&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准容器迭代器的运算符:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;运算符&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;*iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回迭代器&lt;code&gt;iter&lt;/code&gt;所指向的&lt;strong&gt;元素的引用&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter-&amp;gt;mem&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;等价于&lt;code&gt;(*iter).mem&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;++iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的下一个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;--iter&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的上一个元素&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 == iter2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;判断两个迭代器是否相等&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e迭代器运算迭代器运算&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%bf%ad%e4%bb%a3%e5%99%a8%e8%bf%90%e7%ae%97&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;迭代器运算
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;迭代器支持的运算：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;运算符&lt;/th&gt;
          &lt;th&gt;解释&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter + n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置和原来相比向前移动了若干个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter - n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器减去一个整数仍得到一个迭代器，迭代器指示的新位置比原来向后移动了若干个元素。结果迭代器或者指向容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 += n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器加法的复合赋值语句，将&lt;code&gt;iter1&lt;/code&gt;加n的结果赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 -= n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器减法的复合赋值语句，将&lt;code&gt;iter2&lt;/code&gt;减n的加过赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;iter1 - iter2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;两个迭代器相减的结果是它们之间的距离，也就是说，将运算符右侧的迭代器向前移动差值个元素后得到左侧的迭代器。参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;迭代器的关系运算符，如果某迭代器&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;difference_type&lt;/strong&gt;：保证足够大以存储任何两个迭代器对象间的距离，可正可负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e数组数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;相当于vector的低级版，&lt;strong&gt;长度固定&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e定义和初始化内置数组定义和初始化内置数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%ae%9a%e4%b9%89%e5%92%8c%e5%88%9d%e5%a7%8b%e5%8c%96%e5%86%85%e7%bd%ae%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;定义和初始化内置数组
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;初始化：&lt;code&gt;char input_buffer[buffer_size];&lt;/code&gt;，长度必须是const表达式，或者不写，让编译器自己推断。&lt;/li&gt;
&lt;li&gt;数组不允许直接赋值给另一个数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e访问数组元素访问数组元素&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e8%ae%bf%e9%97%ae%e6%95%b0%e7%bb%84%e5%85%83%e7%b4%a0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;访问数组元素
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数组下标的类型：&lt;code&gt;size_t&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;字符数组的特殊性：结尾处有一个空字符，如 &lt;code&gt;char a[] = &amp;quot;hello&amp;quot;;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;用数组初始化 &lt;code&gt;vector&lt;/code&gt;： &lt;code&gt;int a[] = {1,2,3,4,5}; vector&amp;lt;int&amp;gt; v(begin(a), end(a));&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e数组和指针数组和指针&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%95%b0%e7%bb%84%e5%92%8c%e6%8c%87%e9%92%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;数组和指针
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用数组时，编译器一般会把它转换成指针。&lt;/li&gt;
&lt;li&gt;标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针访问数组&lt;/strong&gt;：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988ec风格字符串c风格字符串&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#c%e9%a3%8e%e6%a0%bc%e5%ad%97%e7%ac%a6%e4%b8%b2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;C风格字符串
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从C继承来的字符串。&lt;/li&gt;
&lt;li&gt;用空字符结束（&lt;code&gt;\0&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;对大多数应用来说，使用标准库 &lt;code&gt;string&lt;/code&gt;比使用C风格字符串更安全、更高效。&lt;/li&gt;
&lt;li&gt;获取 &lt;code&gt;string&lt;/code&gt; 中的 &lt;code&gt;cstring&lt;/code&gt; ： &lt;code&gt;const char *str = s.c_str();&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C标准库String函数，定义在&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt; 中：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;函数&lt;/th&gt;
          &lt;th&gt;介绍&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strlen(p)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的长度，空字符不计算在内&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcmp(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;比较&lt;code&gt;p1&lt;/code&gt;和&lt;code&gt;p2&lt;/code&gt;的相等性。如果&lt;code&gt;p1==p2&lt;/code&gt;，返回0；如果&lt;code&gt;p1&amp;gt;p2&lt;/code&gt;，返回一个正值；如果&lt;code&gt;p1&amp;lt;p2&lt;/code&gt;，返回一个负值。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcat(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;附加到&lt;code&gt;p1&lt;/code&gt;之后，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;strcpy(p1, p2)&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;拷贝给&lt;code&gt;p1&lt;/code&gt;，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;尽量使用vector和迭代器，少用数组&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e多维数组多维数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%a4%9a%e7%bb%b4%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;多维数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多维数组的初始化&lt;/strong&gt;： &lt;code&gt;int ia[3][4] = {{0,1,2,3}, ...}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用范围for语句时，除了最内层的循环外，其他所有循环的控制变量都应该是&lt;strong&gt;引用&lt;/strong&gt;类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e指针vs引用指针vs引用&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%8c%87%e9%92%88vs%e5%bc%95%e7%94%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指针vs引用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引用总是指向某个对象，定义引用时没有初始化是错的。&lt;/li&gt;
&lt;li&gt;给引用赋值，修改的是该引用所关联的对象的值，而不是让引用和另一个对象相关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e指向指针的指针指向指针的指针&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e6%8c%87%e5%90%91%e6%8c%87%e9%92%88%e7%9a%84%e6%8c%87%e9%92%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指向指针的指针
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;定义： &lt;code&gt;int **ppi = &amp;amp;pi;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解引用：&lt;code&gt;**ppi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch03mdusinge5a3b0e6988e动态数组动态数组&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch03.md#using%E5%A3%B0%E6%98%8E#%e5%8a%a8%e6%80%81%e6%95%b0%e7%bb%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;动态数组
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;new&lt;/code&gt;和 &lt;code&gt;delete&lt;/code&gt;表达和c中&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;类似的功能，即在堆（自由存储区）中分配存储空间。&lt;/li&gt;
&lt;li&gt;定义： &lt;code&gt;int *pia = new int[10];&lt;/code&gt; 10可以被一个变量替代。&lt;/li&gt;
&lt;li&gt;释放： &lt;code&gt;delete [] pia;&lt;/code&gt;，注意不要忘记&lt;code&gt;[]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>2.变量类型</title>
        <link>https://Salmooo.github.io/p/2.%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</link>
        <pubDate>Wed, 25 Jul 2018 19:12:19 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/2.%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/</guid>
        <description>&lt;h1 id=&#34;第二章-变量和基本类型&#34;&gt;第二章 变量和基本类型
&lt;/h1&gt;&lt;p&gt;任何常用的编程语言都具备一组公共的语法特征，最基本的特征包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型、字符型等内置类型&lt;/li&gt;
&lt;li&gt;变量，用来为对象命名&lt;/li&gt;
&lt;li&gt;表达式和语句，用于操作上述数据类型的具体值&lt;/li&gt;
&lt;li&gt;if 或 while 等控制结构，有选择地执行一些语句或重复地执行一些语句&lt;/li&gt;
&lt;li&gt;函数，用于定义可供随时调用的计算单元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数编程语言通过两种方式来进一步补充其基本特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义数据类型，实现对语言的扩展&lt;/li&gt;
&lt;li&gt;将一些有用的功能封装成库函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md基本内置类型基本内置类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%9f%ba%e6%9c%ac%e5%86%85%e7%bd%ae%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;基本内置类型
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;基本算数类型&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;类型&lt;/th&gt;
          &lt;th&gt;含义&lt;/th&gt;
          &lt;th&gt;最小尺寸&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;布尔类型&lt;/td&gt;
          &lt;td&gt;8bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;字符&lt;/td&gt;
          &lt;td&gt;8bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;宽字符&lt;/td&gt;
          &lt;td&gt;16bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Unicode字符&lt;/td&gt;
          &lt;td&gt;16bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Unicode字符&lt;/td&gt;
          &lt;td&gt;32bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;short&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;短整型&lt;/td&gt;
          &lt;td&gt;16bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;整型&lt;/td&gt;
          &lt;td&gt;16bits (在32位机器中是32bits)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;长整型&lt;/td&gt;
          &lt;td&gt;32bits&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;长整型&lt;/td&gt;
          &lt;td&gt;64bits （是在C++11中新定义的）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;单精度浮点数&lt;/td&gt;
          &lt;td&gt;6位有效数字&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;双精度浮点数&lt;/td&gt;
          &lt;td&gt;10位有效数字&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;扩展精度浮点数&lt;/td&gt;
          &lt;td&gt;10位有效数字&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md如何选择类型如何选择类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;如何选择类型
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1.当明确知晓数值不可能是负数时，选用无符号类型；&lt;/li&gt;
&lt;li&gt;2.使用&lt;code&gt;int&lt;/code&gt;执行整数运算。一般&lt;code&gt;long&lt;/code&gt;的大小和&lt;code&gt;int&lt;/code&gt;一样，而&lt;code&gt;short&lt;/code&gt;常常显得太小。除非超过了&lt;code&gt;int&lt;/code&gt;的范围，选择&lt;code&gt;long long&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;3.算术表达式中不要使用&lt;code&gt;char&lt;/code&gt;或&lt;code&gt;bool&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;4.浮点运算选用&lt;code&gt;double&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md类型转换类型转换&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类型转换
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非布尔型赋给布尔型，初始值为0则结果为false，否则为true。&lt;/li&gt;
&lt;li&gt;布尔型赋给非布尔型，初始值为false结果为0，初始值为true结果为1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md字面值常量字面值常量&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%ad%97%e9%9d%a2%e5%80%bc%e5%b8%b8%e9%87%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;字面值常量
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;一个形如&lt;code&gt;42&lt;/code&gt;的值被称作&lt;strong&gt;字面值常量&lt;/strong&gt;（literal）。
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;整型和浮点型字面值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符和字符串字面值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用空格连接，继承自C。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符字面值：单引号， &lt;code&gt;&#39;a&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串字面值：双引号， &lt;code&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分多行书写字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wow, a really, really long string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;s&#34;&gt;&amp;#34;literal that spans two lines&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;转义序列。&lt;code&gt;\n&lt;/code&gt;、&lt;code&gt;\t&lt;/code&gt;等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布尔字面值。&lt;code&gt;true&lt;/code&gt;，&lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针字面值。&lt;code&gt;nullptr&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串型实际上时常量字符构成的数组，结尾处以&lt;code&gt;&#39;\0&#39;&lt;/code&gt;结束，所以字符串类型实际上长度比内容多1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md变量变量&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%8f%98%e9%87%8f&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;变量
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;提供一个&lt;strong&gt;具名&lt;/strong&gt;的、可供程序操作的存储空间。 &lt;code&gt;C++&lt;/code&gt;中&lt;strong&gt;变量&lt;/strong&gt;和&lt;strong&gt;对象&lt;/strong&gt;一般可以互换使用。&lt;/p&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md变量定义define变量定义define&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%8f%98%e9%87%8f%e5%ae%9a%e4%b9%89define&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;变量定义（define）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义形式&lt;/strong&gt;：类型说明符（type specifier） + 一个或多个变量名组成的列表。如&lt;code&gt;int sum = 0, value, units_sold = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;（initialize）：对象在创建时获得了一个特定的值。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初始化不是赋值！&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;初始化 = 创建变量 + 赋予初始值&lt;/li&gt;
&lt;li&gt;赋值 = 擦除对象的当前值 + 用新值代替&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表初始化&lt;/strong&gt;：使用花括号&lt;code&gt;{}&lt;/code&gt;，如&lt;code&gt;int units_sold{0};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认初始化：定义时没有指定初始值会被默认初始化；&lt;strong&gt;在函数体内部的内置类型变量将不会被初始化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;建议初始化每一个内置类型的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md变量的声明declaration-vs-定义define变量的声明declaration-vs-定义define&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%8f%98%e9%87%8f%e7%9a%84%e5%a3%b0%e6%98%8edeclaration-vs-%e5%ae%9a%e4%b9%89define&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;变量的&lt;strong&gt;声明&lt;/strong&gt;（declaration） vs &lt;strong&gt;定义&lt;/strong&gt;（define）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为了支持分离式编译，&lt;code&gt;C++&lt;/code&gt;将声明和定义区分开。&lt;strong&gt;声明&lt;/strong&gt;使得名字为程序所知。&lt;strong&gt;定义&lt;/strong&gt;负责创建与名字关联的实体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extern&lt;/strong&gt;：只是说明变量定义在其他地方。&lt;/li&gt;
&lt;li&gt;只声明而不定义： 在变量名前添加关键字 &lt;code&gt;extern&lt;/code&gt;，如&lt;code&gt;extern int i;&lt;/code&gt;。但如果包含了初始值，就变成了定义：&lt;code&gt;extern double pi = 3.14;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量只能被定义一次，但是可以多次声明。定义只出现在一个文件中，其他文件使用该变量时需要对其声明。&lt;/li&gt;
&lt;li&gt;名字的&lt;strong&gt;作用域&lt;/strong&gt;（namescope）&lt;code&gt;{}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一次使用变量时再定义它&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;嵌套的作用域
&lt;ul&gt;
&lt;li&gt;同时存在全局和局部变量时，已定义局部变量的作用域中可用&lt;code&gt;::reused&lt;/code&gt;显式访问全局变量reused。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;但是用到全局变量时，尽量不适用重名的局部变量。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md变量命名规范变量命名规范&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%8f%98%e9%87%8f%e5%91%bd%e5%90%8d%e8%a7%84%e8%8c%83&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;变量命名规范
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;需体现实际意义&lt;/li&gt;
&lt;li&gt;变量名用小写字母&lt;/li&gt;
&lt;li&gt;自定义类名用大写字母开头：Sales_item&lt;/li&gt;
&lt;li&gt;标识符由多个单词组成，中间须有明确区分：student_loan或studentLoan，不要用studentloan。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md左值和右值左值和右值&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%b7%a6%e5%80%bc%e5%92%8c%e5%8f%b3%e5%80%bc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;左值和右值
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;左值&lt;/strong&gt;（l-value）&lt;strong&gt;可以&lt;/strong&gt;出现在赋值语句的左边或者右边，比如变量；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右值&lt;/strong&gt;（r-value）&lt;strong&gt;只能&lt;/strong&gt;出现在赋值语句的右边，比如常量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md复合类型复合类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%a4%8d%e5%90%88%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;复合类型
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md引用引用&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%bc%95%e7%94%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;引用
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一般说的引用是指的左值引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;引用&lt;/strong&gt;：引用是一个对象的别名，引用类型引用（refer to）另外一种类型。如&lt;code&gt;int &amp;amp;refVal = val;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;引用必须初始化。&lt;/li&gt;
&lt;li&gt;引用和它的初始值是&lt;strong&gt;绑定bind&lt;/strong&gt;在一起的，而&lt;strong&gt;不是拷贝&lt;/strong&gt;。一旦定义就不能更改绑定为其他的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md指针指针&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e6%8c%87%e9%92%88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指针
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;int *p; //&lt;strong&gt;指向int型对象&lt;/strong&gt;的指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是一种 &lt;code&gt;&amp;quot;指向（point to）&amp;quot;&lt;/code&gt;另外一种类型的复合类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;指针类型： &lt;code&gt;int *ip1;&lt;/code&gt;，&lt;strong&gt;从右向左读有助于阅读&lt;/strong&gt;，&lt;code&gt;ip1&lt;/code&gt;是指向&lt;code&gt;int&lt;/code&gt;类型的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针存放某个对象的&lt;strong&gt;地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取对象的地址： &lt;code&gt;int i=42; int *p = &amp;amp;i;&lt;/code&gt;。 &lt;code&gt;&amp;amp;&lt;/code&gt;是&lt;strong&gt;取地址符&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的类型与所指向的对象类型必须一致（均为同一类型int、double等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的值的四种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.指向一个对象；&lt;/li&gt;
&lt;li&gt;2.指向紧邻对象的下一个位置；&lt;/li&gt;
&lt;li&gt;3.空指针；&lt;/li&gt;
&lt;li&gt;4.无效指针。&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对无效指针的操作均会引发错误，第二种和第三种虽为有效的，但理论上是不被允许的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针访问对象： &lt;code&gt;cout &amp;lt;&amp;lt; *p;&lt;/code&gt;输出p指针所指对象的数据， &lt;code&gt;*&lt;/code&gt;是&lt;strong&gt;解引用符&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空指针不指向任何对象。使用&lt;code&gt;int *p=nullptr;&lt;/code&gt;来使用空指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;指针和引用的区别：引用本身并非一个对象，引用定义后就不能绑定到其他的对象了；指针并没有此限制，相当于变量一样使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;赋值语句永远改变的是&lt;strong&gt;左侧&lt;/strong&gt;的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void*&lt;/code&gt;指针可以存放&lt;strong&gt;任意&lt;/strong&gt;对象的地址。因无类型，仅操作内存空间，对所存对象无法访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他指针类型必须要与所指对象&lt;strong&gt;严格匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个指针相减的类型是&lt;code&gt;ptrdiff_t&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议：初始化所有指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int* p1, p2;//*是对p1的修饰，所以p2还是int型&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mdconst限定符const限定符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#const%e9%99%90%e5%ae%9a%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;const限定符
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;动机：希望定义一些不能被改变值的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md初始化和const初始化和const&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%88%9d%e5%a7%8b%e5%8c%96%e5%92%8cconst&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;初始化和const
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;const对象&lt;strong&gt;必须初始化&lt;/strong&gt;，且&lt;strong&gt;不能被改变&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;const变量默认不能被其他文件访问，非要访问，必须在指定const定义之前加extern。要想在多个文件中使用const变量共享，定义和声明都加const关键字即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mdconst的引用const的引用&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#const%e7%9a%84%e5%bc%95%e7%94%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;const的引用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reference to const&lt;/strong&gt;（对常量的引用）：指向const对象的引用，如 &lt;code&gt;const int ival=1; const int &amp;amp;refVal = ival;&lt;/code&gt;，可以读取但不能修改&lt;code&gt;refVal&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;临时量&lt;/strong&gt;（temporary）对象：当编译器需要一个空间来暂存表达式的求值结果时，临时创建的一个未命名的对象。&lt;/li&gt;
&lt;li&gt;对临时量的引用是非法行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md指针和const指针和const&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e6%8c%87%e9%92%88%e5%92%8cconst&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;指针和const
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pointer to const&lt;/strong&gt;（指向常量的指针）：不能用于改变其所指对象的值, 如 &lt;code&gt;const double pi = 3.14; const double *cptr = &amp;amp;pi;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const pointer&lt;/strong&gt;：指针本身是常量，也就是说指针固定指向该对象，（存放在指针中的地址不变，地址所对应的那个对象值可以修改）如 &lt;code&gt;int i = 0; int *const ptr = &amp;amp;i;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md顶层const顶层const&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e9%a1%b6%e5%b1%82const&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;顶层const
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;顶层const&lt;/code&gt;：指针本身是个常量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;底层const&lt;/code&gt;：指针指向的对象是个常量。拷贝时严格要求相同的底层const资格。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mdconstexpr和常量表达式可选constexpr和常量表达式可选&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#constexpr%e5%92%8c%e5%b8%b8%e9%87%8f%e8%a1%a8%e8%be%be%e5%bc%8f%e5%8f%af%e9%80%89&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;code&gt;constexpr&lt;/code&gt;和常量表达式（▲可选）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;常量表达式：指值不会改变，且在编译过程中就能得到计算结果的表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt;新标准规定，允许将变量声明为&lt;code&gt;constexpr&lt;/code&gt;类型以便由编译器来验证变量的值是否是一个常量的表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md处理类型处理类型&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e5%a4%84%e7%90%86%e7%b1%bb%e5%9e%8b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;处理类型
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md类型别名类型别名&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e7%b1%bb%e5%9e%8b%e5%88%ab%e5%90%8d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;类型别名
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;传统别名：使用&lt;strong&gt;typedef&lt;/strong&gt;来定义类型的同义词。 &lt;code&gt;typedef double wages;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新标准别名：别名声明（alias declaration）： &lt;code&gt;using SI = Sales_item;&lt;/code&gt;（C++11）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 对于复合类型（指针等）不能代回原式来进行理解
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pstring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pstring是char*的别名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pstring&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cstr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 指向char的常量指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 如改写为const char *cstr = 0;不正确，为指向const char的指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 辅助理解（可代回后加括号）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// const pstring cstr = 0;代回后const (char *) cstr = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// const char *cstr = 0;即为(const char *) cstr = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mdauto类型说明符-c11auto类型说明符-c11&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#auto%e7%b1%bb%e5%9e%8b%e8%af%b4%e6%98%8e%e7%ac%a6-c11&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;auto类型说明符 c++11
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt;类型说明符：让编译器&lt;strong&gt;自动推断类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一条声明语句只能有一个数据类型，所以一个auto声明多个变量时只能相同的变量类型(包括复杂类型&amp;amp;和*)。&lt;code&gt;auto sz = 0, pi =3.14//错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int i = 0, &amp;amp;r = i; auto a = r;&lt;/code&gt; 推断&lt;code&gt;a&lt;/code&gt;的类型是&lt;code&gt;int&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;会忽略&lt;code&gt;顶层const&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const int ci = 1; const auto f = ci;&lt;/code&gt;推断类型是&lt;code&gt;int&lt;/code&gt;，如果希望是顶层const需要自己加&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mddecltype类型指示符decltype类型指示符&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#decltype%e7%b1%bb%e5%9e%8b%e6%8c%87%e7%a4%ba%e7%ac%a6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;decltype类型指示符
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从表达式的类型推断出要定义的变量的类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;decltype&lt;/strong&gt;：选择并返回操作数的&lt;strong&gt;数据类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decltype(f()) sum = x;&lt;/code&gt; 推断&lt;code&gt;sum&lt;/code&gt;的类型是函数&lt;code&gt;f&lt;/code&gt;的返回类型。&lt;/li&gt;
&lt;li&gt;不会忽略&lt;code&gt;顶层const&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果对变量加括号，编译器会将其认为是一个表达式，如int i&amp;ndash;&amp;gt;(i),则decltype((i))得到结果为int&amp;amp;引用。&lt;/li&gt;
&lt;li&gt;赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i=x 的类型是 int&amp;amp;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md自定义数据结构自定义数据结构&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e8%87%aa%e5%ae%9a%e4%b9%89%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;自定义数据结构
&lt;/h2&gt;&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02mdstructstruct&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#struct&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;struct
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;尽量不要吧类定义和对象定义放在一起。如&lt;code&gt;struct Student{} xiaoming,xiaofang;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;类可以以关键字&lt;code&gt;struct&lt;/code&gt;开始，紧跟类名和类体。&lt;/li&gt;
&lt;li&gt;类数据成员：类体定义类的成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt;：可以为类数据成员提供一个&lt;strong&gt;类内初始值&lt;/strong&gt;（in-class initializer）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch02md编写自己的头文件编写自己的头文件&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch02.md#%e7%bc%96%e5%86%99%e8%87%aa%e5%b7%b1%e7%9a%84%e5%a4%b4%e6%96%87%e4%bb%b6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;编写自己的头文件
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;头文件通常包含哪些只能被定义一次的实体：类、&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;constexpr&lt;/code&gt;变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预处理器概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;预处理器&lt;/strong&gt;（preprocessor）：确保头文件多次包含仍能安全工作。&lt;/li&gt;
&lt;li&gt;当预处理器看到&lt;code&gt;#include&lt;/code&gt;标记时，会用指定的头文件内容代替&lt;code&gt;#include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头文件保护符&lt;/strong&gt;（header guard）：头文件保护符依赖于预处理变量的状态：已定义和未定义。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#indef&lt;/code&gt;已定义时为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#inndef&lt;/code&gt;未定义时为真&lt;/li&gt;
&lt;li&gt;头文件保护符的名称需要唯一，且保持全部大写。养成良好习惯，不论是否该头文件被包含，要加保护符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef SALES_DATA_H  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//SALES_DATA_H未定义时为真
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define SALES_DATA_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sale_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>1.开始</title>
        <link>https://Salmooo.github.io/p/1.%E5%BC%80%E5%A7%8B/</link>
        <pubDate>Tue, 24 Jul 2018 15:25:20 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/1.%E5%BC%80%E5%A7%8B/</guid>
        <description>&lt;h1 id=&#34;第一章-开始&#34;&gt;第一章 开始
&lt;/h1&gt;&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01md熟悉编译器熟悉编译器&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#%e7%86%9f%e6%82%89%e7%bc%96%e8%af%91%e5%99%a8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;熟悉编译器
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;g++&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译：&lt;code&gt;g++ --std=c++11 ch01.cpp -o main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行：&lt;code&gt;./prog1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看运行状态：&lt;code&gt;echo $?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译多个文件:&lt;code&gt;g++ ch2.cpp Sales_item.cc -o main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入 &lt;code&gt;g++ --help&lt;/code&gt;，查看编译器选项：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage: g++ [options] file...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -pass-exit-codes         Exit with highest error code from a phase
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --help                   Display this information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --target-help            Display target specific command line options
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           Display specific types of command line options
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  (Use &amp;#39;-v --help&amp;#39; to display command line options of sub-processes)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --version                Display compiler version information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -dumpspecs               Display all of the built in spec strings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -dumpversion             Display the version of the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -dumpmachine             Display the compiler&amp;#39;s target processor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-search-dirs       Display the directories in the compiler&amp;#39;s search path
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-libgcc-file-name  Display the name of the compiler&amp;#39;s companion library
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-file-name=&amp;lt;lib&amp;gt;   Display the full path to library &amp;lt;lib&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-prog-name=&amp;lt;prog&amp;gt;  Display the full path to compiler component &amp;lt;prog&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-multiarch         Display the target&amp;#39;s normalized GNU triplet, used as
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           a component in the library path
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-multi-directory   Display the root directory for versions of libgcc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-multi-lib         Display the mapping between command line options and
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           multiple library search directories
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-multi-os-directory Display the relative path to OS libraries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-sysroot           Display the target libraries directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Wa,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the assembler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Wp,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the preprocessor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Wl,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the linker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Xassembler &amp;lt;arg&amp;gt;        Pass &amp;lt;arg&amp;gt; on to the assembler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Xpreprocessor &amp;lt;arg&amp;gt;     Pass &amp;lt;arg&amp;gt; on to the preprocessor
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -Xlinker &amp;lt;arg&amp;gt;           Pass &amp;lt;arg&amp;gt; on to the linker
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -save-temps              Do not delete intermediate files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -save-temps=&amp;lt;arg&amp;gt;        Do not delete intermediate files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -no-canonical-prefixes   Do not canonicalize paths when building relative
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           prefixes to other gcc components
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -pipe                    Use pipes rather than intermediate files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -time                    Time the execution of each subprocess
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -specs=&amp;lt;file&amp;gt;            Override built-in specs with the contents of &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -std=&amp;lt;standard&amp;gt;          Assume that the input sources are for &amp;lt;standard&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --sysroot=&amp;lt;directory&amp;gt;    Use &amp;lt;directory&amp;gt; as the root directory for headers
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           and libraries
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -B &amp;lt;directory&amp;gt;           Add &amp;lt;directory&amp;gt; to the compiler&amp;#39;s search paths
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -v                       Display the programs invoked by the compiler
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -###                     Like -v but options quoted and commands not executed
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -E                       Preprocess only; do not compile, assemble or link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -S                       Compile only; do not assemble or link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -c                       Compile and assemble, but do not link
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -o &amp;lt;file&amp;gt;                Place the output into &amp;lt;file&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -pie                     Create a position independent executable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -shared                  Create a shared library
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  -x &amp;lt;language&amp;gt;            Specify the language of the following input files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           Permissible languages include: c c++ assembler none
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           &amp;#39;none&amp;#39; means revert to the default behavior of
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                           guessing the language based on the file&amp;#39;s extension
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输入 &lt;code&gt;g++ -v --help&lt;/code&gt;可以看到更完整的指令。 例如还有些常用的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-h FILENAME, -soname FILENAME: Set internal name of shared library
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-I PROGRAM, --dynamic-linker PROGRAM: Set PROGRAM as the dynamic linker to use
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-l LIBNAME, --library LIBNAME: Search for library LIBNAME
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-L DIRECTORY, --library-path DIRECTORY: Add DIRECTORY to library search path
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;获得程序状态&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;windows: &lt;code&gt;echo %ERRORLEVEL%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UNIX: &lt;code&gt;echo $?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01mdioio&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;IO
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cin &amp;gt;&amp;gt; v1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记住&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;返回的结果都是左操作数，也就是输入流和输出流本身。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;endl&lt;/strong&gt;：这是一个被称为&lt;strong&gt;操纵符&lt;/strong&gt;（manipulator）的特殊值，效果是结束当前行，并将设备关联的缓冲区（buffer）中的内容刷到设备中。&lt;/p&gt;
&lt;p&gt;UNIX和Mac下键盘输入文件结束符：&lt;code&gt;ctrl+d&lt;/code&gt;，Windows下：&lt;code&gt;ctrl+z&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;头文件&lt;/strong&gt;：类的类型一般存储在头文件中，标准库的头文件使用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，非标准库的头文件使用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。申明写在&lt;code&gt;.h&lt;/code&gt;文件，定义实现写在&lt;code&gt;.cpp&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免多次包含同一头文件&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Definition of Sales_itemclass and related functions goes here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;成员函数（类方法）&lt;/strong&gt;：使用&lt;code&gt;.&lt;/code&gt;调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间（namespace）&lt;/strong&gt;：使用作用域运算符&lt;code&gt;::&lt;/code&gt;调用。&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01md注释注释&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#%e6%b3%a8%e9%87%8a&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;注释
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单行注释： &lt;code&gt;//&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行注释： &lt;code&gt;/**/&lt;/code&gt;。编译器将&lt;code&gt;/*&lt;/code&gt;和&lt;code&gt;*/&lt;/code&gt;之间的内容都作为注释内容忽略。注意不能嵌套。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 多行注释格式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 每一行加一个*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01mdwhile语句while语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#while%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;while语句
&lt;/h2&gt;&lt;p&gt;循环执行，（直到条件（condition）为假。&lt;/p&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01mdfor语句for语句&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#for%e8%af%ad%e5%8f%a5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;for语句
&lt;/h2&gt;&lt;p&gt;循环头由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个初始化语句（init-statement）&lt;/li&gt;
&lt;li&gt;一个循环条件（condition）&lt;/li&gt;
&lt;li&gt;一个表达式（expression）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httpsgithubcomsalmooocpp_primer_practiceblobmasternotesch01md使用文件重定向使用文件重定向&#34;&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Salmooo/Cpp_Primer_Practice/blob/master/notes/ch01.md#%e4%bd%bf%e7%94%a8%e6%96%87%e4%bb%b6%e9%87%8d%e5%ae%9a%e5%90%91&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;使用文件重定向
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;./main &amp;lt;infile &amp;gt;outfile&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello_world</title>
        <link>https://Salmooo.github.io/p/hello_world/</link>
        <pubDate>Wed, 18 Jul 2018 17:01:01 +0800</pubDate>
        
        <guid>https://Salmooo.github.io/p/hello_world/</guid>
        <description>&lt;h1 id=&#34;hello-world&#34;&gt;Hello World!
&lt;/h1&gt;</description>
        </item>
        <item>
        <title>Hugo部署入门</title>
        <link>https://Salmooo.github.io/p/hugo%E9%83%A8%E7%BD%B2%E5%85%A5%E9%97%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://Salmooo.github.io/p/hugo%E9%83%A8%E7%BD%B2%E5%85%A5%E9%97%A8/</guid>
        <description>&lt;h1 id=&#34;hugo中文文档&#34;&gt;Hugo中文文档
&lt;/h1&gt;&lt;p&gt;Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。&lt;/p&gt;
&lt;h1 id=&#34;快速开始&#34;&gt;快速开始
&lt;/h1&gt;&lt;h3 id=&#34;安装hugo&#34;&gt;安装Hugo
&lt;/h3&gt;&lt;h4 id=&#34;1-二进制安装推荐简单快速&#34;&gt;1. 二进制安装（推荐：简单、快速）
&lt;/h4&gt;&lt;p&gt;到 &lt;a class=&#34;link&#34; href=&#34;https://github.com/spf13/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Releases&lt;/a&gt; 下载对应的操作系统版本的Hugo二进制文件（hugo或者hugo.exe）&lt;/p&gt;
&lt;p&gt;Mac下直接使用 &lt;code&gt;Homebrew&lt;/code&gt; 安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;2-源码安装&#34;&gt;2. 源码安装
&lt;/h4&gt;&lt;p&gt;源码编译安装，首先安装好依赖的工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://mercurial.selenic.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mercurial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://golang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Go&lt;/a&gt; 1.3+ (Go 1.4+ on Windows)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置好 &lt;code&gt;GOPATH&lt;/code&gt; 环境变量，获取源码并编译：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;GOPATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/go
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go get -v github.com/spf13/hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;源码会下载到 &lt;code&gt;$GOPATH/src&lt;/code&gt; 目录，二进制在 &lt;code&gt;$GOPATH/bin/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果需要更新所有Hugo的依赖库，增加 &lt;code&gt;-u&lt;/code&gt; 参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go get -u -v github.com/spf13/hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;生成站点&#34;&gt;生成站点
&lt;/h3&gt;&lt;p&gt;使用Hugo快速生成站点，比如希望生成到 &lt;code&gt;/path/to/site&lt;/code&gt; 路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo new site /path/to/site
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样就在 &lt;code&gt;/path/to/site&lt;/code&gt; 目录里生成了初始站点，进去目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; /path/to/site
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;站点目录结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ▸ archetypes/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ▸ content/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ▸ layouts/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ▸ static/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    config.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;创建文章&#34;&gt;创建文章
&lt;/h3&gt;&lt;p&gt;创建一个 &lt;code&gt;about&lt;/code&gt; 页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo new about.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;about.md&lt;/code&gt; 自动生成到了 &lt;code&gt;content/about.md&lt;/code&gt; ，打开 &lt;code&gt;about.md&lt;/code&gt; 看下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date = &amp;#34;2015-10-25T08:36:54-07:00&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;draft = true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title = &amp;#34;about&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;+++
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;正文内容
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;内容是 &lt;code&gt;Markdown&lt;/code&gt; 格式的，&lt;code&gt;+++&lt;/code&gt; 之间的内容是 &lt;a class=&#34;link&#34; href=&#34;https://github.com/toml-lang/toml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TOML&lt;/a&gt; 格式的，根据你的喜好，你可以换成 &lt;a class=&#34;link&#34; href=&#34;http://www.yaml.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YAML&lt;/a&gt; 格式（使用 &lt;code&gt;---&lt;/code&gt; 标记）或者 &lt;a class=&#34;link&#34; href=&#34;http://www.json.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON&lt;/a&gt; 格式。&lt;/p&gt;
&lt;p&gt;创建第一篇文章，放到 &lt;code&gt;post&lt;/code&gt; 目录，方便之后生成聚合页面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo new post/first.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;打开编辑 &lt;code&gt;post/first.md&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;date: &amp;#34;2015-10-25T08:36:54-07:00&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;title: &amp;#34;first&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;### Hello Hugo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1. aaa
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1. bbb
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 1. ccc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;安装皮肤&#34;&gt;安装皮肤
&lt;/h3&gt;&lt;p&gt;到 &lt;a class=&#34;link&#34; href=&#34;https://www.gohugo.org/theme/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;皮肤列表&lt;/a&gt; 挑选一个心仪的皮肤，比如你觉得 &lt;code&gt;Hyde&lt;/code&gt; 皮肤不错，找到相关的 &lt;code&gt;GitHub&lt;/code&gt; 地址，创建目录 &lt;code&gt;themes&lt;/code&gt;，在 &lt;code&gt;themes&lt;/code&gt; 目录里把皮肤 &lt;code&gt;git clone&lt;/code&gt; 下来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建 themes 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; themes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git clone https://github.com/spf13/hyde.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;运行hugo&#34;&gt;运行Hugo
&lt;/h3&gt;&lt;p&gt;在你的站点根目录执行 &lt;code&gt;Hugo&lt;/code&gt; 命令进行调试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo server --theme&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hyde --buildDrafts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（注明：v0.15 版本之后，不再需要使用 &lt;code&gt;--watch&lt;/code&gt; 参数了）&lt;/p&gt;
&lt;p&gt;浏览器里打开： &lt;code&gt;http://localhost:1313&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;部署&#34;&gt;部署
&lt;/h3&gt;&lt;p&gt;假设你需要部署在 &lt;code&gt;GitHub Pages&lt;/code&gt; 上，首先在GitHub上创建一个Repository，命名为：&lt;code&gt;salmooo.github.io&lt;/code&gt; （salmooo替换为你的github用户名）。&lt;/p&gt;
&lt;p&gt;在站点根目录执行 &lt;code&gt;Hugo&lt;/code&gt; 命令生成最终页面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ hugo --theme&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;hyde --baseUrl&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://salmooo.github.io/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;（注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉文章头部的 &lt;code&gt;draft=true&lt;/code&gt; 再重新生成。）&lt;/p&gt;
&lt;p&gt;如果一切顺利，所有静态页面都会生成到 &lt;code&gt;public&lt;/code&gt; 目录，将pubilc目录里所有文件 &lt;code&gt;push&lt;/code&gt; 到刚创建的Repository的 &lt;code&gt;master&lt;/code&gt; 分支。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; public
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git remote add origin https://github.com/salmooo/salmooo.github.io.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;first commit&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;浏览器里访问：&lt;code&gt;http://salmooo.github.io/&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
